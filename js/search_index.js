var search_data = {"index":{"searchIndex":["object","rdoc","alias","anonclass","anymethod","attr","classmodule","codeobject","comment","constant","context","section","crossreference","erbio","erbpartial","encoding","error","extend","generator","darkfish","jsonindex","markup","pot","messageextractor","po","poentry","ri","ghostmethod","i18n","locale","text","include","markdown","literals","memoentry","parseerror","ruleinfo","memoentry","parseerror","ruleinfo","markup","attrchanger","attrspan","attributemanager","attributes","blankline","blockquote","document","formatter","hardbreak","include","indentedparagraph","list","listitem","paragraph","parser","error","mystringscanner","parseerror","preprocess","raw","regexphandling","rule","table","toansi","tobs","tohtml","tohtmlcrossref","tohtmlsnippet","tojoinedparagraph","tolabel","tomarkdown","tordoc","totableofcontents","totest","tottonly","verbatim","markupreference","dummyclass","dummymodule","metamethod","methodattr","mixin","normalclass","normalmodule","options","parser","c","changelog","git","markdown","rd","ripperstatelex","innerstatelex","ruby","rubytools","simple","text","rd","blockparser","inline","inlineparser","rdoc","ri","driver","error","notfounderror","error","paths","task","require","rubygemshook","servlet","singleclass","stats","normal","quiet","verbose","store","error","missingfileerror","task","text","tokenstream","tomdoc","toplevel","rake","<<()","<<()","<<()","<<()","<=>()","<=>()","<=>()","<=>()","<=>()","==()","==()","==()","==()","==()","==()","[]()","[]()","[]()","[]=()","_call_seq()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept_blank_line()","accept_blank_line()","accept_blank_line()","accept_block_quote()","accept_block_quote()","accept_block_quote()","accept_document()","accept_document()","accept_heading()","accept_heading()","accept_heading()","accept_heading()","accept_heading()","accept_heading()","accept_indented_paragraph()","accept_list_end()","accept_list_end()","accept_list_end()","accept_list_end()","accept_list_item_end()","accept_list_item_end()","accept_list_item_end()","accept_list_item_end()","accept_list_item_end()","accept_list_item_end()","accept_list_item_start()","accept_list_item_start()","accept_list_item_start()","accept_list_item_start()","accept_list_item_start()","accept_list_item_start()","accept_list_start()","accept_list_start()","accept_list_start()","accept_list_start()","accept_list_start()","accept_paragraph()","accept_paragraph()","accept_paragraph()","accept_paragraph()","accept_paragraph()","accept_raw()","accept_raw()","accept_raw()","accept_rule()","accept_rule()","accept_rule()","accept_rule()","accept_table()","accept_table()","accept_verbatim()","accept_verbatim()","accept_verbatim()","accept_verbatim()","accept_verbatim()","add()","add()","add_alias()","add_alias()","add_alias()","add_alias()","add_alias()","add_alias()","add_alias()","add_also_in()","add_attribute()","add_attribute()","add_c_enclosure()","add_c_variables()","add_class()","add_class()","add_class()","add_class_or_module()","add_comment()","add_comment()","add_constant()","add_constant()","add_constant()","add_extend()","add_extends()","add_extension_modules()","add_file()","add_file()","add_footnote()","add_from()","add_generator()","add_html()","add_html()","add_include()","add_include()","add_includes()","add_label()","add_line_numbers()","add_method()","add_method()","add_method()","add_method()","add_method_documentation()","add_method_list()","add_module()","add_module()","add_module_alias()","add_module_by_normal_module()","add_paragraph()","add_regexp_handling()","add_regexp_handling()","add_regexp_handling_rdoclink()","add_regexp_handling_tidylink()","add_require()","add_section()","add_tag()","add_to()","add_to_classes_or_modules()","add_token()","add_token_listener()","add_tokens()","add_word_pair()","add_word_pair()","alias_extension()","all_classes()","all_classes_and_modules()","all_files()","all_modules()","ancestors()","ancestors()","ancestors()","ancestors()","ancestors_of()","annotate()","annotate()","any_content()","append()","aref()","aref()","aref()","aref()","aref_prefix()","aref_prefix()","aref_prefix()","aref_to()","arglists()","args_directive()","as_href()","as_string()","assemble_template()","asset()","attribute()","attributes()","attributes()","base_name()","before_running_rdoc()","begin_adding()","begin_adding()","binary?()","bitmap_for()","block_params=()","break_on_newline()","build_heading()","build_heading()","build_index()","build_list()","build_paragraph()","build_paragraph()","build_verbatim()","build_verbatim()","cache_path()","calculate()","call_seq()","call_seq=()","call_seq_directive()","can_parse()","can_parse_by_name()","change_attribute()","change_encoding()","changed_attribute_by_name()","check_files()","check_generator()","check_modeline()","check_names()","child_name()","class_attributes()","class_dir()","class_dir()","class_dir()","class_document()","class_file()","class_method_list()","class_methods()","class_path()","classes()","classes()","classes_and_includes_and_extends_for()","classes_and_modules()","classes_hash()","classes_hash()","clear_comment()","clobber_task_description()","collect_first_comment()","collect_tokens()","comment=()","complete()","complete()","complete()","concat()","content()","continue_entry_body()","convert()","convert()","convert()","convert()","convert_attrs()","convert_attrs_matching_word_pairs()","convert_attrs_word_pair_map()","convert_flow()","convert_flow()","convert_html()","convert_regexp_handling()","convert_regexp_handling()","convert_regexp_handlings()","convert_string()","convert_string()","convert_string()","copy_static()","copy_string()","coverage_level=()","create_document()","create_entries()","create_entries()","create_items()","cross_reference()","css()","current()","current=()","current_section()","cvs_url()","cvs_url()","debug_msg()","debug_msg()","default_options()","default_title=()","defaults()","defaults()","define()","defined_in?()","definition()","definition()","definition()","definition()","definition_lists()","delete_legacy_args()","description()","description()","detect_encoding()","direct_ancestors()","direct_ancestors()","display()","display?()","display?()","display_attributes()","display_class()","display_method()","display_name()","display_names()","display_page()","display_page_list()","do_get()","do_aliases()","do_attrs()","do_boot_defclass()","do_classes_and_modules()","do_constants()","do_includes()","do_methods()","do_missing()","do_nothing()","doc_stats()","document()","document()","document_children=()","document_self=()","document_self_or_methods()","documentation_page()","documentation_search()","documentation_source()","documented?()","documented?()","documented?()","documented?()","done_adding()","done_adding()","done_documenting=()","dummy_instance_alias()","dummy_instance_method()","dummy_singleton_method()","dump()","each()","each()","each_ancestor()","each_attribute()","each_classmodule()","each_constant()","each_extend()","each_include()","each_method()","each_name_of()","each_parent()","each_section()","emphasis()","empty?()","empty?()","empty?()","empty?()","encode!()","encode_fallback()","end?()","end_accepting()","end_accepting()","end_accepting()","end_accepting()","eos?()","eql?()","eql?()","error()","error()","error()","exclude()","exclusive?()","expand_class()","expand_name()","expand_tabs()","extension()","extension()","extension?()","extract()","extract_call_seq()","extract_comment()","extract_messages()","file=()","file_dir()","file_dir()","file_name()","files_hash()","filter_methods()","find_alias_comment()","find_ancestor_local_symbol()","find_attr_comment()","find_attribute()","find_attribute_named()","find_body()","find_c_enclosure()","find_class()","find_class_comment()","find_class_method_named()","find_class_named()","find_class_named()","find_class_named_from()","find_class_or_module()","find_class_or_module()","find_const_comment()","find_constant_named()","find_enclosing_module_named()","find_external_alias()","find_external_alias_named()","find_file_named()","find_file_named()","find_include_file()","find_instance_method_named()","find_local_symbol()","find_local_symbol()","find_method()","find_method_named()","find_methods()","find_modifiers()","find_module_named()","find_module_named()","find_module_named()","find_override_comment()","find_store()","find_symbol()","find_symbol_module()","find_text_page()","find_unique()","finish()","finish_page_dir()","fix_basic_object_inheritance()","flow()","flush_left()","for()","force_documentation=()","format=()","formatter()","formatter()","friendly_path()","from_module()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name=()","full_old_name()","fully_documented?()","fully_documented?()","gather_files()","gem_dir()","gemdirs()","gen_body_table()","gen_const_table()","gen_relative_url()","gen_sub_directories()","gen_url()","gen_url()","gen_url()","gen_url()","generate()","generate()","generate()","generate()","generate()","generate()","generate_class()","generate_class_files()","generate_file_files()","generate_gzipped()","generate_index()","generate_page()","generate_servlet_not_found()","generate_servlet_root()","generate_table_of_contents()","generation_hook()","generator_descriptions()","generator_for()","get()","get_bool()","get_class_or_module()","get_class_specification()","get_constant()","get_included_module_with_optional_parens()","get_sorted_module_list()","get_squashed_tk()","get_svninfo()","get_symbol_or_name()","get_tk()","get_tk_until()","get_tkread()","github()","great_job()","group_entries()","handle()","handle_attr()","handle_class_module()","handle_constants()","handle_directive()","handle_ifdefs_in()","handle_method()","handle_pipe()","handle_rdoc_link()","handle_regexp_crossref()","handle_regexp_crossref()","handle_regexp_crossref()","handle_regexp_hard_break()","handle_regexp_hard_break()","handle_regexp_hard_break()","handle_regexp_hard_break()","handle_regexp_hyperlink()","handle_regexp_hyperlink()","handle_regexp_rdoclink()","handle_regexp_rdoclink()","handle_regexp_rdoclink()","handle_regexp_suppressed_crossref()","handle_regexp_tidylink()","handle_regexp_tidylink()","handle_regexp_tidylink()","handle_singleton()","handle_tab_width()","hash()","home()","home_dir()","html()","html_list_name()","html_list_name()","html_name()","html_name()","http_url()","http_url()","if_modified_since()","ignore()","ignore()","ignored?()","in_files()","in_tt?()","include_file()","index_classes()","index_methods()","index_pages()","init_link_notation_regexp_handlings()","init_link_notation_regexp_handlings()","init_regexp_handlings()","init_tags()","init_tags()","init_tags()","init_tags()","init_tags()","initialize()","initialize()","initialize()","initialize_methods_etc()","inline()","install_siginfo_handler()","installed_docs()","instance_attributes()","instance_method_list()","instance_methods()","instance_methods()","interactive()","is_alias_for()","last()","last_modified()","length()","line_index()","link()","link_to()","list_end_for()","list_files_in_directory()","list_item_from()","list_item_start()","list_item_start()","list_known_classes()","list_methods_matching()","load()","load_all()","load_cache()","load_class()","load_class_data()","load_method()","load_method()","load_methods_matching()","load_options()","load_page()","load_rdoc()","load_variable_map()","load_yaml()","look_for_directives_in()","look_for_directives_in()","lookup_method()","main()","main=()","make_message()","make_variable_map()","markup()","markup_code()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_load()","marshal_load()","marshal_load()","marshal_load()","mask_protected_sequences()","match_length()","matched()","merge()","merge()","merge()","merge()","merged?()","method()","method_document()","method_file()","method_type()","methods_by_type()","methods_matching()","module()","module?()","module?()","module_names()","modules()","modules_hash()","modules_hash()","name()","name()","name=()","name_for_path()","name_for_path()","name_prefix()","name_prefix()","name_regexp()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_comment()","new_comment()","newline!()","next_token()","next_words_on_error()","nodoc()","non_aliases()","normalize()","normalize()","normalize_comment()","normalized_file_list()","not_found()","note()","note_for()","notes()","object_class()","off_tags()","off_tags()","on_char()","on_backref()","on_comma()","on_comment()","on_const()","on_cvar()","on_default()","on_error()","on_error()","on_float()","on_gvar()","on_heredoc_beg()","on_heredoc_end()","on_ident()","on_ignored_nl()","on_ignored_sp()","on_imaginary()","on_int()","on_ivar()","on_kw()","on_lbrace()","on_lbracket()","on_lparen()","on_nl()","on_op()","on_period()","on_rational()","on_rbrace()","on_rbracket()","on_rparen()","on_sp()","on_symbeg()","on_tags()","on_tags()","on_tstring_beg()","on_tstring_end()","ongoing_visibility=()","option_list()","options()","orig_initialize()","output_flag_file()","output_name()","page()","page()","page_file()","page_name()","paging?()","paragraph()","paragraph()","param_list()","param_seq()","parent()","parent_file_name()","parent_name()","parent_name()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse_alias()","parse_attr()","parse_attr_accessor()","parse_call_parameters()","parse_class()","parse_comment()","parse_comment_tomdoc()","parse_constant()","parse_constant_visibility()","parse_date()","parse_dot_doc_file()","parse_entries()","parse_entries()","parse_file()","parse_files()","parse_files_matching()","parse_info()","parse_meta_attr()","parse_meta_method()","parse_method()","parse_method_dummy()","parse_method_or_yield_parameters()","parse_method_parameters()","parse_method_params_and_body()","parse_module()","parse_name()","parse_require()","parse_rescue()","parse_statements()","parse_symbol_arg()","parse_symbol_in_arg()","parse_top_level_statements()","parse_url()","parse_visibility()","parse_yield()","parseable?()","parser=()","path()","path()","path()","path()","path()","peek_read()","peek_tk()","peek_token()","peg_parse()","percent_doc()","plain_html()","pop_token()","pos()","post_process()","post_processors()","pretty_name()","pretty_name()","pretty_new_name()","pretty_old_name()","prev_words_on_error()","print_alias()","print_attribute()","print_class()","print_constant()","print_file()","print_file()","print_method()","print_module()","process_args()","push()","push()","push()","push()","quiet()","quiet=()","raw_path()","rb_scan_args()","rdoc_installed?()","rdoc_task_description()","read_directive()","read_documentation_modifiers()","read_file()","record_location()","record_location()","reference()","register()","registered()","remove()","remove_coding_comment()","remove_comment()","remove_commented_out_lines()","remove_from_documentation?()","remove_frozen_string_literal()","remove_invisible()","remove_magic_comment()","remove_modeline()","remove_nodoc()","remove_nodoc_children()","remove_private()","remove_private_comment()","remove_siginfo_handler()","remove_token_listener()","remove_unparseable()","render()","render_template()","report()","report_attributes()","report_class_module()","report_constants()","report_methods()","rerdoc_task_description()","reset()","reset()","reset()","resolve()","resolve_aliases()","resolve_method()","retrieve_comment_body()","ri_installed?()","ri_paths()","root()","root_search()","ruby?()","run()","run()","sanitize_path()","save()","save_cache()","save_class()","save_method()","save_page()","scan()","scan()","scan()","scan()","scan()","scan()","scan()","search_record()","search_record()","search_record()","search_string()","section()","section_contents()","sections()","see()","set_attrs()","set_constant_visibility_for()","set_current_section()","set_eoutvar()","set_eoutvar()","set_visibility_for()","setup()","setup()","setup_generator()","setup_output_dir()","setup_pager()","setup_scanner()","show_documentation()","signature()","site_dir()","skip()","skip_for_variable()","skip_method()","skip_optional_do_after_expression()","skip_parentheses()","skip_tkspace()","skip_tkspace_comment()","skip_tkspace_without_nl()","snippet()","sort_sections()","source()","split_into_flow()","start_accepting()","start_accepting()","start_accepting()","start_accepting()","start_accepting()","start_accepting()","start_collecting_tokens()","start_doc()","start_server()","stop_doc()","store=()","store=()","store=()","store=()","store=()","store=()","store=()","store_for()","strike()","strip_hashes()","strip_newlines()","strip_stars()","strong()","summary()","superclass()","superclass()","superclass=()","superclass_method()","suppress()","suppressed?()","suppressed?()","system_dir()","table_of_contents()","template_dir_for()","template_for()","template_result()","text()","text()","text()","text()","text=()","text?()","time_delta_string()","title()","title=()","tk_nl?()","to_html()","to_html()","to_html()","to_s()","to_s()","to_toc()","token_listener()","token_stream()","tokenize()","tokenize()","tokenize()","tokens_to_s()","tomdoc?()","top_level()","top_level()","translate()","translate()","truncate()","tt?()","tt_sections()","type()","type()","undoc_params()","unget()","unget_tk()","unique_classes()","unique_classes_and_modules()","unique_modules()","unmask_protected_sequences()","unscan()","update_aliases()","update_extends()","update_includes()","update_output_dir()","update_parser_of_file()","upgrade_to_class()","use_markup()","use_prefix()","visibility=()","warn()","warn()","wrap()","wrap()","write_options()","write_style_sheet()","yields_directive()","zip?()","contributing","cve-2013-0256","examplerdoc","history","legal","license","readme","ri","todo"],"longSearchIndex":["object","rdoc","rdoc::alias","rdoc::anonclass","rdoc::anymethod","rdoc::attr","rdoc::classmodule","rdoc::codeobject","rdoc::comment","rdoc::constant","rdoc::context","rdoc::context::section","rdoc::crossreference","rdoc::erbio","rdoc::erbpartial","rdoc::encoding","rdoc::error","rdoc::extend","rdoc::generator","rdoc::generator::darkfish","rdoc::generator::jsonindex","rdoc::generator::markup","rdoc::generator::pot","rdoc::generator::pot::messageextractor","rdoc::generator::pot::po","rdoc::generator::pot::poentry","rdoc::generator::ri","rdoc::ghostmethod","rdoc::i18n","rdoc::i18n::locale","rdoc::i18n::text","rdoc::include","rdoc::markdown","rdoc::markdown::literals","rdoc::markdown::literals::memoentry","rdoc::markdown::literals::parseerror","rdoc::markdown::literals::ruleinfo","rdoc::markdown::memoentry","rdoc::markdown::parseerror","rdoc::markdown::ruleinfo","rdoc::markup","rdoc::markup::attrchanger","rdoc::markup::attrspan","rdoc::markup::attributemanager","rdoc::markup::attributes","rdoc::markup::blankline","rdoc::markup::blockquote","rdoc::markup::document","rdoc::markup::formatter","rdoc::markup::hardbreak","rdoc::markup::include","rdoc::markup::indentedparagraph","rdoc::markup::list","rdoc::markup::listitem","rdoc::markup::paragraph","rdoc::markup::parser","rdoc::markup::parser::error","rdoc::markup::parser::mystringscanner","rdoc::markup::parser::parseerror","rdoc::markup::preprocess","rdoc::markup::raw","rdoc::markup::regexphandling","rdoc::markup::rule","rdoc::markup::table","rdoc::markup::toansi","rdoc::markup::tobs","rdoc::markup::tohtml","rdoc::markup::tohtmlcrossref","rdoc::markup::tohtmlsnippet","rdoc::markup::tojoinedparagraph","rdoc::markup::tolabel","rdoc::markup::tomarkdown","rdoc::markup::tordoc","rdoc::markup::totableofcontents","rdoc::markup::totest","rdoc::markup::tottonly","rdoc::markup::verbatim","rdoc::markupreference","rdoc::markupreference::dummyclass","rdoc::markupreference::dummymodule","rdoc::metamethod","rdoc::methodattr","rdoc::mixin","rdoc::normalclass","rdoc::normalmodule","rdoc::options","rdoc::parser","rdoc::parser::c","rdoc::parser::changelog","rdoc::parser::changelog::git","rdoc::parser::markdown","rdoc::parser::rd","rdoc::parser::ripperstatelex","rdoc::parser::ripperstatelex::innerstatelex","rdoc::parser::ruby","rdoc::parser::rubytools","rdoc::parser::simple","rdoc::parser::text","rdoc::rd","rdoc::rd::blockparser","rdoc::rd::inline","rdoc::rd::inlineparser","rdoc::rdoc","rdoc::ri","rdoc::ri::driver","rdoc::ri::driver::error","rdoc::ri::driver::notfounderror","rdoc::ri::error","rdoc::ri::paths","rdoc::ri::task","rdoc::require","rdoc::rubygemshook","rdoc::servlet","rdoc::singleclass","rdoc::stats","rdoc::stats::normal","rdoc::stats::quiet","rdoc::stats::verbose","rdoc::store","rdoc::store::error","rdoc::store::missingfileerror","rdoc::task","rdoc::text","rdoc::tokenstream","rdoc::tomdoc","rdoc::toplevel","rake","rdoc::markup::document#<<()","rdoc::markup::list#<<()","rdoc::markup::listitem#<<()","rdoc::markup::raw#<<()","rdoc::alias#<=>()","rdoc::constant#<=>()","rdoc::context#<=>()","rdoc::methodattr#<=>()","rdoc::mixin#<=>()","rdoc::attr#==()","rdoc::constant#==()","rdoc::context::section#==()","rdoc::markup::regexphandling#==()","rdoc::markup::table#==()","rdoc::toplevel#==()","rdoc::i18n::locale::[]()","rdoc::markup::attrspan#[]()","rdoc::markup::parser::mystringscanner#[]()","rdoc::i18n::locale::[]=()","rdoc::anymethod#_call_seq()","rdoc::markup::blankline#accept()","rdoc::markup::blockquote#accept()","rdoc::markup::document#accept()","rdoc::markup::hardbreak#accept()","rdoc::markup::indentedparagraph#accept()","rdoc::markup::list#accept()","rdoc::markup::listitem#accept()","rdoc::markup::paragraph#accept()","rdoc::markup::raw#accept()","rdoc::markup::rule#accept()","rdoc::markup::table#accept()","rdoc::markup::verbatim#accept()","rdoc::markup::tohtml#accept_blank_line()","rdoc::markup::tordoc#accept_blank_line()","rdoc::markup::tottonly#accept_blank_line()","rdoc::markup::tohtml#accept_block_quote()","rdoc::markup::tordoc#accept_block_quote()","rdoc::markup::tottonly#accept_block_quote()","rdoc::markup::formatter#accept_document()","rdoc::markup::totableofcontents#accept_document()","rdoc::markup::tobs#accept_heading()","rdoc::markup::tohtml#accept_heading()","rdoc::markup::tohtmlsnippet#accept_heading()","rdoc::markup::tordoc#accept_heading()","rdoc::markup::totableofcontents#accept_heading()","rdoc::markup::tottonly#accept_heading()","rdoc::markup::tordoc#accept_indented_paragraph()","rdoc::markup::tohtml#accept_list_end()","rdoc::markup::tomarkdown#accept_list_end()","rdoc::markup::tordoc#accept_list_end()","rdoc::markup::tottonly#accept_list_end()","rdoc::markup::toansi#accept_list_item_end()","rdoc::markup::tohtml#accept_list_item_end()","rdoc::markup::tohtmlsnippet#accept_list_item_end()","rdoc::markup::tomarkdown#accept_list_item_end()","rdoc::markup::tordoc#accept_list_item_end()","rdoc::markup::tottonly#accept_list_item_end()","rdoc::markup::toansi#accept_list_item_start()","rdoc::markup::tohtml#accept_list_item_start()","rdoc::markup::tohtmlsnippet#accept_list_item_start()","rdoc::markup::tomarkdown#accept_list_item_start()","rdoc::markup::tordoc#accept_list_item_start()","rdoc::markup::tottonly#accept_list_item_start()","rdoc::markup::tohtml#accept_list_start()","rdoc::markup::tohtmlsnippet#accept_list_start()","rdoc::markup::tomarkdown#accept_list_start()","rdoc::markup::tordoc#accept_list_start()","rdoc::markup::tottonly#accept_list_start()","rdoc::markup::tohtml#accept_paragraph()","rdoc::markup::tohtmlsnippet#accept_paragraph()","rdoc::markup::tojoinedparagraph#accept_paragraph()","rdoc::markup::tordoc#accept_paragraph()","rdoc::markup::tottonly#accept_paragraph()","rdoc::markup::tohtml#accept_raw()","rdoc::markup::tordoc#accept_raw()","rdoc::markup::tottonly#accept_raw()","rdoc::markup::tohtml#accept_rule()","rdoc::markup::tomarkdown#accept_rule()","rdoc::markup::tordoc#accept_rule()","rdoc::markup::tottonly#accept_rule()","rdoc::markup::tohtml#accept_table()","rdoc::markup::tordoc#accept_table()","rdoc::markup::tohtml#accept_verbatim()","rdoc::markup::tohtmlsnippet#accept_verbatim()","rdoc::markup::tomarkdown#accept_verbatim()","rdoc::markup::tordoc#accept_verbatim()","rdoc::markup::tottonly#accept_verbatim()","rdoc::context#add()","rdoc::generator::pot::po#add()","rdoc::anymethod#add_alias()","rdoc::attr#add_alias()","rdoc::context#add_alias()","rdoc::methodattr#add_alias()","rdoc::parser::c#add_alias()","rdoc::stats#add_alias()","rdoc::toplevel#add_alias()","rdoc::ri::driver#add_also_in()","rdoc::context#add_attribute()","rdoc::stats#add_attribute()","rdoc::store#add_c_enclosure()","rdoc::store#add_c_variables()","rdoc::context#add_class()","rdoc::ri::driver#add_class()","rdoc::stats#add_class()","rdoc::context#add_class_or_module()","rdoc::classmodule#add_comment()","rdoc::context::section#add_comment()","rdoc::context#add_constant()","rdoc::stats#add_constant()","rdoc::toplevel#add_constant()","rdoc::context#add_extend()","rdoc::ri::driver#add_extends()","rdoc::ri::driver#add_extension_modules()","rdoc::stats#add_file()","rdoc::store#add_file()","rdoc::rd::blockparser#add_footnote()","rdoc::ri::driver#add_from()","rdoc::rdoc::add_generator()","rdoc::markup#add_html()","rdoc::markup::attributemanager#add_html()","rdoc::context#add_include()","rdoc::toplevel#add_include()","rdoc::ri::driver#add_includes()","rdoc::rd::blockparser#add_label()","rdoc::methodattr#add_line_numbers()","rdoc::context#add_method()","rdoc::ri::driver#add_method()","rdoc::stats#add_method()","rdoc::toplevel#add_method()","rdoc::ri::driver#add_method_documentation()","rdoc::ri::driver#add_method_list()","rdoc::context#add_module()","rdoc::stats#add_module()","rdoc::context#add_module_alias()","rdoc::context#add_module_by_normal_module()","rdoc::markup::tohtmlsnippet#add_paragraph()","rdoc::markup#add_regexp_handling()","rdoc::markup::attributemanager#add_regexp_handling()","rdoc::markup::formatter#add_regexp_handling_rdoclink()","rdoc::markup::formatter#add_regexp_handling_tidylink()","rdoc::context#add_require()","rdoc::context#add_section()","rdoc::markup::formatter#add_tag()","rdoc::context#add_to()","rdoc::toplevel#add_to_classes_or_modules()","rdoc::tokenstream#add_token()","rdoc::parser::rubytools#add_token_listener()","rdoc::tokenstream#add_tokens()","rdoc::markup#add_word_pair()","rdoc::markup::attributemanager#add_word_pair()","rdoc::parser::alias_extension()","rdoc::store#all_classes()","rdoc::store#all_classes_and_modules()","rdoc::store#all_files()","rdoc::store#all_modules()","rdoc::classmodule#ancestors()","rdoc::normalclass#ancestors()","rdoc::singleclass#ancestors()","rdoc::store#ancestors()","rdoc::ri::driver#ancestors_of()","rdoc::markup::formatter#annotate()","rdoc::markup::tobs#annotate()","rdoc::context#any_content()","rdoc::rd::inline#append()","rdoc::alias#aref()","rdoc::classmodule#aref()","rdoc::context::section#aref()","rdoc::methodattr#aref()","rdoc::anymethod#aref_prefix()","rdoc::attr#aref_prefix()","rdoc::methodattr#aref_prefix()","rdoc::generator::markup#aref_to()","rdoc::anymethod#arglists()","rdoc::markupreference#args_directive()","rdoc::generator::markup#as_href()","rdoc::markup::attributes#as_string()","rdoc::generator::darkfish#assemble_template()","rdoc::servlet#asset()","rdoc::markup::attributemanager#attribute()","rdoc::markup::tordoc#attributes()","rdoc::store#attributes()","rdoc::toplevel#base_name()","rdoc::task#before_running_rdoc()","rdoc::stats#begin_adding()","rdoc::stats::quiet#begin_adding()","rdoc::parser::binary?()","rdoc::markup::attributes#bitmap_for()","rdoc::methodattr#block_params=()","rdoc::markdown#break_on_newline()","rdoc::markup::parser#build_heading()","rdoc::tomdoc#build_heading()","rdoc::generator::jsonindex#build_index()","rdoc::markup::parser#build_list()","rdoc::markup::parser#build_paragraph()","rdoc::tomdoc#build_paragraph()","rdoc::markup::parser#build_verbatim()","rdoc::tomdoc#build_verbatim()","rdoc::store#cache_path()","rdoc::stats#calculate()","rdoc::anymethod#call_seq()","rdoc::anymethod#call_seq=()","rdoc::markupreference#call_seq_directive()","rdoc::parser::can_parse()","rdoc::parser::can_parse_by_name()","rdoc::markup::attributemanager#change_attribute()","rdoc::encoding::change_encoding()","rdoc::markup::attributemanager#changed_attribute_by_name()","rdoc::options#check_files()","rdoc::options#check_generator()","rdoc::parser::check_modeline()","rdoc::task#check_names()","rdoc::context#child_name()","rdoc::context#class_attributes()","rdoc::generator::darkfish#class_dir()","rdoc::generator::jsonindex#class_dir()","rdoc::generator::pot#class_dir()","rdoc::ri::driver#class_document()","rdoc::store#class_file()","rdoc::context#class_method_list()","rdoc::store#class_methods()","rdoc::store#class_path()","rdoc::context#classes()","rdoc::ri::driver#classes()","rdoc::ri::driver#classes_and_includes_and_extends_for()","rdoc::context#classes_and_modules()","rdoc::context#classes_hash()","rdoc::store#classes_hash()","rdoc::classmodule#clear_comment()","rdoc::task#clobber_task_description()","rdoc::parser::ruby#collect_first_comment()","rdoc::tokenstream#collect_tokens()","rdoc::codeobject#comment=()","rdoc::classmodule#complete()","rdoc::ri::driver#complete()","rdoc::store#complete()","rdoc::markup::document#concat()","rdoc::rd::blockparser#content()","rdoc::parser::changelog#continue_entry_body()","rdoc::markup#convert()","rdoc::markup::formatter#convert()","rdoc::markup::tohtmlsnippet#convert()","rdoc::markup::tolabel#convert()","rdoc::markup::attributemanager#convert_attrs()","rdoc::markup::attributemanager#convert_attrs_matching_word_pairs()","rdoc::markup::attributemanager#convert_attrs_word_pair_map()","rdoc::markup::formatter#convert_flow()","rdoc::markup::tohtmlsnippet#convert_flow()","rdoc::markup::attributemanager#convert_html()","rdoc::markup::formatter#convert_regexp_handling()","rdoc::markup::tobs#convert_regexp_handling()","rdoc::markup::attributemanager#convert_regexp_handlings()","rdoc::markup::formatter#convert_string()","rdoc::markup::tobs#convert_string()","rdoc::markup::tohtml#convert_string()","rdoc::generator::darkfish#copy_static()","rdoc::markup::attributemanager#copy_string()","rdoc::stats#coverage_level=()","rdoc::parser::changelog#create_document()","rdoc::parser::changelog#create_entries()","rdoc::parser::changelog::git#create_entries()","rdoc::parser::changelog#create_items()","rdoc::markup::tohtmlcrossref#cross_reference()","rdoc::markdown#css()","rdoc::rdoc::current()","rdoc::rdoc::current=()","rdoc::context#current_section()","rdoc::generator::markup#cvs_url()","rdoc::toplevel#cvs_url()","rdoc::generator::darkfish#debug_msg()","rdoc::generator::jsonindex#debug_msg()","rdoc::ri::driver::default_options()","rdoc::options#default_title=()","rdoc::ri::task#defaults()","rdoc::task#defaults()","rdoc::task#define()","rdoc::context#defined_in?()","rdoc::attr#definition()","rdoc::normalclass#definition()","rdoc::normalmodule#definition()","rdoc::singleclass#definition()","rdoc::markdown#definition_lists()","rdoc::rubygemshook#delete_legacy_args()","rdoc::classmodule#description()","rdoc::generator::markup#description()","rdoc::encoding::detect_encoding()","rdoc::classmodule#direct_ancestors()","rdoc::normalclass#direct_ancestors()","rdoc::ri::driver#display()","rdoc::codeobject#display?()","rdoc::toplevel#display?()","rdoc::markup::attributemanager#display_attributes()","rdoc::ri::driver#display_class()","rdoc::ri::driver#display_method()","rdoc::ri::driver#display_name()","rdoc::ri::driver#display_names()","rdoc::ri::driver#display_page()","rdoc::ri::driver#display_page_list()","rdoc::servlet#do_get()","rdoc::parser::c#do_aliases()","rdoc::parser::c#do_attrs()","rdoc::parser::c#do_boot_defclass()","rdoc::parser::c#do_classes_and_modules()","rdoc::parser::c#do_constants()","rdoc::parser::c#do_includes()","rdoc::parser::c#do_methods()","rdoc::parser::c#do_missing()","rdoc::markup::tottonly#do_nothing()","rdoc::stats#doc_stats()","rdoc::rdoc#document()","rdoc::rubygemshook#document()","rdoc::codeobject#document_children=()","rdoc::codeobject#document_self=()","rdoc::classmodule#document_self_or_methods()","rdoc::servlet#documentation_page()","rdoc::servlet#documentation_search()","rdoc::servlet#documentation_source()","rdoc::classmodule#documented?()","rdoc::codeobject#documented?()","rdoc::constant#documented?()","rdoc::methodattr#documented?()","rdoc::stats#done_adding()","rdoc::stats::quiet#done_adding()","rdoc::codeobject#done_documenting=()","rdoc::markupreference#dummy_instance_alias()","rdoc::markupreference#dummy_instance_method()","rdoc::markupreference::dummy_singleton_method()","rdoc::ri::driver::dump()","rdoc::markup::document#each()","rdoc::ri::paths::each()","rdoc::classmodule#each_ancestor()","rdoc::context#each_attribute()","rdoc::context#each_classmodule()","rdoc::context#each_constant()","rdoc::context#each_extend()","rdoc::context#each_include()","rdoc::context#each_method()","rdoc::markup::attributes#each_name_of()","rdoc::codeobject#each_parent()","rdoc::context#each_section()","rdoc::markdown#emphasis()","rdoc::comment#empty?()","rdoc::markup::document#empty?()","rdoc::markup::list#empty?()","rdoc::markup::listitem#empty?()","rdoc::comment#encode!()","rdoc::text::encode_fallback()","rdoc::parser::ripperstatelex::end?()","rdoc::markup::tohtml#end_accepting()","rdoc::markup::tordoc#end_accepting()","rdoc::markup::totableofcontents#end_accepting()","rdoc::markup::tottonly#end_accepting()","rdoc::markup::parser::mystringscanner#eos?()","rdoc::context::section#eql?()","rdoc::toplevel#eql?()","rdoc::parser::ruby#error()","rdoc::rdoc#error()","rdoc::servlet#error()","rdoc::options#exclude()","rdoc::markup::attributemanager#exclusive?()","rdoc::ri::driver#expand_class()","rdoc::ri::driver#expand_name()","rdoc::text#expand_tabs()","rdoc::markdown#extension()","rdoc::markdown::extension()","rdoc::markdown#extension?()","rdoc::generator::pot::messageextractor#extract()","rdoc::comment#extract_call_seq()","rdoc::context::section#extract_comment()","rdoc::i18n::text#extract_messages()","rdoc::markup::document#file=()","rdoc::generator::darkfish#file_dir()","rdoc::generator::jsonindex#file_dir()","rdoc::codeobject#file_name()","rdoc::store#files_hash()","rdoc::ri::driver#filter_methods()","rdoc::parser::c#find_alias_comment()","rdoc::classmodule#find_ancestor_local_symbol()","rdoc::parser::c#find_attr_comment()","rdoc::context#find_attribute()","rdoc::context#find_attribute_named()","rdoc::parser::c#find_body()","rdoc::store#find_c_enclosure()","rdoc::parser::c#find_class()","rdoc::parser::c#find_class_comment()","rdoc::context#find_class_method_named()","rdoc::classmodule#find_class_named()","rdoc::store#find_class_named()","rdoc::store#find_class_named_from()","rdoc::store#find_class_or_module()","rdoc::toplevel#find_class_or_module()","rdoc::parser::c#find_const_comment()","rdoc::context#find_constant_named()","rdoc::context#find_enclosing_module_named()","rdoc::context#find_external_alias()","rdoc::context#find_external_alias_named()","rdoc::context#find_file_named()","rdoc::store#find_file_named()","rdoc::markup::preprocess#find_include_file()","rdoc::context#find_instance_method_named()","rdoc::context#find_local_symbol()","rdoc::toplevel#find_local_symbol()","rdoc::context#find_method()","rdoc::context#find_method_named()","rdoc::ri::driver#find_methods()","rdoc::parser::c#find_modifiers()","rdoc::context#find_module_named()","rdoc::store#find_module_named()","rdoc::toplevel#find_module_named()","rdoc::parser::c#find_override_comment()","rdoc::ri::driver#find_store()","rdoc::context#find_symbol()","rdoc::context#find_symbol_module()","rdoc::store#find_text_page()","rdoc::store#find_unique()","rdoc::options#finish()","rdoc::options#finish_page_dir()","rdoc::store#fix_basic_object_inheritance()","rdoc::markup::attributemanager#flow()","rdoc::text#flush_left()","rdoc::parser::for()","rdoc::codeobject#force_documentation=()","rdoc::comment#format=()","rdoc::generator::markup#formatter()","rdoc::ri::driver#formatter()","rdoc::store#friendly_path()","rdoc::classmodule::from_module()","rdoc::classmodule#full_name()","rdoc::constant#full_name()","rdoc::context#full_name()","rdoc::methodattr#full_name()","rdoc::mixin#full_name()","rdoc::toplevel#full_name()","rdoc::codeobject#full_name=()","rdoc::alias#full_old_name()","rdoc::context#fully_documented?()","rdoc::stats#fully_documented?()","rdoc::rdoc#gather_files()","rdoc::ri::paths::gem_dir()","rdoc::ri::paths::gemdirs()","rdoc::parser::c#gen_body_table()","rdoc::parser::c#gen_const_table()","rdoc::markup::formatter::gen_relative_url()","rdoc::generator::darkfish#gen_sub_directories()","rdoc::markup::tohtml#gen_url()","rdoc::markup::tohtmlcrossref#gen_url()","rdoc::markup::tohtmlsnippet#gen_url()","rdoc::markup::tomarkdown#gen_url()","rdoc::generator::darkfish#generate()","rdoc::generator::jsonindex#generate()","rdoc::generator::pot#generate()","rdoc::generator::ri#generate()","rdoc::rdoc#generate()","rdoc::rubygemshook#generate()","rdoc::generator::darkfish#generate_class()","rdoc::generator::darkfish#generate_class_files()","rdoc::generator::darkfish#generate_file_files()","rdoc::generator::jsonindex#generate_gzipped()","rdoc::generator::darkfish#generate_index()","rdoc::generator::darkfish#generate_page()","rdoc::generator::darkfish#generate_servlet_not_found()","rdoc::generator::darkfish#generate_servlet_root()","rdoc::generator::darkfish#generate_table_of_contents()","rdoc::rubygemshook::generation_hook()","rdoc::options#generator_descriptions()","rdoc::servlet#generator_for()","rdoc::markup::parser#get()","rdoc::parser::ruby#get_bool()","rdoc::parser::ruby#get_class_or_module()","rdoc::parser::ruby#get_class_specification()","rdoc::parser::ruby#get_constant()","rdoc::parser::ruby#get_included_module_with_optional_parens()","rdoc::generator::darkfish#get_sorted_module_list()","rdoc::parser::ripperstatelex#get_squashed_tk()","rdoc::generator::darkfish#get_svninfo()","rdoc::parser::ruby#get_symbol_or_name()","rdoc::parser::rubytools#get_tk()","rdoc::parser::rubytools#get_tk_until()","rdoc::parser::rubytools#get_tkread()","rdoc::markdown#github()","rdoc::stats#great_job()","rdoc::parser::changelog#group_entries()","rdoc::markup::preprocess#handle()","rdoc::parser::c#handle_attr()","rdoc::parser::c#handle_class_module()","rdoc::parser::c#handle_constants()","rdoc::markup::preprocess#handle_directive()","rdoc::parser::c#handle_ifdefs_in()","rdoc::parser::c#handle_method()","rdoc::rdoc#handle_pipe()","rdoc::markup::tomarkdown#handle_rdoc_link()","rdoc::markup::tohtmlcrossref#handle_regexp_crossref()","rdoc::markup::tohtmlsnippet#handle_regexp_crossref()","rdoc::markup::tolabel#handle_regexp_crossref()","rdoc::markup::tohtml#handle_regexp_hard_break()","rdoc::markup::tohtmlsnippet#handle_regexp_hard_break()","rdoc::markup::tomarkdown#handle_regexp_hard_break()","rdoc::markup::tordoc#handle_regexp_hard_break()","rdoc::markup::tohtml#handle_regexp_hyperlink()","rdoc::markup::tohtmlcrossref#handle_regexp_hyperlink()","rdoc::markup::tohtml#handle_regexp_rdoclink()","rdoc::markup::tohtmlcrossref#handle_regexp_rdoclink()","rdoc::markup::tomarkdown#handle_regexp_rdoclink()","rdoc::markup::tordoc#handle_regexp_suppressed_crossref()","rdoc::markup::tohtml#handle_regexp_tidylink()","rdoc::markup::tolabel#handle_regexp_tidylink()","rdoc::markup::tomarkdown#handle_regexp_tidylink()","rdoc::parser::c#handle_singleton()","rdoc::parser#handle_tab_width()","rdoc::toplevel#hash()","rdoc::home()","rdoc::ri::paths::home_dir()","rdoc::markdown#html()","rdoc::markup::tohtml#html_list_name()","rdoc::markup::tohtmlsnippet#html_list_name()","rdoc::alias#html_name()","rdoc::methodattr#html_name()","rdoc::context#http_url()","rdoc::toplevel#http_url()","rdoc::servlet#if_modified_since()","rdoc::codeobject#ignore()","rdoc::markup::formatter#ignore()","rdoc::codeobject#ignored?()","rdoc::context::section#in_files()","rdoc::markup::formatter#in_tt?()","rdoc::markup::preprocess#include_file()","rdoc::generator::jsonindex#index_classes()","rdoc::generator::jsonindex#index_methods()","rdoc::generator::jsonindex#index_pages()","rdoc::markup::tohtml#init_link_notation_regexp_handlings()","rdoc::markup::tohtmlcrossref#init_link_notation_regexp_handlings()","rdoc::markup::tohtml#init_regexp_handlings()","rdoc::markup::toansi#init_tags()","rdoc::markup::tobs#init_tags()","rdoc::markup::tohtml#init_tags()","rdoc::markup::tomarkdown#init_tags()","rdoc::markup::tordoc#init_tags()","rdoc::generator::pot#initialize()","rdoc::generator::ri#initialize()","rdoc::rd::inline#initialize()","rdoc::context#initialize_methods_etc()","rdoc::rd::inlineparser#inline()","rdoc::rdoc#install_siginfo_handler()","rdoc::servlet#installed_docs()","rdoc::context#instance_attributes()","rdoc::context#instance_method_list()","rdoc::context#instance_methods()","rdoc::store#instance_methods()","rdoc::ri::driver#interactive()","rdoc::constant#is_alias_for()","rdoc::markup::list#last()","rdoc::toplevel#last_modified()","rdoc::markup::listitem#length()","rdoc::rd::blockparser#line_index()","rdoc::markup::tohtmlcrossref#link()","rdoc::markdown#link_to()","rdoc::markup::tohtml#list_end_for()","rdoc::rdoc#list_files_in_directory()","rdoc::markdown#list_item_from()","rdoc::markup::tohtml#list_item_start()","rdoc::markup::tohtmlsnippet#list_item_start()","rdoc::ri::driver#list_known_classes()","rdoc::ri::driver#list_methods_matching()","rdoc::i18n::locale#load()","rdoc::store#load_all()","rdoc::store#load_cache()","rdoc::store#load_class()","rdoc::store#load_class_data()","rdoc::ri::driver#load_method()","rdoc::store#load_method()","rdoc::ri::driver#load_methods_matching()","rdoc::options::load_options()","rdoc::store#load_page()","rdoc::rubygemshook::load_rdoc()","rdoc::parser::c#load_variable_map()","rdoc::load_yaml()","rdoc::parser::c#look_for_directives_in()","rdoc::parser::ruby#look_for_directives_in()","rdoc::ri::driver#lookup_method()","rdoc::store#main()","rdoc::store#main=()","rdoc::parser::ruby#make_message()","rdoc::store#make_variable_map()","rdoc::text#markup()","rdoc::methodattr#markup_code()","rdoc::anymethod#marshal_dump()","rdoc::attr#marshal_dump()","rdoc::constant#marshal_dump()","rdoc::context::section#marshal_dump()","rdoc::toplevel#marshal_dump()","rdoc::anymethod#marshal_load()","rdoc::attr#marshal_load()","rdoc::constant#marshal_load()","rdoc::context::section#marshal_load()","rdoc::markup::attributemanager#mask_protected_sequences()","object#match_length()","rdoc::markup::parser::mystringscanner#matched()","rdoc::classmodule#merge()","rdoc::generator::pot::poentry#merge()","rdoc::markup::document#merge()","rdoc::markup::raw#merge()","rdoc::markup::document#merged?()","rdoc::markupreference#method()","rdoc::ri::driver#method_document()","rdoc::store#method_file()","rdoc::ri::driver#method_type()","rdoc::context#methods_by_type()","rdoc::context#methods_matching()","rdoc::mixin#module()","rdoc::classmodule#module?()","rdoc::normalmodule#module?()","rdoc::store#module_names()","rdoc::context#modules()","rdoc::context#modules_hash()","rdoc::store#modules_hash()","rdoc::anymethod#name()","rdoc::ri::driver::notfounderror#name()","rdoc::classmodule#name=()","rdoc::classmodule#name_for_path()","rdoc::context#name_for_path()","rdoc::alias#name_prefix()","rdoc::methodattr#name_prefix()","rdoc::ri::driver#name_regexp()","rdoc::alias::new()","rdoc::anymethod::new()","rdoc::attr::new()","rdoc::classmodule::new()","rdoc::codeobject::new()","rdoc::comment::new()","rdoc::constant::new()","rdoc::context::new()","rdoc::context::section::new()","rdoc::crossreference::new()","rdoc::erbio::new()","rdoc::generator::darkfish::new()","rdoc::generator::jsonindex::new()","rdoc::generator::pot::messageextractor::new()","rdoc::generator::pot::po::new()","rdoc::generator::pot::poentry::new()","rdoc::i18n::locale::new()","rdoc::i18n::text::new()","rdoc::markdown::new()","rdoc::markup::new()","rdoc::markup::attrspan::new()","rdoc::markup::attributemanager::new()","rdoc::markup::attributes::new()","rdoc::markup::blankline::new()","rdoc::markup::document::new()","rdoc::markup::formatter::new()","rdoc::markup::hardbreak::new()","rdoc::markup::include::new()","rdoc::markup::indentedparagraph::new()","rdoc::markup::list::new()","rdoc::markup::listitem::new()","rdoc::markup::parser::new()","rdoc::markup::parser::mystringscanner::new()","rdoc::markup::preprocess::new()","rdoc::markup::raw::new()","rdoc::markup::regexphandling::new()","rdoc::markup::table::new()","rdoc::markup::toansi::new()","rdoc::markup::tobs::new()","rdoc::markup::tohtml::new()","rdoc::markup::tohtmlcrossref::new()","rdoc::markup::tohtmlsnippet::new()","rdoc::markup::tolabel::new()","rdoc::markup::tomarkdown::new()","rdoc::markup::tordoc::new()","rdoc::markup::tottonly::new()","rdoc::methodattr::new()","rdoc::mixin::new()","rdoc::parser::new()","rdoc::parser::c::new()","rdoc::parser::ripperstatelex::new()","rdoc::parser::ripperstatelex::innerstatelex::new()","rdoc::parser::ruby::new()","rdoc::parser::simple::new()","rdoc::rd::blockparser::new()","rdoc::rd::inline::new()","rdoc::rd::inlineparser::new()","rdoc::rdoc::new()","rdoc::ri::driver::new()","rdoc::ri::task::new()","rdoc::require::new()","rdoc::rubygemshook::new()","rdoc::servlet::new()","rdoc::stats::new()","rdoc::stats::quiet::new()","rdoc::store::new()","rdoc::store::missingfileerror::new()","rdoc::task::new()","rdoc::tomdoc::new()","rdoc::toplevel::new()","rdoc::parser::c#new_comment()","rdoc::parser::ruby#new_comment()","rdoc::markup::parser::mystringscanner#newline!()","rdoc::rd::inlineparser#next_token()","rdoc::rd::inlineparser#next_words_on_error()","rdoc::stats::verbose#nodoc()","rdoc::classmodule#non_aliases()","rdoc::comment#normalize()","rdoc::markup::verbatim#normalize()","rdoc::text#normalize_comment()","rdoc::rdoc#normalized_file_list()","rdoc::servlet#not_found()","rdoc::markdown#note()","rdoc::markdown#note_for()","rdoc::markdown#notes()","rdoc::toplevel#object_class()","rdoc::markup::formatter#off_tags()","rdoc::markup::tohtmlsnippet#off_tags()","rdoc::parser::ripperstatelex::innerstatelex#on_char()","rdoc::parser::ripperstatelex::innerstatelex#on_backref()","rdoc::parser::ripperstatelex::innerstatelex#on_comma()","rdoc::parser::ripperstatelex::innerstatelex#on_comment()","rdoc::parser::ripperstatelex::innerstatelex#on_const()","rdoc::parser::ripperstatelex::innerstatelex#on_cvar()","rdoc::parser::ripperstatelex::innerstatelex#on_default()","rdoc::rd::blockparser#on_error()","rdoc::rd::inlineparser#on_error()","rdoc::parser::ripperstatelex::innerstatelex#on_float()","rdoc::parser::ripperstatelex::innerstatelex#on_gvar()","rdoc::parser::ripperstatelex::innerstatelex#on_heredoc_beg()","rdoc::parser::ripperstatelex::innerstatelex#on_heredoc_end()","rdoc::parser::ripperstatelex::innerstatelex#on_ident()","rdoc::parser::ripperstatelex::innerstatelex#on_ignored_nl()","rdoc::parser::ripperstatelex::innerstatelex#on_ignored_sp()","rdoc::parser::ripperstatelex::innerstatelex#on_imaginary()","rdoc::parser::ripperstatelex::innerstatelex#on_int()","rdoc::parser::ripperstatelex::innerstatelex#on_ivar()","rdoc::parser::ripperstatelex::innerstatelex#on_kw()","rdoc::parser::ripperstatelex::innerstatelex#on_lbrace()","rdoc::parser::ripperstatelex::innerstatelex#on_lbracket()","rdoc::parser::ripperstatelex::innerstatelex#on_lparen()","rdoc::parser::ripperstatelex::innerstatelex#on_nl()","rdoc::parser::ripperstatelex::innerstatelex#on_op()","rdoc::parser::ripperstatelex::innerstatelex#on_period()","rdoc::parser::ripperstatelex::innerstatelex#on_rational()","rdoc::parser::ripperstatelex::innerstatelex#on_rbrace()","rdoc::parser::ripperstatelex::innerstatelex#on_rbracket()","rdoc::parser::ripperstatelex::innerstatelex#on_rparen()","rdoc::parser::ripperstatelex::innerstatelex#on_sp()","rdoc::parser::ripperstatelex::innerstatelex#on_symbeg()","rdoc::markup::formatter#on_tags()","rdoc::markup::tohtmlsnippet#on_tags()","rdoc::parser::ripperstatelex::innerstatelex#on_tstring_beg()","rdoc::parser::ripperstatelex::innerstatelex#on_tstring_end()","rdoc::context#ongoing_visibility=()","rdoc::task#option_list()","rdoc::codeobject#options()","rdoc::markdown#orig_initialize()","rdoc::rdoc#output_flag_file()","rdoc::methodattr#output_name()","rdoc::ri::driver#page()","rdoc::store#page()","rdoc::store#page_file()","rdoc::toplevel#page_name()","rdoc::ri::driver#paging?()","rdoc::markdown#paragraph()","rdoc::rd::blockparser#paragraph()","rdoc::anymethod#param_list()","rdoc::anymethod#param_seq()","rdoc::codeobject#parent()","rdoc::codeobject#parent_file_name()","rdoc::codeobject#parent_name()","rdoc::methodattr#parent_name()","rdoc::classmodule#parse()","rdoc::comment#parse()","rdoc::context::section#parse()","rdoc::markdown#parse()","rdoc::markdown::parse()","rdoc::markup::parse()","rdoc::markup::parser#parse()","rdoc::markup::parser::parse()","rdoc::options#parse()","rdoc::parser::ripperstatelex::parse()","rdoc::rd::parse()","rdoc::rd::blockparser#parse()","rdoc::rd::inlineparser#parse()","rdoc::text#parse()","rdoc::tomdoc::parse()","rdoc::parser::ruby#parse_alias()","rdoc::parser::ruby#parse_attr()","rdoc::parser::ruby#parse_attr_accessor()","rdoc::parser::ruby#parse_call_parameters()","rdoc::parser::ruby#parse_class()","rdoc::parser::ruby#parse_comment()","rdoc::parser::ruby#parse_comment_tomdoc()","rdoc::parser::ruby#parse_constant()","rdoc::parser::ruby#parse_constant_visibility()","rdoc::parser::changelog#parse_date()","rdoc::rdoc#parse_dot_doc_file()","rdoc::parser::changelog#parse_entries()","rdoc::parser::changelog::git#parse_entries()","rdoc::rdoc#parse_file()","rdoc::rdoc#parse_files()","rdoc::parser::parse_files_matching()","rdoc::parser::changelog::git#parse_info()","rdoc::parser::ruby#parse_meta_attr()","rdoc::parser::ruby#parse_meta_method()","rdoc::parser::ruby#parse_method()","rdoc::parser::ruby#parse_method_dummy()","rdoc::parser::ruby#parse_method_or_yield_parameters()","rdoc::parser::ruby#parse_method_parameters()","rdoc::parser::ruby#parse_method_params_and_body()","rdoc::parser::ruby#parse_module()","rdoc::ri::driver#parse_name()","rdoc::parser::ruby#parse_require()","rdoc::parser::ruby#parse_rescue()","rdoc::parser::ruby#parse_statements()","rdoc::parser::ruby#parse_symbol_arg()","rdoc::parser::ruby#parse_symbol_in_arg()","rdoc::parser::ruby#parse_top_level_statements()","rdoc::markup::formatter#parse_url()","rdoc::parser::ruby#parse_visibility()","rdoc::parser::ruby#parse_yield()","rdoc::markup::tohtml#parseable?()","rdoc::toplevel#parser=()","rdoc::classmodule#path()","rdoc::constant#path()","rdoc::methodattr#path()","rdoc::ri::paths::path()","rdoc::toplevel#path()","rdoc::parser::rubytools#peek_read()","rdoc::parser::rubytools#peek_tk()","rdoc::markup::parser#peek_token()","rdoc::markdown#peg_parse()","rdoc::stats#percent_doc()","rdoc::context::section#plain_html()","rdoc::tokenstream#pop_token()","rdoc::markup::parser::mystringscanner#pos()","rdoc::markup::preprocess::post_process()","rdoc::markup::preprocess::post_processors()","rdoc::alias#pretty_name()","rdoc::methodattr#pretty_name()","rdoc::alias#pretty_new_name()","rdoc::alias#pretty_old_name()","rdoc::rd::inlineparser#prev_words_on_error()","rdoc::stats::quiet#print_alias()","rdoc::stats::quiet#print_attribute()","rdoc::stats::quiet#print_class()","rdoc::stats::quiet#print_constant()","rdoc::stats::normal#print_file()","rdoc::stats::quiet#print_file()","rdoc::stats::quiet#print_method()","rdoc::stats::quiet#print_module()","rdoc::ri::driver::process_args()","rdoc::markup::document#push()","rdoc::markup::list#push()","rdoc::markup::listitem#push()","rdoc::markup::raw#push()","rdoc::options#quiet()","rdoc::options#quiet=()","rdoc::ri::paths::raw_path()","rdoc::parser::c#rb_scan_args()","rdoc::rubygemshook#rdoc_installed?()","rdoc::task#rdoc_task_description()","rdoc::parser::ruby#read_directive()","rdoc::parser::ruby#read_documentation_modifiers()","rdoc::encoding::read_file()","rdoc::codeobject#record_location()","rdoc::context#record_location()","rdoc::markdown#reference()","rdoc::markup::preprocess::register()","rdoc::markup::preprocess::registered()","rdoc::rubygemshook#remove()","rdoc::parser::simple#remove_coding_comment()","rdoc::context::section#remove_comment()","rdoc::parser::c#remove_commented_out_lines()","rdoc::context#remove_from_documentation?()","rdoc::encoding::remove_frozen_string_literal()","rdoc::context#remove_invisible()","rdoc::encoding::remove_magic_comment()","rdoc::parser::remove_modeline()","rdoc::store#remove_nodoc()","rdoc::classmodule#remove_nodoc_children()","rdoc::comment#remove_private()","rdoc::parser::simple#remove_private_comment()","rdoc::rdoc#remove_siginfo_handler()","rdoc::parser::rubytools#remove_token_listener()","rdoc::rdoc#remove_unparseable()","rdoc::generator::darkfish#render()","rdoc::generator::darkfish#render_template()","rdoc::stats#report()","rdoc::stats#report_attributes()","rdoc::stats#report_class_module()","rdoc::stats#report_constants()","rdoc::stats#report_methods()","rdoc::task#rerdoc_task_description()","rdoc::markup::preprocess::reset()","rdoc::parser::ripperstatelex::innerstatelex#reset()","rdoc::parser::rubytools#reset()","rdoc::crossreference#resolve()","rdoc::context#resolve_aliases()","rdoc::crossreference#resolve_method()","rdoc::parser::ruby#retrieve_comment_body()","rdoc::rubygemshook#ri_installed?()","rdoc::servlet#ri_paths()","rdoc::servlet#root()","rdoc::servlet#root_search()","rdoc::markup::verbatim#ruby?()","rdoc::ri::driver#run()","rdoc::ri::driver::run()","rdoc::options#sanitize_path()","rdoc::store#save()","rdoc::store#save_cache()","rdoc::store#save_class()","rdoc::store#save_method()","rdoc::store#save_page()","rdoc::markup::parser::mystringscanner#scan()","rdoc::parser::c#scan()","rdoc::parser::changelog#scan()","rdoc::parser::markdown#scan()","rdoc::parser::rd#scan()","rdoc::parser::ruby#scan()","rdoc::parser::simple#scan()","rdoc::classmodule#search_record()","rdoc::methodattr#search_record()","rdoc::toplevel#search_record()","rdoc::generator::jsonindex#search_string()","rdoc::codeobject#section()","rdoc::context#section_contents()","rdoc::context#sections()","rdoc::methodattr#see()","rdoc::markup::attrspan#set_attrs()","rdoc::context#set_constant_visibility_for()","rdoc::context#set_current_section()","rdoc::erbio#set_eoutvar()","rdoc::erbpartial#set_eoutvar()","rdoc::context#set_visibility_for()","rdoc::generator::darkfish#setup()","rdoc::rubygemshook#setup()","rdoc::options#setup_generator()","rdoc::rdoc#setup_output_dir()","rdoc::ri::driver#setup_pager()","rdoc::markup::parser#setup_scanner()","rdoc::servlet#show_documentation()","rdoc::tomdoc::signature()","rdoc::ri::paths::site_dir()","rdoc::markup::parser#skip()","rdoc::parser::ruby#skip_for_variable()","rdoc::parser::ruby#skip_method()","rdoc::parser::ruby#skip_optional_do_after_expression()","rdoc::parser::ruby#skip_parentheses()","rdoc::parser::rubytools#skip_tkspace()","rdoc::parser::ruby#skip_tkspace_comment()","rdoc::parser::rubytools#skip_tkspace_without_nl()","rdoc::text#snippet()","rdoc::context#sort_sections()","rdoc::store#source()","rdoc::markup::attributemanager#split_into_flow()","rdoc::markup::toansi#start_accepting()","rdoc::markup::tohtml#start_accepting()","rdoc::markup::tohtmlsnippet#start_accepting()","rdoc::markup::tordoc#start_accepting()","rdoc::markup::totableofcontents#start_accepting()","rdoc::markup::tottonly#start_accepting()","rdoc::tokenstream#start_collecting_tokens()","rdoc::codeobject#start_doc()","rdoc::ri::driver#start_server()","rdoc::codeobject#stop_doc()","rdoc::anymethod#store=()","rdoc::classmodule#store=()","rdoc::codeobject#store=()","rdoc::constant#store=()","rdoc::methodattr#store=()","rdoc::mixin#store=()","rdoc::rdoc#store=()","rdoc::servlet#store_for()","rdoc::markdown#strike()","rdoc::text#strip_hashes()","rdoc::text#strip_newlines()","rdoc::text#strip_stars()","rdoc::markdown#strong()","rdoc::stats#summary()","rdoc::classmodule#superclass()","rdoc::normalmodule#superclass()","rdoc::classmodule#superclass=()","rdoc::anymethod#superclass_method()","rdoc::codeobject#suppress()","rdoc::codeobject#suppressed?()","rdoc::markup::totableofcontents#suppressed?()","rdoc::ri::paths::system_dir()","rdoc::markup::document#table_of_contents()","rdoc::options#template_dir_for()","rdoc::generator::darkfish#template_for()","rdoc::generator::darkfish#template_result()","rdoc::markup::indentedparagraph#text()","rdoc::markup::paragraph#text()","rdoc::markup::raw#text()","rdoc::markup::verbatim#text()","rdoc::comment#text=()","rdoc::toplevel#text?()","rdoc::generator::darkfish#time_delta_string()","rdoc::store#title()","rdoc::store#title=()","rdoc::parser::ruby#tk_nl?()","rdoc::markup::tohtml#to_html()","rdoc::text#to_html()","rdoc::tokenstream::to_html()","rdoc::generator::pot::po#to_s()","rdoc::generator::pot::poentry#to_s()","rdoc::markup::totableofcontents::to_toc()","rdoc::parser::rubytools#token_listener()","rdoc::tokenstream#token_stream()","rdoc::markup::parser#tokenize()","rdoc::markup::parser::tokenize()","rdoc::tomdoc#tokenize()","rdoc::tokenstream#tokens_to_s()","rdoc::comment#tomdoc?()","rdoc::context#top_level()","rdoc::require#top_level()","rdoc::i18n::locale#translate()","rdoc::i18n::text#translate()","rdoc::markup::tohtmlsnippet#truncate()","rdoc::markup::formatter#tt?()","rdoc::markup::tottonly#tt_sections()","rdoc::classmodule#type()","rdoc::methodattr#type()","rdoc::stats#undoc_params()","rdoc::markup::parser#unget()","rdoc::parser::rubytools#unget_tk()","rdoc::store#unique_classes()","rdoc::store#unique_classes_and_modules()","rdoc::store#unique_modules()","rdoc::markup::attributemanager#unmask_protected_sequences()","rdoc::markup::parser::mystringscanner#unscan()","rdoc::classmodule#update_aliases()","rdoc::classmodule#update_extends()","rdoc::classmodule#update_includes()","rdoc::rdoc#update_output_dir()","rdoc::store#update_parser_of_file()","rdoc::context#upgrade_to_class()","rdoc::parser::use_markup()","rdoc::markup::tordoc#use_prefix()","rdoc::options#visibility=()","rdoc::options#warn()","rdoc::parser::ruby#warn()","rdoc::markup::tordoc#wrap()","rdoc::text#wrap()","rdoc::options#write_options()","rdoc::generator::darkfish#write_style_sheet()","rdoc::markupreference#yields_directive()","rdoc::parser::zip?()","","","","","","","","",""],"info":[["Object","","Object.html","",""],["RDoc","","RDoc.html","","<p>RDoc produces documentation for Ruby source files by parsing the source and extracting the definition …\n"],["RDoc::Alias","","RDoc/Alias.html","","<p>Represent an alias, which is an old_name/new_name pair associated with a particular context\n"],["RDoc::AnonClass","","RDoc/AnonClass.html","","<p>An anonymous class like:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">c</span> = <span class=\"ruby-constant\">Class</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-keyword\">end</span>\n</pre>\n<p>AnonClass is currently not used.\n"],["RDoc::AnyMethod","","RDoc/AnyMethod.html","","<p>AnyMethod is the base class for objects representing methods\n"],["RDoc::Attr","","RDoc/Attr.html","","<p>An attribute created by #attr, #attr_reader, #attr_writer or #attr_accessor\n"],["RDoc::ClassModule","","RDoc/ClassModule.html","","<p>ClassModule is the base class for objects representing either a class or a module.\n"],["RDoc::CodeObject","","RDoc/CodeObject.html","","<p>Base class for the RDoc code tree.\n<p>We contain the common stuff for contexts (which are containers) and …\n"],["RDoc::Comment","","RDoc/Comment.html","","<p>A comment holds the text comment for a RDoc::CodeObject and provides a unified way of cleaning it up …\n"],["RDoc::Constant","","RDoc/Constant.html","","<p>A constant\n"],["RDoc::Context","","RDoc/Context.html","","<p>A Context is something that can hold modules, classes, methods, attributes, aliases, requires, and includes. …\n"],["RDoc::Context::Section","","RDoc/Context/Section.html","","<p>A section of documentation like:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># :section: The title</span>\n<span class=\"ruby-comment\"># The body</span>\n</pre>\n<p>Sections can be referenced multiple times …\n"],["RDoc::CrossReference","","RDoc/CrossReference.html","","<p>RDoc::CrossReference is a reusable way to create cross references for names.\n"],["RDoc::ERBIO","","RDoc/ERBIO.html","","<p>A subclass of ERB that writes directly to an IO.  Credit to Aaron Patterson and Masatoshi SEKI.\n<p>To use: …\n"],["RDoc::ERBPartial","","RDoc/ERBPartial.html","","<p>Allows an ERB template to be rendered in the context (binding) of an existing ERB template evaluation. …\n"],["RDoc::Encoding","","RDoc/Encoding.html","","<p>This class is a wrapper around File IO and Encoding that helps RDoc load files and convert them to the …\n"],["RDoc::Error","","RDoc/Error.html","","<p>Exception thrown by any rdoc error.\n"],["RDoc::Extend","","RDoc/Extend.html","","<p>A Module extension to a class with #extend\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">RDoc</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Extend</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-string\">&#39;Enumerable&#39;</span>, <span class=\"ruby-string\">&#39;comment ...&#39;</span>\n</pre>\n"],["RDoc::Generator","","RDoc/Generator.html","","<p>RDoc uses generators to turn parsed source code in the form of an RDoc::CodeObject tree into some form …\n"],["RDoc::Generator::Darkfish","","RDoc/Generator/Darkfish.html","","<p>Darkfish RDoc HTML Generator\n<p>$Id: darkfish.rb 52 2009-01-07 02:08:11Z deveiant $\n<p>Author/s\n"],["RDoc::Generator::JsonIndex","","RDoc/Generator/JsonIndex.html","","<p>The JsonIndex generator is designed to complement an HTML generator and produces a JSON search index. …\n"],["RDoc::Generator::Markup","","RDoc/Generator/Markup.html","","<p>Handle common RDoc::Markup tasks for various CodeObjects\n<p>This module is loaded by generators.  It allows …\n"],["RDoc::Generator::POT","","RDoc/Generator/POT.html","","<p>Generates a POT file.\n<p>Here is a translator work flow with the generator.\n<p>Create .pot\n"],["RDoc::Generator::POT::MessageExtractor","","RDoc/Generator/POT/MessageExtractor.html","","<p>Extracts message from RDoc::Store\n"],["RDoc::Generator::POT::PO","","RDoc/Generator/POT/PO.html","","<p>Generates a PO format text\n"],["RDoc::Generator::POT::POEntry","","RDoc/Generator/POT/POEntry.html","","<p>A PO entry in PO\n"],["RDoc::Generator::RI","","RDoc/Generator/RI.html","","<p>Generates ri data files\n"],["RDoc::GhostMethod","","RDoc/GhostMethod.html","","<p>GhostMethod represents a method referenced only by a comment\n"],["RDoc::I18n","","RDoc/I18n.html","","<p>This module provides i18n related features.\n"],["RDoc::I18n::Locale","","RDoc/I18n/Locale.html","","<p>A message container for a locale.\n<p>This object provides the following two features:\n\n<pre>* Loads translated messages ...</pre>\n"],["RDoc::I18n::Text","","RDoc/I18n/Text.html","","<p>An i18n supported text.\n<p>This object provides the following two features:\n\n<pre>* Extracts translation messages ...</pre>\n"],["RDoc::Include","","RDoc/Include.html","","<p>A Module included in a class with #include\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">RDoc</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Include</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-string\">&#39;Enumerable&#39;</span>, <span class=\"ruby-string\">&#39;comment ...&#39;</span>\n</pre>\n"],["RDoc::Markdown","","RDoc/Markdown.html","","<p>RDoc::Markdown as described by the markdown syntax.\n<p>To choose Markdown as your only default format see …\n"],["RDoc::Markdown::Literals","","RDoc/Markdown/Literals.html","",""],["RDoc::Markdown::Literals::MemoEntry","","RDoc/Markdown/Literals/MemoEntry.html","",""],["RDoc::Markdown::Literals::ParseError","","RDoc/Markdown/Literals/ParseError.html","",""],["RDoc::Markdown::Literals::RuleInfo","","RDoc/Markdown/Literals/RuleInfo.html","",""],["RDoc::Markdown::MemoEntry","","RDoc/Markdown/MemoEntry.html","",""],["RDoc::Markdown::ParseError","","RDoc/Markdown/ParseError.html","",""],["RDoc::Markdown::RuleInfo","","RDoc/Markdown/RuleInfo.html","",""],["RDoc::Markup","","RDoc/Markup.html","","<p>RDoc::Markup parses plain text documents and attempts to decompose them into their constituent parts. …\n"],["RDoc::Markup::AttrChanger","","RDoc/Markup/AttrChanger.html","","<p>An AttrChanger records a change in attributes. It contains a bitmap of the attributes to turn on, and …\n"],["RDoc::Markup::AttrSpan","","RDoc/Markup/AttrSpan.html","","<p>An array of attributes which parallels the characters in a string.\n"],["RDoc::Markup::AttributeManager","","RDoc/Markup/AttributeManager.html","",""],["RDoc::Markup::Attributes","","RDoc/Markup/Attributes.html","","<p>We manage a set of attributes.  Each attribute has a symbol name and a bit value.\n"],["RDoc::Markup::BlankLine","","RDoc/Markup/BlankLine.html","","<p>An empty line.  This class is a singleton.\n"],["RDoc::Markup::BlockQuote","","RDoc/Markup/BlockQuote.html","","<p>A quoted section which contains markup items.\n"],["RDoc::Markup::Document","","RDoc/Markup/Document.html","","<p>A Document containing lists, headings, paragraphs, etc.\n"],["RDoc::Markup::Formatter","","RDoc/Markup/Formatter.html","","<p>Base class for RDoc markup formatters\n<p>Formatters are a visitor that converts an RDoc::Markup tree (from …\n"],["RDoc::Markup::HardBreak","","RDoc/Markup/HardBreak.html","","<p>A hard-break in the middle of a paragraph.\n"],["RDoc::Markup::Include","","RDoc/Markup/Include.html","","<p>A file included at generation time.  Objects of this class are created by RDoc::RD for an extension-less …\n"],["RDoc::Markup::IndentedParagraph","","RDoc/Markup/IndentedParagraph.html","","<p>An Indented Paragraph of text\n"],["RDoc::Markup::List","","RDoc/Markup/List.html","","<p>A List is a homogeneous set of ListItems.\n<p>The supported list types include:\n<p>:BULLET &mdash; An unordered list\n"],["RDoc::Markup::ListItem","","RDoc/Markup/ListItem.html","","<p>An item within a List that contains paragraphs, headings, etc.\n<p>For BULLET, NUMBER, LALPHA and UALPHA lists, …\n"],["RDoc::Markup::Paragraph","","RDoc/Markup/Paragraph.html","","<p>A Paragraph of text\n"],["RDoc::Markup::Parser","","RDoc/Markup/Parser.html","","<p>A recursive-descent parser for RDoc markup.\n<p>The parser tokenizes an input string then parses the tokens …\n"],["RDoc::Markup::Parser::Error","","RDoc/Markup/Parser/Error.html","","<p>Parser error subclass\n"],["RDoc::Markup::Parser::MyStringScanner","","RDoc/Markup/Parser/MyStringScanner.html","","<p>A simple wrapper of StringScanner that is aware of the current column and lineno\n"],["RDoc::Markup::Parser::ParseError","","RDoc/Markup/Parser/ParseError.html","","<p>Raised when the parser is unable to handle the given markup\n"],["RDoc::Markup::PreProcess","","RDoc/Markup/PreProcess.html","","<p>Handle common directives that can occur in a block of text:\n\n<pre>:include: filename</pre>\n<p>Directives can be escaped …\n"],["RDoc::Markup::Raw","","RDoc/Markup/Raw.html","","<p>A section of text that is added to the output document as-is\n"],["RDoc::Markup::RegexpHandling","","RDoc/Markup/RegexpHandling.html","","<p>Hold details of a regexp handling sequence\n"],["RDoc::Markup::Rule","","RDoc/Markup/Rule.html","","<p>A horizontal rule with a weight\n"],["RDoc::Markup::Table","","RDoc/Markup/Table.html","","<p>A section of table\n"],["RDoc::Markup::ToAnsi","","RDoc/Markup/ToAnsi.html","","<p>Outputs RDoc markup with vibrant ANSI color!\n"],["RDoc::Markup::ToBs","","RDoc/Markup/ToBs.html","","<p>Outputs RDoc markup with hot backspace action!  You will probably need a pager to use this output format. …\n"],["RDoc::Markup::ToHtml","","RDoc/Markup/ToHtml.html","","<p>Outputs RDoc markup as HTML.\n"],["RDoc::Markup::ToHtmlCrossref","","RDoc/Markup/ToHtmlCrossref.html","","<p>Subclass of the RDoc::Markup::ToHtml class that supports looking up method names, classes, etc to create …\n"],["RDoc::Markup::ToHtmlSnippet","","RDoc/Markup/ToHtmlSnippet.html","","<p>Outputs RDoc markup as paragraphs with inline markup only.\n"],["RDoc::Markup::ToJoinedParagraph","","RDoc/Markup/ToJoinedParagraph.html","","<p>Joins the parts of an RDoc::Markup::Paragraph into a single String.\n<p>This allows for easier maintenance …\n"],["RDoc::Markup::ToLabel","","RDoc/Markup/ToLabel.html","","<p>Creates HTML-safe labels suitable for use in id attributes.  Tidylinks are converted to their link part …\n"],["RDoc::Markup::ToMarkdown","","RDoc/Markup/ToMarkdown.html","","<p>Outputs parsed markup as Markdown\n"],["RDoc::Markup::ToRdoc","","RDoc/Markup/ToRdoc.html","","<p>Outputs RDoc markup as RDoc markup! (mostly)\n"],["RDoc::Markup::ToTableOfContents","","RDoc/Markup/ToTableOfContents.html","","<p>Extracts just the RDoc::Markup::Heading elements from a RDoc::Markup::Document to help build a table …\n"],["RDoc::Markup::ToTest","","RDoc/Markup/ToTest.html","","<p>This Markup outputter is used for testing purposes.\n"],["RDoc::Markup::ToTtOnly","","RDoc/Markup/ToTtOnly.html","","<p>Extracts sections of text enclosed in plus, tt or code.  Used to discover undocumented parameters.\n"],["RDoc::Markup::Verbatim","","RDoc/Markup/Verbatim.html","","<p>A section of verbatim text\n"],["RDoc::MarkupReference","","RDoc/MarkupReference.html","","<p>Class RDoc::MarkupReference exists only to provide a suitable home for a reference document for RDoc …\n"],["RDoc::MarkupReference::DummyClass","","RDoc/MarkupReference/DummyClass.html","",""],["RDoc::MarkupReference::DummyModule","","RDoc/MarkupReference/DummyModule.html","",""],["RDoc::MetaMethod","","RDoc/MetaMethod.html","","<p>MetaMethod represents a meta-programmed method\n"],["RDoc::MethodAttr","","RDoc/MethodAttr.html","","<p>Abstract class representing either a method or an attribute.\n"],["RDoc::Mixin","","RDoc/Mixin.html","","<p>A Mixin adds features from a module into another context.  RDoc::Include and RDoc::Extend are both mixins. …\n"],["RDoc::NormalClass","","RDoc/NormalClass.html","","<p>A normal class, neither singleton nor anonymous\n"],["RDoc::NormalModule","","RDoc/NormalModule.html","","<p>A normal module, like NormalClass\n"],["RDoc::Options","","RDoc/Options.html","","<p>RDoc::Options handles the parsing and storage of options\n<p>Saved Options\n<p>You can save some options like the …\n"],["RDoc::Parser","","RDoc/Parser.html","","<p>A parser is simple a class that subclasses RDoc::Parser and implements #scan to fill in an RDoc::TopLevel …\n"],["RDoc::Parser::C","","RDoc/Parser/C.html","","<p>RDoc::Parser::C attempts to parse C extension files.  It looks for the standard patterns that you find …\n"],["RDoc::Parser::ChangeLog","","RDoc/Parser/ChangeLog.html","","<p>A ChangeLog file parser.\n<p>This parser converts a ChangeLog into an RDoc::Markup::Document.  When viewed …\n"],["RDoc::Parser::ChangeLog::Git","","RDoc/Parser/ChangeLog/Git.html","",""],["RDoc::Parser::Markdown","","RDoc/Parser/Markdown.html","","<p>Parse a Markdown format file.  The parsed RDoc::Markup::Document is attached as a file comment.\n"],["RDoc::Parser::RD","","RDoc/Parser/RD.html","","<p>Parse a RD format file.  The parsed RDoc::Markup::Document is attached as a file comment.\n"],["RDoc::Parser::RipperStateLex","","RDoc/Parser/RipperStateLex.html","",""],["RDoc::Parser::RipperStateLex::InnerStateLex","","RDoc/Parser/RipperStateLex/InnerStateLex.html","",""],["RDoc::Parser::Ruby","","RDoc/Parser/Ruby.html","",""],["RDoc::Parser::RubyTools","","RDoc/Parser/RubyTools.html","","<p>Collection of methods for writing parsers\n"],["RDoc::Parser::Simple","","RDoc/Parser/Simple.html","","<p>Parse a non-source file. We basically take the whole thing as one big comment.\n"],["RDoc::Parser::Text","","RDoc/Parser/Text.html","","<p>Indicates this parser is text and doesn’t contain code constructs.\n<p>Include this module in a RDoc::Parser …\n"],["RDoc::RD","","RDoc/RD.html","","<p>RDoc::RD implements the RD format from the rdtool gem.\n<p>To choose RD as your only default format see RDoc::Options@Saved+Options …\n"],["RDoc::RD::BlockParser","","RDoc/RD/BlockParser.html","","<p>RD format parser for headings, paragraphs, lists, verbatim sections that exist as blocks.\n"],["RDoc::RD::Inline","","RDoc/RD/Inline.html","","<p>Inline keeps track of markup and labels to create proper links.\n"],["RDoc::RD::InlineParser","","RDoc/RD/InlineParser.html","","<p>RD format parser for inline markup such as emphasis, links, footnotes, etc.\n"],["RDoc::RDoc","","RDoc/RDoc.html","","<p>This is the driver for generating RDoc output.  It handles file parsing and generation of output.\n<p>To use …\n"],["RDoc::RI","","RDoc/RI.html","","<p>Namespace for the ri command line tool’s implementation.\n<p>See <code>ri --help</code> for details.\n"],["RDoc::RI::Driver","","RDoc/RI/Driver.html","","<p>The RI driver implements the command-line ri tool.\n<p>The driver supports:\n<p>loading RI data from:\n"],["RDoc::RI::Driver::Error","","RDoc/RI/Driver/Error.html","","<p>Base Driver error class\n"],["RDoc::RI::Driver::NotFoundError","","RDoc/RI/Driver/NotFoundError.html","","<p>Raised when a name isn’t found in the ri data stores\n"],["RDoc::RI::Error","","RDoc/RI/Error.html","","<p>Base RI error class\n"],["RDoc::RI::Paths","","RDoc/RI/Paths.html","","<p>The directories where ri data lives.  Paths can be enumerated via ::each, or queried individually via …\n"],["RDoc::RI::Task","","RDoc/RI/Task.html","","<p>RDoc::RI::Task creates ri data in <code>./.rdoc</code> for your project.\n<p>It contains the following tasks:\n<p>ri &mdash; Build ri …\n"],["RDoc::Require","","RDoc/Require.html","","<p>A file loaded by #require\n"],["RDoc::RubygemsHook","","RDoc/RubygemsHook.html","","<p>Gem::RDoc provides methods to generate RDoc and ri data for installed gems upon gem installation.\n<p>This …\n"],["RDoc::Servlet","","RDoc/Servlet.html","","<p>This is a WEBrick servlet that allows you to browse ri documentation.\n<p>You can show documentation through …\n"],["RDoc::SingleClass","","RDoc/SingleClass.html","","<p>A singleton class\n"],["RDoc::Stats","","RDoc/Stats.html","","<p>RDoc statistics collector which prints a summary and report of a project’s documentation totals. …\n"],["RDoc::Stats::Normal","","RDoc/Stats/Normal.html","","<p>Stats printer that prints just the files being documented with a progress bar\n"],["RDoc::Stats::Quiet","","RDoc/Stats/Quiet.html","","<p>Stats printer that prints nothing\n"],["RDoc::Stats::Verbose","","RDoc/Stats/Verbose.html","","<p>Stats printer that prints everything documented, including the documented status\n"],["RDoc::Store","","RDoc/Store.html","","<p>A set of rdoc data for a single project (gem, path, etc.).\n<p>The store manages reading and writing ri data …\n"],["RDoc::Store::Error","","RDoc/Store/Error.html","","<p>Errors raised from loading or saving the store\n"],["RDoc::Store::MissingFileError","","RDoc/Store/MissingFileError.html","","<p>Raised when a stored file for a class, module, page or method is missing.\n"],["RDoc::Task","","RDoc/Task.html","","<p>RDoc::Task creates the following rake tasks to generate and clean up RDoc output:\n<p>rdoc &mdash; Main task for this …\n"],["RDoc::Text","","RDoc/Text.html","","<p>Methods for manipulating comment text\n"],["RDoc::TokenStream","","RDoc/TokenStream.html","","<p>A TokenStream is a list of tokens, gathered during the parse of some entity (say a method). Entities …\n"],["RDoc::TomDoc","","RDoc/TomDoc.html","","<p>A parser for TomDoc based on TomDoc 1.0.0-rc1 (02adef9b5a)\n<p>The TomDoc specification can be found at:\n<p>tomdoc.org …\n"],["RDoc::TopLevel","","RDoc/TopLevel.html","","<p>A TopLevel context is a representation of the contents of a single file\n"],["Rake","","Rake.html","",""],["<<","RDoc::Markup::Document","RDoc/Markup/Document.html#method-i-3C-3C","(part)","<p>Appends <code>part</code> to the document\n"],["<<","RDoc::Markup::List","RDoc/Markup/List.html#method-i-3C-3C","(item)","<p>Appends <code>item</code> to the list\n"],["<<","RDoc::Markup::ListItem","RDoc/Markup/ListItem.html#method-i-3C-3C","(part)","<p>Appends <code>part</code> to the ListItem\n"],["<<","RDoc::Markup::Raw","RDoc/Markup/Raw.html#method-i-3C-3C","(text)","<p>Appends <code>text</code>\n"],["<=>","RDoc::Alias","RDoc/Alias.html#method-i-3C-3D-3E","(other)","<p>Order by #singleton then #new_name\n"],["<=>","RDoc::Constant","RDoc/Constant.html#method-i-3C-3D-3E","(other)","<p>Constants are ordered by name\n"],["<=>","RDoc::Context","RDoc/Context.html#method-i-3C-3D-3E","(other)","<p>Contexts are sorted by full_name\n"],["<=>","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-3C-3D-3E","(other)","<p>Order by #singleton then #name\n"],["<=>","RDoc::Mixin","RDoc/Mixin.html#method-i-3C-3D-3E","(other)","<p>Mixins are sorted by name\n"],["==","RDoc::Attr","RDoc/Attr.html#method-i-3D-3D","(other)","<p>Attributes are equal when their names, singleton and rw are identical\n"],["==","RDoc::Constant","RDoc/Constant.html#method-i-3D-3D","(other)","<p>Constants are equal when their #parent and #name is the same\n"],["==","RDoc::Context::Section","RDoc/Context/Section.html#method-i-3D-3D","(other)","<p>Sections are equal when they have the same #title\n"],["==","RDoc::Markup::RegexpHandling","RDoc/Markup/RegexpHandling.html#method-i-3D-3D","(o)","<p>Regexp handlings are equal when the have the same text and type\n"],["==","RDoc::Markup::Table","RDoc/Markup/Table.html#method-i-3D-3D","(other)",""],["==","RDoc::TopLevel","RDoc/TopLevel.html#method-i-3D-3D","(other)","<p>An RDoc::TopLevel is equal to another with the same relative_name\n"],["[]","RDoc::I18n::Locale","RDoc/I18n/Locale.html#method-c-5B-5D","(locale_name)","<p>Returns the locale object for <code>locale_name</code>.\n"],["[]","RDoc::Markup::AttrSpan","RDoc/Markup/AttrSpan.html#method-i-5B-5D","(n)","<p>Accesses flags for character <code>n</code>\n"],["[]","RDoc::Markup::Parser::MyStringScanner","RDoc/Markup/Parser/MyStringScanner.html#method-i-5B-5D","(i)",""],["[]=","RDoc::I18n::Locale","RDoc/I18n/Locale.html#method-c-5B-5D-3D","(locale_name, locale)","<p>Sets the locale object for <code>locale_name</code>.\n<p>Normally, this method is not used. This method is useful for testing. …\n"],["_call_seq","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-_call_seq","()","<p>call_seq without deduplication and alias lookup.\n"],["accept","RDoc::Markup::BlankLine","RDoc/Markup/BlankLine.html#method-i-accept","(visitor)","<p>Calls #accept_blank_line on <code>visitor</code>\n"],["accept","RDoc::Markup::BlockQuote","RDoc/Markup/BlockQuote.html#method-i-accept","(visitor)","<p>Calls #accept_block_quote on <code>visitor</code>\n"],["accept","RDoc::Markup::Document","RDoc/Markup/Document.html#method-i-accept","(visitor)","<p>Runs this document and all its #items through <code>visitor</code>\n"],["accept","RDoc::Markup::HardBreak","RDoc/Markup/HardBreak.html#method-i-accept","(visitor)","<p>Calls #accept_hard_break on <code>visitor</code>\n"],["accept","RDoc::Markup::IndentedParagraph","RDoc/Markup/IndentedParagraph.html#method-i-accept","(visitor)","<p>Calls #accept_indented_paragraph on <code>visitor</code>\n"],["accept","RDoc::Markup::List","RDoc/Markup/List.html#method-i-accept","(visitor)","<p>Runs this list and all its #items through <code>visitor</code>\n"],["accept","RDoc::Markup::ListItem","RDoc/Markup/ListItem.html#method-i-accept","(visitor)","<p>Runs this list item and all its #parts through <code>visitor</code>\n"],["accept","RDoc::Markup::Paragraph","RDoc/Markup/Paragraph.html#method-i-accept","(visitor)","<p>Calls #accept_paragraph on <code>visitor</code>\n"],["accept","RDoc::Markup::Raw","RDoc/Markup/Raw.html#method-i-accept","(visitor)","<p>Calls #accept_raw+ on <code>visitor</code>\n"],["accept","RDoc::Markup::Rule","RDoc/Markup/Rule.html#method-i-accept","(visitor)","<p>Calls #accept_rule on <code>visitor</code>\n"],["accept","RDoc::Markup::Table","RDoc/Markup/Table.html#method-i-accept","(visitor)",""],["accept","RDoc::Markup::Verbatim","RDoc/Markup/Verbatim.html#method-i-accept","(visitor)","<p>Calls #accept_verbatim on <code>visitor</code>\n"],["accept_blank_line","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-accept_blank_line","(blank_line)","<p>Adds <code>blank_line</code> to the output\n"],["accept_blank_line","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_blank_line","(blank_line)","<p>Adds <code>blank_line</code> to the output\n"],["accept_blank_line","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-accept_blank_line","(markup_item)",""],["accept_block_quote","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-accept_block_quote","(block_quote)","<p>Adds <code>block_quote</code> to the output\n"],["accept_block_quote","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_block_quote","(block_quote)","<p>Adds <code>paragraph</code> to the output\n"],["accept_block_quote","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-accept_block_quote","(block_quote)","<p>Adds tts from <code>block_quote</code> to the output\n"],["accept_document","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-accept_document","(document)","<p>Adds <code>document</code> to the output\n"],["accept_document","RDoc::Markup::ToTableOfContents","RDoc/Markup/ToTableOfContents.html#method-i-accept_document","(document)","<p>Adds <code>document</code> to the output, using its heading cutoff if present\n"],["accept_heading","RDoc::Markup::ToBs","RDoc/Markup/ToBs.html#method-i-accept_heading","(heading)","<p>Makes heading text bold.\n"],["accept_heading","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-accept_heading","(heading)","<p>Adds <code>heading</code> to the output.  The headings greater than 6 are trimmed to level 6.\n"],["accept_heading","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-accept_heading","(heading)","<p>Adds <code>heading</code> to the output as a paragraph\n"],["accept_heading","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_heading","(heading)","<p>Adds <code>heading</code> to the output\n"],["accept_heading","RDoc::Markup::ToTableOfContents","RDoc/Markup/ToTableOfContents.html#method-i-accept_heading","(heading)","<p>Adds <code>heading</code> to the table of contents\n"],["accept_heading","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-accept_heading","(markup_item)",""],["accept_indented_paragraph","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_indented_paragraph","(paragraph)","<p>Adds <code>paragraph</code> to the output\n"],["accept_list_end","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-accept_list_end","(list)","<p>Finishes consumption of <code>list</code>\n"],["accept_list_end","RDoc::Markup::ToMarkdown","RDoc/Markup/ToMarkdown.html#method-i-accept_list_end","(list)","<p>Finishes consumption of <code>list</code>\n"],["accept_list_end","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_list_end","(list)","<p>Finishes consumption of <code>list</code>\n"],["accept_list_end","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-accept_list_end","(list)","<p>Pops the list type for <code>list</code> from #list_type\n"],["accept_list_item_end","RDoc::Markup::ToAnsi","RDoc/Markup/ToAnsi.html#method-i-accept_list_item_end","(list_item)","<p>Overrides indent width to ensure output lines up correctly.\n"],["accept_list_item_end","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-accept_list_item_end","(list_item)","<p>Finishes consumption of <code>list_item</code>\n"],["accept_list_item_end","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-accept_list_item_end","(list_item)","<p>Finishes consumption of <code>list_item</code>\n"],["accept_list_item_end","RDoc::Markup::ToMarkdown","RDoc/Markup/ToMarkdown.html#method-i-accept_list_item_end","(list_item)","<p>Finishes consumption of <code>list_item</code>\n"],["accept_list_item_end","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_list_item_end","(list_item)","<p>Finishes consumption of <code>list_item</code>\n"],["accept_list_item_end","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-accept_list_item_end","(markup_item)",""],["accept_list_item_start","RDoc::Markup::ToAnsi","RDoc/Markup/ToAnsi.html#method-i-accept_list_item_start","(list_item)","<p>Adds coloring to note and label list items\n"],["accept_list_item_start","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-accept_list_item_start","(list_item)","<p>Prepares the visitor for consuming <code>list_item</code>\n"],["accept_list_item_start","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-accept_list_item_start","(list_item)","<p>Prepares the visitor for consuming <code>list_item</code>\n"],["accept_list_item_start","RDoc::Markup::ToMarkdown","RDoc/Markup/ToMarkdown.html#method-i-accept_list_item_start","(list_item)","<p>Prepares the visitor for consuming <code>list_item</code>\n"],["accept_list_item_start","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_list_item_start","(list_item)","<p>Prepares the visitor for consuming <code>list_item</code>\n"],["accept_list_item_start","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-accept_list_item_start","(list_item)","<p>Prepares the visitor for consuming <code>list_item</code>\n"],["accept_list_start","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-accept_list_start","(list)","<p>Prepares the visitor for consuming <code>list</code>\n"],["accept_list_start","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-accept_list_start","(list)","<p>Prepares the visitor for consuming <code>list</code>\n"],["accept_list_start","RDoc::Markup::ToMarkdown","RDoc/Markup/ToMarkdown.html#method-i-accept_list_start","(list)","<p>Prepares the visitor for consuming <code>list</code>\n"],["accept_list_start","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_list_start","(list)","<p>Prepares the visitor for consuming <code>list</code>\n"],["accept_list_start","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-accept_list_start","(list)","<p>Pushes the list type for <code>list</code> onto #list_type\n"],["accept_paragraph","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-accept_paragraph","(paragraph)","<p>Adds <code>paragraph</code> to the output\n"],["accept_paragraph","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-accept_paragraph","(paragraph)",""],["accept_paragraph","RDoc::Markup::ToJoinedParagraph","RDoc/Markup/ToJoinedParagraph.html#method-i-accept_paragraph","(paragraph)","<p>Converts the parts of <code>paragraph</code> to a single entry.\n"],["accept_paragraph","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_paragraph","(paragraph)","<p>Adds <code>paragraph</code> to the output\n"],["accept_paragraph","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-accept_paragraph","(paragraph)","<p>Adds <code>paragraph</code> to the output\n"],["accept_raw","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-accept_raw","(raw)","<p>Adds <code>raw</code> to the output\n"],["accept_raw","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_raw","(raw)","<p>Adds <code>raw</code> to the output\n"],["accept_raw","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-accept_raw","(markup_item)",""],["accept_rule","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-accept_rule","(rule)","<p>Adds <code>rule</code> to the output\n"],["accept_rule","RDoc::Markup::ToMarkdown","RDoc/Markup/ToMarkdown.html#method-i-accept_rule","(rule)","<p>Adds <code>rule</code> to the output\n"],["accept_rule","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_rule","(rule)","<p>Adds <code>rule</code> to the output\n"],["accept_rule","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-accept_rule","(markup_item)",""],["accept_table","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-accept_table","(header, body, aligns)","<p>Adds <code>table</code> to the output\n"],["accept_table","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_table","(header, body, aligns)","<p>Adds <code>table</code> to the output\n"],["accept_verbatim","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-accept_verbatim","(verbatim)","<p>Adds <code>verbatim</code> to the output\n"],["accept_verbatim","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-accept_verbatim","(verbatim)","<p>Adds <code>verbatim</code> to the output\n"],["accept_verbatim","RDoc::Markup::ToMarkdown","RDoc/Markup/ToMarkdown.html#method-i-accept_verbatim","(verbatim)","<p>Outputs <code>verbatim</code> indented 4 columns\n"],["accept_verbatim","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-accept_verbatim","(verbatim)","<p>Outputs <code>verbatim</code> indented 2 columns\n"],["accept_verbatim","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-accept_verbatim","(markup_item)",""],["add","RDoc::Context","RDoc/Context.html#method-i-add","(klass, name, comment)","<p>Adds an item of type <code>klass</code> with the given <code>name</code> and <code>comment</code> to the context.\n<p>Currently only RDoc::Extend …\n"],["add","RDoc::Generator::POT::PO","RDoc/Generator/POT/PO.html#method-i-add","(entry)","<p>Adds a PO entry to the PO.\n"],["add_alias","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-add_alias","(an_alias, context = nil)","<p>Adds <code>an_alias</code> as an alias for this method in <code>context</code>.\n"],["add_alias","RDoc::Attr","RDoc/Attr.html#method-i-add_alias","(an_alias, context)","<p>Add <code>an_alias</code> as an attribute in <code>context</code>.\n"],["add_alias","RDoc::Context","RDoc/Context.html#method-i-add_alias","(an_alias)","<p>Adds <code>an_alias</code> that is automatically resolved\n"],["add_alias","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-add_alias","(an_alias, context)","<p>Abstract method. Contexts in their building phase call this to register a new alias for this known method/attribute. …\n"],["add_alias","RDoc::Parser::C","RDoc/Parser/C.html#method-i-add_alias","(var_name, class_obj, old_name, new_name, comment)","<p>Add alias, either from a direct alias definition, or from two method that reference the same function. …\n"],["add_alias","RDoc::Stats","RDoc/Stats.html#method-i-add_alias","(as)","<p>Records the parsing of an alias <code>as</code>.\n"],["add_alias","RDoc::TopLevel","RDoc/TopLevel.html#method-i-add_alias","(an_alias)","<p>Adds <code>an_alias</code> to <code>Object</code> instead of <code>self</code>.\n"],["add_also_in","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-add_also_in","(out, also_in)","<p>Adds paths for undocumented classes <code>also_in</code> to <code>out</code>\n"],["add_attribute","RDoc::Context","RDoc/Context.html#method-i-add_attribute","(attribute)","<p>Adds <code>attribute</code> if not already there. If it is (as method(s) or attribute), updates the comment if it …\n"],["add_attribute","RDoc::Stats","RDoc/Stats.html#method-i-add_attribute","(attribute)","<p>Records the parsing of an attribute <code>attribute</code>\n"],["add_c_enclosure","RDoc::Store","RDoc/Store.html#method-i-add_c_enclosure","(variable, namespace)","<p>Adds <code>module</code> as an enclosure (namespace) for the given <code>variable</code> for C files.\n"],["add_c_variables","RDoc::Store","RDoc/Store.html#method-i-add_c_variables","(c_parser)","<p>Adds C variables from an RDoc::Parser::C\n"],["add_class","RDoc::Context","RDoc/Context.html#method-i-add_class","(class_type, given_name, superclass = '::Object')","<p>Adds a class named <code>given_name</code> with <code>superclass</code>.\n<p>Both <code>given_name</code> and <code>superclass</code> may contain ‘::’, …\n"],["add_class","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-add_class","(out, name, classes)","<p>Adds a class header to <code>out</code> for class <code>name</code> which is described in <code>classes</code>.\n"],["add_class","RDoc::Stats","RDoc/Stats.html#method-i-add_class","(klass)","<p>Records the parsing of a class <code>klass</code>\n"],["add_class_or_module","RDoc::Context","RDoc/Context.html#method-i-add_class_or_module","(mod, self_hash, all_hash)","<p>Adds the class or module <code>mod</code> to the modules or classes Hash <code>self_hash</code>, and to <code>all_hash</code> (either <code>TopLevel::modules_hash</code> …\n"],["add_comment","RDoc::ClassModule","RDoc/ClassModule.html#method-i-add_comment","(comment, location)","<p>Adds <code>comment</code> to this ClassModule’s list of comments at <code>location</code>.  This method is preferred over  …\n"],["add_comment","RDoc::Context::Section","RDoc/Context/Section.html#method-i-add_comment","(comment)","<p>Adds <code>comment</code> to this section\n"],["add_constant","RDoc::Context","RDoc/Context.html#method-i-add_constant","(constant)","<p>Adds <code>constant</code> if not already there. If it is, updates the comment, value and/or is_alias_for of the known …\n"],["add_constant","RDoc::Stats","RDoc/Stats.html#method-i-add_constant","(constant)","<p>Records the parsing of <code>constant</code>\n"],["add_constant","RDoc::TopLevel","RDoc/TopLevel.html#method-i-add_constant","(constant)","<p>Adds <code>constant</code> to <code>Object</code> instead of <code>self</code>.\n"],["add_extend","RDoc::Context","RDoc/Context.html#method-i-add_extend","(ext)","<p>Adds extension module <code>ext</code> which should be an RDoc::Extend\n"],["add_extends","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-add_extends","(out, extends)","<p>Adds <code>extends</code> to <code>out</code>\n"],["add_extension_modules","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-add_extension_modules","(out, type, extensions)","<p>Adds a list of <code>extensions</code> to this module of the given <code>type</code> to <code>out</code>. add_includes and add_extends call …\n"],["add_file","RDoc::Stats","RDoc/Stats.html#method-i-add_file","(file)","<p>Records the parsing of <code>file</code>\n"],["add_file","RDoc::Store","RDoc/Store.html#method-i-add_file","(absolute_name, relative_name: absolute_name, parser: nil)","<p>Adds the file with <code>name</code> as an RDoc::TopLevel to the store.  Returns the created RDoc::TopLevel.\n"],["add_footnote","RDoc::RD::BlockParser","RDoc/RD/BlockParser.html#method-i-add_footnote","(content)","<p>Adds footnote <code>content</code> to the document\n"],["add_from","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-add_from","(out, store)","<p>Adds “(from …)” to <code>out</code> for <code>store</code>\n"],["add_generator","RDoc::RDoc","RDoc/RDoc.html#method-c-add_generator","(klass)","<p>Add <code>klass</code> that can generate output after parsing\n"],["add_html","RDoc::Markup","RDoc/Markup.html#method-i-add_html","(tag, name)","<p>Add to the sequences recognized as general markup.\n"],["add_html","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-add_html","(tag, name, exclusive = false)","<p>Adds a markup class with <code>name</code> for words surrounded by HTML tag <code>tag</code>. To process emphasis tags:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">am</span>.<span class=\"ruby-identifier\">add_html</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["add_include","RDoc::Context","RDoc/Context.html#method-i-add_include","(include)","<p>Adds included module <code>include</code> which should be an RDoc::Include\n"],["add_include","RDoc::TopLevel","RDoc/TopLevel.html#method-i-add_include","(include)","<p>Adds <code>include</code> to <code>Object</code> instead of <code>self</code>.\n"],["add_includes","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-add_includes","(out, includes)","<p>Adds <code>includes</code> to <code>out</code>\n"],["add_label","RDoc::RD::BlockParser","RDoc/RD/BlockParser.html#method-i-add_label","(label)","<p>Adds label <code>label</code> to the document\n"],["add_line_numbers","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-add_line_numbers","(src)","<p>Prepend <code>src</code> with line numbers.  Relies on the first line of a source code listing having:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># File xxxxx, ...</span>\n</pre>\n"],["add_method","RDoc::Context","RDoc/Context.html#method-i-add_method","(method)","<p>Adds <code>method</code> if not already there. If it is (as method or attribute), updates the comment if it was empty. …\n"],["add_method","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-add_method","(out, name)","<p>Looks up the method <code>name</code> and adds it to <code>out</code>\n"],["add_method","RDoc::Stats","RDoc/Stats.html#method-i-add_method","(method)","<p>Records the parsing of <code>method</code>\n"],["add_method","RDoc::TopLevel","RDoc/TopLevel.html#method-i-add_method","(method)","<p>Adds <code>method</code> to <code>Object</code> instead of <code>self</code>.\n"],["add_method_documentation","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-add_method_documentation","(out, klass)","<p>Adds documentation for all methods in <code>klass</code> to <code>out</code>\n"],["add_method_list","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-add_method_list","(out, methods, name)","<p>Adds a list of <code>methods</code> to <code>out</code> with a heading of <code>name</code>\n"],["add_module","RDoc::Context","RDoc/Context.html#method-i-add_module","(class_type, name)","<p>Adds a module named <code>name</code>.  If RDoc already knows <code>name</code> is a class then that class is returned instead. …\n"],["add_module","RDoc::Stats","RDoc/Stats.html#method-i-add_module","(mod)","<p>Records the parsing of a module <code>mod</code>\n"],["add_module_alias","RDoc::Context","RDoc/Context.html#method-i-add_module_alias","(from, from_name, to, file)","<p>Adds an alias from <code>from</code> (a class or module) to <code>name</code> which was defined in <code>file</code>.\n"],["add_module_by_normal_module","RDoc::Context","RDoc/Context.html#method-i-add_module_by_normal_module","(mod)","<p>Adds a module by <code>RDoc::NormalModule</code> instance. See also #add_module.\n"],["add_paragraph","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-add_paragraph","()","<p>Throws <code>:done</code> when paragraph_limit paragraphs have been encountered\n"],["add_regexp_handling","RDoc::Markup","RDoc/Markup.html#method-i-add_regexp_handling","(pattern, name)","<p>Add to other inline sequences.  For example, we could add WikiWords using something like:\n\n<pre>parser.add_regexp_handling(/\\b([A-Z][a-z]+[A-Z]\\w+)/, ...</pre>\n"],["add_regexp_handling","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-add_regexp_handling","(pattern, name, exclusive = false)","<p>Adds a regexp handling for <code>pattern</code> with <code>name</code>.  A simple URL handler would be:\n\n<pre>@am.add_regexp_handling(/((https?:)\\S+\\w)/, ...</pre>\n"],["add_regexp_handling_RDOCLINK","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-add_regexp_handling_RDOCLINK","()","<p>Adds a regexp handling for links of the form rdoc-…:\n"],["add_regexp_handling_TIDYLINK","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-add_regexp_handling_TIDYLINK","()","<p>Adds a regexp handling for links of the form &lt;text&gt; and &lt;word&gt;\n"],["add_require","RDoc::Context","RDoc/Context.html#method-i-add_require","(require)","<p>Adds <code>require</code> to this context’s top level\n"],["add_section","RDoc::Context","RDoc/Context.html#method-i-add_section","(title, comment = nil)","<p>Returns a section with <code>title</code>, creating it if it doesn’t already exist. <code>comment</code> will be appended to …\n"],["add_tag","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-add_tag","(name, start, stop)","<p>Add a new set of tags for an attribute. We allow separate start and end tags for flexibility\n"],["add_to","RDoc::Context","RDoc/Context.html#method-i-add_to","(array, thing)","<p>Adds <code>thing</code> to the collection <code>array</code>\n"],["add_to_classes_or_modules","RDoc::TopLevel","RDoc/TopLevel.html#method-i-add_to_classes_or_modules","(mod)","<p>Adds class or module <code>mod</code>. Used in the building phase by the Ruby parser.\n"],["add_token","RDoc::TokenStream","RDoc/TokenStream.html#method-i-add_token","(token)","<p>Adds one <code>token</code> to the collected tokens\n"],["add_token_listener","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-add_token_listener","(obj)","<p>Adds a token listener <code>obj</code>, but you should probably use token_listener\n"],["add_tokens","RDoc::TokenStream","RDoc/TokenStream.html#method-i-add_tokens","(tokens)","<p>Adds <code>tokens</code> to the collected tokens\n"],["add_word_pair","RDoc::Markup","RDoc/Markup.html#method-i-add_word_pair","(start, stop, name)","<p>Add to the sequences used to add formatting to an individual word (such as <strong>bold</strong>).  Matching entries will …\n"],["add_word_pair","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-add_word_pair","(start, stop, name, exclusive = false)","<p>Adds a markup class with <code>name</code> for words wrapped in the <code>start</code> and <code>stop</code> character.  To make words wrapped …\n"],["alias_extension","RDoc::Parser","RDoc/Parser.html#method-c-alias_extension","(old_ext, new_ext)","<p>Alias an extension to another extension. After this call, files ending “new_ext” will be parsed …\n"],["all_classes","RDoc::Store","RDoc/Store.html#method-i-all_classes","()","<p>Returns all classes discovered by RDoc\n"],["all_classes_and_modules","RDoc::Store","RDoc/Store.html#method-i-all_classes_and_modules","()","<p>Returns all classes and modules discovered by RDoc\n"],["all_files","RDoc::Store","RDoc/Store.html#method-i-all_files","()","<p>All TopLevels known to RDoc\n"],["all_modules","RDoc::Store","RDoc/Store.html#method-i-all_modules","()","<p>Returns all modules discovered by RDoc\n"],["ancestors","RDoc::ClassModule","RDoc/ClassModule.html#method-i-ancestors","()","<p>Ancestors list for this ClassModule: the list of included modules (classes will add their superclass …\n"],["ancestors","RDoc::NormalClass","RDoc/NormalClass.html#method-i-ancestors","()","<p>The ancestors of this class including modules.  Unlike Module#ancestors, this class is not included in …\n"],["ancestors","RDoc::SingleClass","RDoc/SingleClass.html#method-i-ancestors","()","<p>Adds the superclass to the included modules.\n"],["ancestors","RDoc::Store","RDoc/Store.html#method-i-ancestors","()","<p>Ancestors cache accessor.  Maps a klass name to an Array of its ancestors in this store.  If Foo in this …\n"],["ancestors_of","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-ancestors_of","(klass)","<p>Returns ancestor classes of <code>klass</code>\n"],["annotate","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-annotate","(tag)","<p>Allows <code>tag</code> to be decorated with additional information.\n"],["annotate","RDoc::Markup::ToBs","RDoc/Markup/ToBs.html#method-i-annotate","(tag)","<p>Turns on or off regexp handling for <code>convert_string</code>\n"],["any_content","RDoc::Context","RDoc/Context.html#method-i-any_content","(includes = true)","<p>Is there any content?\n<p>This means any of: comment, aliases, methods, attributes, external aliases, require, …\n"],["append","RDoc::RD::Inline","RDoc/RD/Inline.html#method-i-append","(more)","<p>Appends <code>more</code> to this inline.  <code>more</code> may be a String or another Inline.\n"],["aref","RDoc::Alias","RDoc/Alias.html#method-i-aref","()","<p>HTML fragment reference for this alias\n"],["aref","RDoc::ClassModule","RDoc/ClassModule.html#method-i-aref","()","<p>HTML fragment reference for this module or class.  See RDoc::NormalClass#aref and RDoc::NormalModule#aref …\n"],["aref","RDoc::Context::Section","RDoc/Context/Section.html#method-i-aref","()","<p>Anchor reference for linking to this section\n"],["aref","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-aref","()","<p>HTML fragment reference for this method\n"],["aref_prefix","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-aref_prefix","()","<p>Prefix for <code>aref</code> is ‘method’.\n"],["aref_prefix","RDoc::Attr","RDoc/Attr.html#method-i-aref_prefix","()","<p>The #aref prefix for attributes\n"],["aref_prefix","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-aref_prefix","()","<p>Prefix for <code>aref</code>, defined by subclasses.\n"],["aref_to","RDoc::Generator::Markup","RDoc/Generator/Markup.html#method-i-aref_to","(target_path)","<p>Generates a relative URL from this object’s path to <code>target_path</code>\n"],["arglists","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-arglists","()","<p>The call_seq or the param_seq with method name, if there is no call_seq.\n<p>Use this for displaying a method’s …\n"],["args_directive","RDoc::MarkupReference","RDoc/MarkupReference.html#method-i-args_directive","baz","<p>The <code>:args:</code> directive overrides the actual arguments found in the Ruby code.\n<p>Click on the calling sequence …\n"],["as_href","RDoc::Generator::Markup","RDoc/Generator/Markup.html#method-i-as_href","(from_path)","<p>Generates a relative URL from <code>from_path</code> to this object’s path\n"],["as_string","RDoc::Markup::Attributes","RDoc/Markup/Attributes.html#method-i-as_string","(bitmap)","<p>Returns a string representation of <code>bitmap</code>\n"],["assemble_template","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-assemble_template","(body_file)","<p>Creates a template from its components and the <code>body_file</code>.\n<p>For backwards compatibility, if <code>body_file</code> contains …\n"],["asset","RDoc::Servlet","RDoc/Servlet.html#method-i-asset","(generator_name, req, res)","<p>Serves the asset at the path in <code>req</code> for <code>generator_name</code> via <code>res</code>.\n"],["attribute","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-attribute","(turn_on, turn_off)","<p>Return an attribute object with the given turn_on and turn_off bits set\n"],["attributes","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-attributes","(text)","<p>Applies attribute-specific markup to <code>text</code> using RDoc::AttributeManager\n"],["attributes","RDoc::Store","RDoc/Store.html#method-i-attributes","()","<p>Attributes cache accessor.  Maps a class to an Array of its attributes.\n"],["base_name","RDoc::TopLevel","RDoc/TopLevel.html#method-i-base_name","()","<p>Base name of this file\n"],["before_running_rdoc","RDoc::Task","RDoc/Task.html#method-i-before_running_rdoc","(&block)","<p>The block passed to this method will be called just before running the RDoc generator. It is allowed …\n"],["begin_adding","RDoc::Stats","RDoc/Stats.html#method-i-begin_adding","()","<p>Call this to mark the beginning of parsing for display purposes\n"],["begin_adding","RDoc::Stats::Quiet","RDoc/Stats/Quiet.html#method-i-begin_adding","(*)","<p>Prints a message at the beginning of parsing\n"],["binary?","RDoc::Parser","RDoc/Parser.html#method-c-binary-3F","(file)","<p>Determines if the file is a “binary” file which basically means it has content that an RDoc …\n"],["bitmap_for","RDoc::Markup::Attributes","RDoc/Markup/Attributes.html#method-i-bitmap_for","(name)","<p>Returns a unique bit for <code>name</code>\n"],["block_params=","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-block_params-3D","(value)","<p>Attempts to sanitize the content passed by the Ruby parser: remove outer parentheses, etc.\n"],["break_on_newline","RDoc::Markdown","RDoc/Markdown.html#method-i-break_on_newline","","<p>Converts all newlines into hard breaks\n"],["build_heading","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-i-build_heading","(level)","<p>Builds a Heading of <code>level</code>\n"],["build_heading","RDoc::TomDoc","RDoc/TomDoc.html#method-i-build_heading","(level)","<p>Builds a heading from the token stream\n<p>level &mdash; The level of heading to create\n\n<p>Returns\n"],["build_index","RDoc::Generator::JsonIndex","RDoc/Generator/JsonIndex.html#method-i-build_index","()","<p>Builds the JSON index as a Hash.\n"],["build_list","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-i-build_list","(margin)","<p>Builds a List flush to <code>margin</code>\n"],["build_paragraph","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-i-build_paragraph","(margin)","<p>Builds a Paragraph that is flush to <code>margin</code>\n"],["build_paragraph","RDoc::TomDoc","RDoc/TomDoc.html#method-i-build_paragraph","(margin)","<p>Builds a paragraph from the token stream\n<p>margin &mdash; Unused\n\n<p>Returns\n"],["build_verbatim","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-i-build_verbatim","(margin)","<p>Builds a Verbatim that is indented from <code>margin</code>.\n<p>The verbatim block is shifted left (the least indented …\n"],["build_verbatim","RDoc::TomDoc","RDoc/TomDoc.html#method-i-build_verbatim","(margin)","<p>Builds a verbatim from the token stream.  A verbatim in the Examples section will be marked as in Ruby …\n"],["cache_path","RDoc::Store","RDoc/Store.html#method-i-cache_path","()","<p>Path to the cache file\n"],["calculate","RDoc::Stats","RDoc/Stats.html#method-i-calculate","()","<p>Calculates documentation totals and percentages for classes, modules, constants, attributes and methods. …\n"],["call_seq","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-call_seq","()","<p>Different ways to call this method\n"],["call_seq=","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-call_seq-3D","(call_seq)","<p>Sets the different ways you can call this method.  If an empty <code>call_seq</code> is given nil is assumed.\n<p>See also …\n"],["call_seq_directive","RDoc::MarkupReference","RDoc/MarkupReference.html#method-i-call_seq_directive","()","<p>The <code>:call-seq:</code> directive overrides the actual calling sequence found in the Ruby code.\n<p>It can specify …\n"],["can_parse","RDoc::Parser","RDoc/Parser.html#method-c-can_parse","(file_name)","<p>Return a parser that can handle a particular extension\n"],["can_parse_by_name","RDoc::Parser","RDoc/Parser.html#method-c-can_parse_by_name","(file_name)","<p>Returns a parser that can handle the extension for <code>file_name</code>.  This does not depend upon the file being …\n"],["change_attribute","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-change_attribute","(current, new)","<p>Changes the current attribute from <code>current</code> to <code>new</code>\n"],["change_encoding","RDoc::Encoding","RDoc/Encoding.html#method-c-change_encoding","(text, encoding)","<p>Changes encoding based on <code>encoding</code> without converting and returns new string\n"],["changed_attribute_by_name","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-changed_attribute_by_name","(current_set, new_set)","<p>Used by the tests to change attributes by name from <code>current_set</code> to <code>new_set</code>\n"],["check_files","RDoc::Options","RDoc/Options.html#method-i-check_files","()","<p>Check that the files on the command line exist\n"],["check_generator","RDoc::Options","RDoc/Options.html#method-i-check_generator","()","<p>Ensure only one generator is loaded\n"],["check_modeline","RDoc::Parser","RDoc/Parser.html#method-c-check_modeline","(file_name)","<p>Returns the file type from the modeline in <code>file_name</code>\n"],["check_names","RDoc::Task","RDoc/Task.html#method-i-check_names","(names)","<p>Ensures that <code>names</code> only includes names for the :rdoc, :clobber_rdoc and :rerdoc.  If other names are …\n"],["child_name","RDoc::Context","RDoc/Context.html#method-i-child_name","(name)","<p>Creates the full name for a child with <code>name</code>\n"],["class_attributes","RDoc::Context","RDoc/Context.html#method-i-class_attributes","()","<p>Class attributes\n"],["class_dir","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-class_dir","()","<p>Directory where generated class HTML files live relative to the output dir.\n"],["class_dir","RDoc::Generator::JsonIndex","RDoc/Generator/JsonIndex.html#method-i-class_dir","()","<p>The directory classes are written to\n"],["class_dir","RDoc::Generator::POT","RDoc/Generator/POT.html#method-i-class_dir","()",""],["class_document","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-class_document","(name, found, klasses, includes, extends)","<p>Builds a RDoc::Markup::Document from <code>found</code>, <code>klasess</code> and <code>includes</code>\n"],["class_file","RDoc::Store","RDoc/Store.html#method-i-class_file","(klass_name)","<p>Path to the ri data for <code>klass_name</code>\n"],["class_method_list","RDoc::Context","RDoc/Context.html#method-i-class_method_list","()","<p>Class methods\n"],["class_methods","RDoc::Store","RDoc/Store.html#method-i-class_methods","()","<p>Class methods cache accessor.  Maps a class to an Array of its class methods (not full name).\n"],["class_path","RDoc::Store","RDoc/Store.html#method-i-class_path","(klass_name)","<p>Path where data for <code>klass_name</code> will be stored (methods or class data)\n"],["classes","RDoc::Context","RDoc/Context.html#method-i-classes","()","<p>Array of classes in this context\n"],["classes","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-classes","()","<p>Hash mapping a known class or module to the stores it can be loaded from\n"],["classes_and_includes_and_extends_for","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-classes_and_includes_and_extends_for","(name)","<p>Returns the stores wherein <code>name</code> is found along with the classes, extends and includes that match it\n"],["classes_and_modules","RDoc::Context","RDoc/Context.html#method-i-classes_and_modules","()","<p>All classes and modules in this namespace\n"],["classes_hash","RDoc::Context","RDoc/Context.html#method-i-classes_hash","()","<p>Hash of classes keyed by class name\n"],["classes_hash","RDoc::Store","RDoc/Store.html#method-i-classes_hash","()","<p>Hash of all classes known to RDoc\n"],["clear_comment","RDoc::ClassModule","RDoc/ClassModule.html#method-i-clear_comment","()","<p>Clears the comment. Used by the Ruby parser.\n"],["clobber_task_description","RDoc::Task","RDoc/Task.html#method-i-clobber_task_description","()","<p>Task description for the clobber rdoc task or its renamed equivalent\n"],["collect_first_comment","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-collect_first_comment","()","<p>Look for the first comment in a file that isn’t a shebang line.\n"],["collect_tokens","RDoc::TokenStream","RDoc/TokenStream.html#method-i-collect_tokens","()","<p>Starts collecting tokens\n"],["comment=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-comment-3D","(comment)","<p>Replaces our comment with <code>comment</code>, unless it is empty.\n"],["complete","RDoc::ClassModule","RDoc/ClassModule.html#method-i-complete","(min_visibility)","<p>Prepares this ClassModule for use by a generator.\n<p>See RDoc::Store#complete\n"],["complete","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-complete","(name)","<p>Completes <code>name</code> based on the caches.  For Readline\n"],["complete","RDoc::Store","RDoc/Store.html#method-i-complete","(min_visibility)","<p>Prepares the RDoc code object tree for use by a generator.\n<p>It finds unique classes/modules defined, and …\n"],["concat","RDoc::Markup::Document","RDoc/Markup/Document.html#method-i-concat","(parts)","<p>Concatenates the given <code>parts</code> onto the document\n"],["content","RDoc::RD::BlockParser","RDoc/RD/BlockParser.html#method-i-content","(values)","<p>Retrieves the content of <code>values</code> as a single String\n"],["continue_entry_body","RDoc::Parser::ChangeLog","RDoc/Parser/ChangeLog.html#method-i-continue_entry_body","(entry_body, continuation)","<p>Attaches the <code>continuation</code> of the previous line to the <code>entry_body</code>.\n<p>Continued function listings are joined …\n"],["convert","RDoc::Markup","RDoc/Markup.html#method-i-convert","(input, formatter)","<p>We take <code>input</code>, parse it if necessary, then invoke the output <code>formatter</code> using a Visitor to render the …\n"],["convert","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-convert","(content)","<p>Marks up <code>content</code>\n"],["convert","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-convert","(content)","<p>Marks up <code>content</code>\n"],["convert","RDoc::Markup::ToLabel","RDoc/Markup/ToLabel.html#method-i-convert","(text)","<p>Converts <code>text</code> to an HTML-safe label\n"],["convert_attrs","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-convert_attrs","(str, attrs, exclusive = false)","<p>Map attributes like <strong>text</strong>to the sequence 001002&lt;char&gt;001003&lt;char&gt;, where &lt;char&gt; is …\n"],["convert_attrs_matching_word_pairs","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-convert_attrs_matching_word_pairs","(str, attrs, exclusive)",""],["convert_attrs_word_pair_map","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-convert_attrs_word_pair_map","(str, attrs, exclusive)",""],["convert_flow","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-convert_flow","(flow)","<p>Converts flow items <code>flow</code>\n"],["convert_flow","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-convert_flow","(flow)","<p>Converts flow items <code>flow</code>\n"],["convert_html","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-convert_html","(str, attrs, exclusive = false)","<p>Converts HTML tags to RDoc attributes\n"],["convert_regexp_handling","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-convert_regexp_handling","(target)","<p>Converts added regexp handlings. See RDoc::Markup#add_regexp_handling\n"],["convert_regexp_handling","RDoc::Markup::ToBs","RDoc/Markup/ToBs.html#method-i-convert_regexp_handling","(target)","<p>Calls convert_string on the result of convert_regexp_handling\n"],["convert_regexp_handlings","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-convert_regexp_handlings","(str, attrs, exclusive = false)","<p>Converts regexp handling sequences to RDoc attributes\n"],["convert_string","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-convert_string","(string)","<p>Converts a string to be fancier if desired\n"],["convert_string","RDoc::Markup::ToBs","RDoc/Markup/ToBs.html#method-i-convert_string","(string)","<p>Adds bold or underline mixed with backspaces\n"],["convert_string","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-convert_string","(text)","<p>CGI-escapes <code>text</code>\n"],["copy_static","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-copy_static","()","<p>Copies static files from the static_path into the output directory\n"],["copy_string","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-copy_string","(start_pos, end_pos)","<p>Copies <code>start_pos</code> to <code>end_pos</code> from the current string\n"],["coverage_level=","RDoc::Stats","RDoc/Stats.html#method-i-coverage_level-3D","(level)","<p>Sets coverage report level.  Accepted values are:\n<p>false or nil &mdash; No report\n<p>0 &mdash; Classes, modules, constants, …\n"],["create_document","RDoc::Parser::ChangeLog","RDoc/Parser/ChangeLog.html#method-i-create_document","(groups)","<p>Creates an RDoc::Markup::Document given the <code>groups</code> of ChangeLog entries.\n"],["create_entries","RDoc::Parser::ChangeLog","RDoc/Parser/ChangeLog.html#method-i-create_entries","(entries)","<p>Returns a list of ChangeLog entries an RDoc::Markup nodes for the given <code>entries</code>.\n"],["create_entries","RDoc::Parser::ChangeLog::Git","RDoc/Parser/ChangeLog/Git.html#method-i-create_entries","(entries)",""],["create_items","RDoc::Parser::ChangeLog","RDoc/Parser/ChangeLog.html#method-i-create_items","(items)","<p>Returns an RDoc::Markup::List containing the given <code>items</code> in the ChangeLog\n"],["cross_reference","RDoc::Markup::ToHtmlCrossref","RDoc/Markup/ToHtmlCrossref.html#method-i-cross_reference","(name, text = nil, code = true)","<p>Creates a link to the reference <code>name</code> if the name exists.  If <code>text</code> is given it is used as the link text, …\n"],["css","RDoc::Markdown","RDoc/Markdown.html#method-i-css","","<p>Allow style blocks\n"],["current","RDoc::RDoc","RDoc/RDoc.html#method-c-current","()","<p>Active RDoc::RDoc instance\n"],["current=","RDoc::RDoc","RDoc/RDoc.html#method-c-current-3D","(rdoc)","<p>Sets the active RDoc::RDoc instance\n"],["current_section","RDoc::Context","RDoc/Context.html#method-i-current_section","()","<p>The current documentation section that new items will be added to.  If temporary_section is available …\n"],["cvs_url","RDoc::Generator::Markup","RDoc/Generator/Markup.html#method-i-cvs_url","(url, full_path)","<p>Build a webcvs URL starting for the given <code>url</code> with <code>full_path</code> appended as the destination path.  If <code>url</code> …\n"],["cvs_url","RDoc::TopLevel","RDoc/TopLevel.html#method-i-cvs_url","()","<p>Returns a URL for this source file on some web repository.  Use the -W command line option to set.\n"],["debug_msg","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-debug_msg","(*msg)","<p>Output progress information if debugging is enabled\n"],["debug_msg","RDoc::Generator::JsonIndex","RDoc/Generator/JsonIndex.html#method-i-debug_msg","(*msg)","<p>Output progress information if debugging is enabled\n"],["default_options","RDoc::RI::Driver","RDoc/RI/Driver.html#method-c-default_options","()","<p>Default options for ri\n"],["default_title=","RDoc::Options","RDoc/Options.html#method-i-default_title-3D","(string)","<p>Set the title, but only if not already set. Used to set the title from a source file, so that a title …\n"],["defaults","RDoc::RI::Task","RDoc/RI/Task.html#method-i-defaults","()","<p>Sets default task values\n"],["defaults","RDoc::Task","RDoc/Task.html#method-i-defaults","()","<p>Sets default task values\n"],["define","RDoc::Task","RDoc/Task.html#method-i-define","()","<p>Create the tasks defined by this task lib.\n"],["defined_in?","RDoc::Context","RDoc/Context.html#method-i-defined_in-3F","(file)","<p>Is part of this thing was defined in <code>file</code>?\n"],["definition","RDoc::Attr","RDoc/Attr.html#method-i-definition","()","<p>Returns attr_reader, attr_writer or attr_accessor as appropriate.\n"],["definition","RDoc::NormalClass","RDoc/NormalClass.html#method-i-definition","()","<p>The definition of this class, <code>class MyClassName</code>\n"],["definition","RDoc::NormalModule","RDoc/NormalModule.html#method-i-definition","()","<p>The definition of this module, <code>module MyModuleName</code>\n"],["definition","RDoc::SingleClass","RDoc/SingleClass.html#method-i-definition","()","<p>The definition of this singleton class, <code>class &lt;&lt; MyClassName</code>\n"],["definition_lists","RDoc::Markdown","RDoc/Markdown.html#method-i-definition_lists","","<p>Allow PHP Markdown Extras style definition lists\n"],["delete_legacy_args","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-delete_legacy_args","(args)","<p>Removes legacy rdoc arguments from <code>args</code>\n"],["description","RDoc::ClassModule","RDoc/ClassModule.html#method-i-description","()","<p>Handy wrapper for marking up this class or module’s comment\n"],["description","RDoc::Generator::Markup","RDoc/Generator/Markup.html#method-i-description","()","<p>Handy wrapper for marking up this object’s comment\n"],["detect_encoding","RDoc::Encoding","RDoc/Encoding.html#method-c-detect_encoding","(string)","<p>Detects the encoding of <code>string</code> based on the magic comment\n"],["direct_ancestors","RDoc::ClassModule","RDoc/ClassModule.html#method-i-direct_ancestors","()","<p>Ancestors of this class or module only\n"],["direct_ancestors","RDoc::NormalClass","RDoc/NormalClass.html#method-i-direct_ancestors","()",""],["display","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-display","(document)","<p>Converts <code>document</code> to text and writes it to the pager\n"],["display?","RDoc::CodeObject","RDoc/CodeObject.html#method-i-display-3F","()","<p>Should this CodeObject be displayed in output?\n<p>A code object should be displayed if:\n<p>The item didn’t …\n"],["display?","RDoc::TopLevel","RDoc/TopLevel.html#method-i-display-3F","()","<p>Only a TopLevel that contains text file) will be displayed.  See also RDoc::CodeObject#display?\n"],["display_attributes","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-display_attributes","()","<p>Debug method that prints a string along with its attributes\n"],["display_class","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-display_class","(name)","<p>Outputs formatted RI data for class <code>name</code>.  Groups undocumented classes\n"],["display_method","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-display_method","(name)","<p>Outputs formatted RI data for method <code>name</code>\n"],["display_name","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-display_name","(name)","<p>Outputs formatted RI data for the class or method <code>name</code>.\n<p>Returns true if <code>name</code> was found, false if it was …\n"],["display_names","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-display_names","(names)","<p>Displays each name in <code>name</code>\n"],["display_page","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-display_page","(name)","<p>Outputs formatted RI data for page <code>name</code>.\n"],["display_page_list","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-display_page_list","(store, pages = store.cache[:pages], search = nil)","<p>Outputs a formatted RI page list for the pages in <code>store</code>.\n"],["do_GET","RDoc::Servlet","RDoc/Servlet.html#method-i-do_GET","(req, res)","<p>GET request entry point.  Fills in <code>res</code> for the path, etc. in <code>req</code>.\n"],["do_aliases","RDoc::Parser::C","RDoc/Parser/C.html#method-i-do_aliases","()","<p>Scans #content for rb_define_alias\n"],["do_attrs","RDoc::Parser::C","RDoc/Parser/C.html#method-i-do_attrs","()","<p>Scans #content for rb_attr and rb_define_attr\n"],["do_boot_defclass","RDoc::Parser::C","RDoc/Parser/C.html#method-i-do_boot_defclass","()","<p>Scans #content for boot_defclass\n"],["do_classes_and_modules","RDoc::Parser::C","RDoc/Parser/C.html#method-i-do_classes_and_modules","()","<p>Scans #content for rb_define_class, boot_defclass, rb_define_class_under and rb_singleton_class\n"],["do_constants","RDoc::Parser::C","RDoc/Parser/C.html#method-i-do_constants","()","<p>Scans #content for rb_define_variable, rb_define_readonly_variable, rb_define_const and rb_define_global_const …\n"],["do_includes","RDoc::Parser::C","RDoc/Parser/C.html#method-i-do_includes","()","<p>Scans #content for rb_include_module\n"],["do_methods","RDoc::Parser::C","RDoc/Parser/C.html#method-i-do_methods","()","<p>Scans #content for rb_define_method, rb_define_singleton_method, rb_define_module_function, rb_define_private_method …\n"],["do_missing","RDoc::Parser::C","RDoc/Parser/C.html#method-i-do_missing","()","<p>Creates classes and module that were missing were defined due to the file order being different than …\n"],["do_nothing","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-do_nothing","(markup_item)","<p>Does nothing to <code>markup_item</code> because it doesn’t have any user-built content\n"],["doc_stats","RDoc::Stats","RDoc/Stats.html#method-i-doc_stats","(collection)","<p>Returns the length and number of undocumented items in <code>collection</code>.\n"],["document","RDoc::RDoc","RDoc/RDoc.html#method-i-document","(options)","<p>Generates documentation or a coverage report depending upon the settings in <code>options</code>.\n<p><code>options</code> can be either …\n"],["document","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-document","(generator, options, destination)","<p>Generates documentation using the named <code>generator</code> (“darkfish” or “ri”) and following …\n"],["document_children=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-document_children-3D","(document_children)","<p>Enables or disables documentation of this CodeObject’s children unless it has been turned off by …\n"],["document_self=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-document_self-3D","(document_self)","<p>Enables or disables documentation of this CodeObject unless it has been turned off by :enddoc:.  If the …\n"],["document_self_or_methods","RDoc::ClassModule","RDoc/ClassModule.html#method-i-document_self_or_methods","()","<p>Does this ClassModule or any of its methods have document_self set?\n"],["documentation_page","RDoc::Servlet","RDoc/Servlet.html#method-i-documentation_page","(store, generator, path, req, res)","<p>Fills in <code>res</code> with the class, module or page for <code>req</code> from <code>store</code>.\n<p><code>path</code> is relative to the mount_path and …\n"],["documentation_search","RDoc::Servlet","RDoc/Servlet.html#method-i-documentation_search","(store, generator, req, res)","<p>Creates the JSON search index on <code>res</code> for the given <code>store</code>.  <code>generator</code> must respond to #json_index to build. …\n"],["documentation_source","RDoc::Servlet","RDoc/Servlet.html#method-i-documentation_source","(path)","<p>Returns the RDoc::Store and path relative to <code>mount_path</code> for documentation at <code>path</code>.\n"],["documented?","RDoc::ClassModule","RDoc/ClassModule.html#method-i-documented-3F","()","<p>Does this class or module have a comment with content or is #received_nodoc true?\n"],["documented?","RDoc::CodeObject","RDoc/CodeObject.html#method-i-documented-3F","()","<p>Does this object have a comment with content or is #received_nodoc true?\n"],["documented?","RDoc::Constant","RDoc/Constant.html#method-i-documented-3F","()","<p>A constant is documented if it has a comment, or is an alias for a documented class or module.\n"],["documented?","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-documented-3F","()","<p>A method/attribute is documented if any of the following is true:\n<p>it was marked with :nodoc:;\n<p>it has a …\n"],["done_adding","RDoc::Stats","RDoc/Stats.html#method-i-done_adding","()","<p>Call this to mark the end of parsing for display purposes\n"],["done_adding","RDoc::Stats::Quiet","RDoc/Stats/Quiet.html#method-i-done_adding","(*)","<p>Prints when RDoc is done\n"],["done_documenting=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-done_documenting-3D","(value)","<p>Turns documentation on/off, and turns on/off #document_self and #document_children.\n<p>Once documentation …\n"],["dummy_instance_alias","RDoc::MarkupReference","RDoc/MarkupReference.html#method-i-dummy_instance_alias","(foo, bar)",""],["dummy_instance_method","RDoc::MarkupReference","RDoc/MarkupReference.html#method-i-dummy_instance_method","(foo, bar)",""],["dummy_singleton_method","RDoc::MarkupReference","RDoc/MarkupReference.html#method-c-dummy_singleton_method","(foo, bar)",""],["dump","RDoc::RI::Driver","RDoc/RI/Driver.html#method-c-dump","(data_path)","<p>Dump <code>data_path</code> using pp\n"],["each","RDoc::Markup::Document","RDoc/Markup/Document.html#method-i-each","(&block)","<p>Enumerator for the parts of this document\n"],["each","RDoc::RI::Paths","RDoc/RI/Paths.html#method-c-each","(system = true, site = true, home = true, gems = :latest, *extra_dirs)","<p>Iterates over each selected path yielding the directory and type.\n<p>Yielded types:\n<p>:system &mdash; Where Ruby’s …\n"],["each_ancestor","RDoc::ClassModule","RDoc/ClassModule.html#method-i-each_ancestor","()","<p>Iterates the ancestors of this class or module for which an RDoc::ClassModule exists.\n"],["each_attribute","RDoc::Context","RDoc/Context.html#method-i-each_attribute","()","<p>Iterator for attributes\n"],["each_classmodule","RDoc::Context","RDoc/Context.html#method-i-each_classmodule","()","<p>Iterator for classes and modules\n"],["each_constant","RDoc::Context","RDoc/Context.html#method-i-each_constant","()","<p>Iterator for constants\n"],["each_extend","RDoc::Context","RDoc/Context.html#method-i-each_extend","()","<p>Iterator for extension modules\n"],["each_include","RDoc::Context","RDoc/Context.html#method-i-each_include","()","<p>Iterator for included modules\n"],["each_method","RDoc::Context","RDoc/Context.html#method-i-each_method","()","<p>Iterator for methods\n"],["each_name_of","RDoc::Markup::Attributes","RDoc/Markup/Attributes.html#method-i-each_name_of","(bitmap)","<p>yields each attribute name in <code>bitmap</code>\n"],["each_parent","RDoc::CodeObject","RDoc/CodeObject.html#method-i-each_parent","()","<p>Yields each parent of this CodeObject.  See also RDoc::ClassModule#each_ancestor\n"],["each_section","RDoc::Context","RDoc/Context.html#method-i-each_section","()","<p>Iterator for each section’s contents sorted by title.  The <code>section</code>, the section’s <code>constants</code> and …\n"],["emphasis","RDoc::Markdown","RDoc/Markdown.html#method-i-emphasis","(text)","<p>Wraps <code>text</code> in emphasis for rdoc inline formatting\n"],["empty?","RDoc::Comment","RDoc/Comment.html#method-i-empty-3F","()","<p>A comment is empty if its text String is empty.\n"],["empty?","RDoc::Markup::Document","RDoc/Markup/Document.html#method-i-empty-3F","()","<p>Does this document have no parts?\n"],["empty?","RDoc::Markup::List","RDoc/Markup/List.html#method-i-empty-3F","()","<p>Is the list empty?\n"],["empty?","RDoc::Markup::ListItem","RDoc/Markup/ListItem.html#method-i-empty-3F","()","<p>Is the ListItem empty?\n"],["encode!","RDoc::Comment","RDoc/Comment.html#method-i-encode-21","(encoding)","<p>HACK dubious\n"],["encode_fallback","RDoc::Text","RDoc/Text.html#method-c-encode_fallback","(character, encoding, fallback)","<p>Transcodes <code>character</code> to <code>encoding</code> with a <code>fallback</code> character.\n"],["end?","RDoc::Parser::RipperStateLex","RDoc/Parser/RipperStateLex.html#method-c-end-3F","(token)",""],["end_accepting","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-end_accepting","()","<p>Returns the generated output\n"],["end_accepting","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-end_accepting","()","<p>Returns the generated output\n"],["end_accepting","RDoc::Markup::ToTableOfContents","RDoc/Markup/ToTableOfContents.html#method-i-end_accepting","()","<p>Returns the table of contents\n"],["end_accepting","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-end_accepting","()","<p>Returns an Array of items that were wrapped in plus, tt or code.\n"],["eos?","RDoc::Markup::Parser::MyStringScanner","RDoc/Markup/Parser/MyStringScanner.html#method-i-eos-3F","()",""],["eql?","RDoc::Context::Section","RDoc/Context/Section.html#method-i-eql-3F","(other)",""],["eql?","RDoc::TopLevel","RDoc/TopLevel.html#method-i-eql-3F","(other)",""],["error","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-error","(msg)","<p>Aborts with <code>msg</code>\n"],["error","RDoc::RDoc","RDoc/RDoc.html#method-i-error","(msg)","<p>Report an error message and exit\n"],["error","RDoc::Servlet","RDoc/Servlet.html#method-i-error","(exception, req, res)","<p>Generates an error page for the <code>exception</code> while handling <code>req</code> on <code>res</code>.\n"],["exclude","RDoc::Options","RDoc/Options.html#method-i-exclude","()","<p>Create a regexp for #exclude\n"],["exclusive?","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-exclusive-3F","(attr)",""],["expand_class","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-expand_class","(klass)","<p>Expands abbreviated klass <code>klass</code> into a fully-qualified class.  “Zl::Da” will be expanded to …\n"],["expand_name","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-expand_name","(name)","<p>Expands the class portion of <code>name</code> into a fully-qualified class.  See #expand_class.\n"],["expand_tabs","RDoc::Text","RDoc/Text.html#method-i-expand_tabs","(text)","<p>Expands tab characters in <code>text</code> to eight spaces\n"],["extension","RDoc::Markdown","RDoc/Markdown.html#method-i-extension","(name, enable)","<p>Enables or disables the extension with <code>name</code>\n"],["extension","RDoc::Markdown","RDoc/Markdown.html#method-c-extension","(name)","<p>Creates extension methods for the <code>name</code> extension to enable and disable\nthe extension and to query if ...\n"],["extension?","RDoc::Markdown","RDoc/Markdown.html#method-i-extension-3F","(name)","<p>Is the extension <code>name</code> enabled?\n"],["extract","RDoc::Generator::POT::MessageExtractor","RDoc/Generator/POT/MessageExtractor.html#method-i-extract","()","<p>Extracts messages from <code>store</code>, stores them into RDoc::Generator::POT::PO and returns it.\n"],["extract_call_seq","RDoc::Comment","RDoc/Comment.html#method-i-extract_call_seq","(method)","<p>Look for a ‘call-seq’ in the comment to override the normal parameter handling.  The :call-seq: …\n"],["extract_comment","RDoc::Context::Section","RDoc/Context/Section.html#method-i-extract_comment","(comment)","<p>Extracts the comment for this section from the original comment block. If the first line contains :section:, …\n"],["extract_messages","RDoc::I18n::Text","RDoc/I18n/Text.html#method-i-extract_messages","()","<p>Extracts translation target messages and yields each message.\n<p>Each yielded message is a Hash. It consists …\n"],["file=","RDoc::Markup::Document","RDoc/Markup/Document.html#method-i-file-3D","(location)","<p>The file this Document was created from.\n"],["file_dir","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-file_dir","()","<p>Directory where generated class HTML files live relative to the output dir.\n"],["file_dir","RDoc::Generator::JsonIndex","RDoc/Generator/JsonIndex.html#method-i-file_dir","()","<p>The directory files are written to\n"],["file_name","RDoc::CodeObject","RDoc/CodeObject.html#method-i-file_name","()","<p>File name where this CodeObject was found.\n<p>See also RDoc::Context#in_files\n"],["files_hash","RDoc::Store","RDoc/Store.html#method-i-files_hash","()","<p>Hash of all files known to RDoc\n"],["filter_methods","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-filter_methods","(found, name)","<p>Filters the methods in <code>found</code> trying to find a match for <code>name</code>.\n"],["find_alias_comment","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_alias_comment","(class_name, new_name, old_name)","<p>Finds the comment for an alias on <code>class_name</code> from <code>new_name</code> to <code>old_name</code>\n"],["find_ancestor_local_symbol","RDoc::ClassModule","RDoc/ClassModule.html#method-i-find_ancestor_local_symbol","(symbol)","<p>Looks for a symbol in the #ancestors. See Context#find_local_symbol.\n"],["find_attr_comment","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_attr_comment","(var_name, attr_name, read = nil, write = nil)","<p>Finds a comment for rb_define_attr, rb_attr or Document-attr.\n<p><code>var_name</code> is the C class variable the attribute …\n"],["find_attribute","RDoc::Context","RDoc/Context.html#method-i-find_attribute","(name, singleton)","<p>Finds an attribute <code>name</code> with singleton value <code>singleton</code>.\n"],["find_attribute_named","RDoc::Context","RDoc/Context.html#method-i-find_attribute_named","(name)","<p>Finds an attribute with <code>name</code> in this context\n"],["find_body","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_body","(class_name, meth_name, meth_obj, file_content, quiet = false)","<p>Find the C code corresponding to a Ruby method\n"],["find_c_enclosure","RDoc::Store","RDoc/Store.html#method-i-find_c_enclosure","(variable)","<p>Finds the enclosure (namespace) for the given C <code>variable</code>.\n"],["find_class","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_class","(raw_name, name, base_name = nil)","<p>Finds a RDoc::NormalClass or RDoc::NormalModule for <code>raw_name</code>\n"],["find_class_comment","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_class_comment","(class_name, class_mod)","<p>Look for class or module documentation above Init_<code>class_name</code>(void), in a Document-class <code>class_name</code> (or …\n"],["find_class_method_named","RDoc::Context","RDoc/Context.html#method-i-find_class_method_named","(name)","<p>Finds a class method with <code>name</code> in this context\n"],["find_class_named","RDoc::ClassModule","RDoc/ClassModule.html#method-i-find_class_named","(name)","<p>Finds a class or module with <code>name</code> in this namespace or its descendants\n"],["find_class_named","RDoc::Store","RDoc/Store.html#method-i-find_class_named","(name)","<p>Finds the class with <code>name</code> in all discovered classes\n"],["find_class_named_from","RDoc::Store","RDoc/Store.html#method-i-find_class_named_from","(name, from)","<p>Finds the class with <code>name</code> starting in namespace <code>from</code>\n"],["find_class_or_module","RDoc::Store","RDoc/Store.html#method-i-find_class_or_module","(name)","<p>Finds the class or module with <code>name</code>\n"],["find_class_or_module","RDoc::TopLevel","RDoc/TopLevel.html#method-i-find_class_or_module","(name)","<p>See RDoc::TopLevel::find_class_or_module\n"],["find_const_comment","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_const_comment","(type, const_name, class_name = nil)","<p>Finds a comment matching <code>type</code> and <code>const_name</code> either above the comment or in the matching Document- section. …\n"],["find_constant_named","RDoc::Context","RDoc/Context.html#method-i-find_constant_named","(name)","<p>Finds a constant with <code>name</code> in this context\n"],["find_enclosing_module_named","RDoc::Context","RDoc/Context.html#method-i-find_enclosing_module_named","(name)","<p>Find a module at a higher scope\n"],["find_external_alias","RDoc::Context","RDoc/Context.html#method-i-find_external_alias","(name, singleton)","<p>Finds an external alias <code>name</code> with singleton value <code>singleton</code>.\n"],["find_external_alias_named","RDoc::Context","RDoc/Context.html#method-i-find_external_alias_named","(name)","<p>Finds an external alias with <code>name</code> in this context\n"],["find_file_named","RDoc::Context","RDoc/Context.html#method-i-find_file_named","(name)","<p>Finds a file with <code>name</code> in this context\n"],["find_file_named","RDoc::Store","RDoc/Store.html#method-i-find_file_named","(name)","<p>Finds the file with <code>name</code> in all discovered files\n"],["find_include_file","RDoc::Markup::PreProcess","RDoc/Markup/PreProcess.html#method-i-find_include_file","(name)","<p>Look for the given file in the directory containing the current file, and then in each of the directories …\n"],["find_instance_method_named","RDoc::Context","RDoc/Context.html#method-i-find_instance_method_named","(name)","<p>Finds an instance method with <code>name</code> in this context\n"],["find_local_symbol","RDoc::Context","RDoc/Context.html#method-i-find_local_symbol","(symbol)","<p>Finds a method, constant, attribute, external alias, module or file named <code>symbol</code> in this context.\n"],["find_local_symbol","RDoc::TopLevel","RDoc/TopLevel.html#method-i-find_local_symbol","(symbol)","<p>Finds a class or module named <code>symbol</code>\n"],["find_method","RDoc::Context","RDoc/Context.html#method-i-find_method","(name, singleton)","<p>Finds a method named <code>name</code> with singleton value <code>singleton</code>.\n"],["find_method_named","RDoc::Context","RDoc/Context.html#method-i-find_method_named","(name)","<p>Finds a instance or module method with <code>name</code> in this context\n"],["find_methods","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-find_methods","(name)","<p>Yields items matching <code>name</code> including the store they were found in, the class being searched for, the …\n"],["find_modifiers","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_modifiers","(comment, meth_obj)","<p>Handles modifiers in <code>comment</code> and updates <code>meth_obj</code> as appropriate.\n"],["find_module_named","RDoc::Context","RDoc/Context.html#method-i-find_module_named","(name)","<p>Find a module with <code>name</code> using ruby’s scoping rules\n"],["find_module_named","RDoc::Store","RDoc/Store.html#method-i-find_module_named","(name)","<p>Finds the module with <code>name</code> in all discovered modules\n"],["find_module_named","RDoc::TopLevel","RDoc/TopLevel.html#method-i-find_module_named","(name)","<p>Finds a module or class with <code>name</code>\n"],["find_override_comment","RDoc::Parser::C","RDoc/Parser/C.html#method-i-find_override_comment","(class_name, meth_obj)","<p>Finds a <code>Document-method</code> override for <code>meth_obj</code> on <code>class_name</code>\n"],["find_store","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-find_store","(name)","<p>Finds a store that matches <code>name</code> which can be the name of a gem, “ruby”, “home” or …\n"],["find_symbol","RDoc::Context","RDoc/Context.html#method-i-find_symbol","(symbol)","<p>Look up <code>symbol</code>, first as a module, then as a local symbol.\n"],["find_symbol_module","RDoc::Context","RDoc/Context.html#method-i-find_symbol_module","(symbol)","<p>Look up a module named <code>symbol</code>.\n"],["find_text_page","RDoc::Store","RDoc/Store.html#method-i-find_text_page","(file_name)","<p>Returns the RDoc::TopLevel that is a text file and has the given <code>file_name</code>\n"],["find_unique","RDoc::Store","RDoc/Store.html#method-i-find_unique","(all_hash)","<p>Finds unique classes/modules defined in <code>all_hash</code>, and returns them as an array. Performs the alias updates …\n"],["finish","RDoc::Options","RDoc/Options.html#method-i-finish","()","<p>Completes any unfinished option setup business such as filtering for existent files, creating a regexp …\n"],["finish_page_dir","RDoc::Options","RDoc/Options.html#method-i-finish_page_dir","()","<p>Fixes the page_dir to be relative to the root_dir and adds the page_dir to the files list.\n"],["fix_basic_object_inheritance","RDoc::Store","RDoc/Store.html#method-i-fix_basic_object_inheritance","()","<p>Fixes the erroneous <code>BasicObject &lt; Object</code> in 1.9.\n<p>Because we assumed all classes without a stated superclass …\n"],["flow","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-flow","(str)","<p>Processes <code>str</code> converting attributes, HTML and regexp handlings\n"],["flush_left","RDoc::Text","RDoc/Text.html#method-i-flush_left","(text)","<p>Flush <code>text</code> left based on the shortest line\n"],["for","RDoc::Parser","RDoc/Parser.html#method-c-for","(top_level, file_name, content, options, stats)","<p>Finds and instantiates the correct parser for the given <code>file_name</code> and <code>content</code>.\n"],["force_documentation=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-force_documentation-3D","(value)","<p>Force the documentation of this object unless documentation has been turned off by :enddoc:\n"],["format=","RDoc::Comment","RDoc/Comment.html#method-i-format-3D","(format)","<p>Sets the format of this comment and resets any parsed document\n"],["formatter","RDoc::Generator::Markup","RDoc/Generator/Markup.html#method-i-formatter","()","<p>Creates an RDoc::Markup::ToHtmlCrossref formatter\n"],["formatter","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-formatter","(io)","<p>Creates a new RDoc::Markup::Formatter.  If a formatter is given with -f, use it.  If we’re outputting …\n"],["friendly_path","RDoc::Store","RDoc/Store.html#method-i-friendly_path","()","<p>Friendly rendition of #path\n"],["from_module","RDoc::ClassModule","RDoc/ClassModule.html#method-c-from_module","(class_type, mod)","<p>Return a RDoc::ClassModule of class <code>class_type</code> that is a copy of module <code>module</code>. Used to promote modules …\n"],["full_name","RDoc::ClassModule","RDoc/ClassModule.html#method-i-full_name","()","<p>Return the fully qualified name of this class or module\n"],["full_name","RDoc::Constant","RDoc/Constant.html#method-i-full_name","()","<p>Full constant name including namespace\n"],["full_name","RDoc::Context","RDoc/Context.html#method-i-full_name","()","<p>The full name for this context.  This method is overridden by subclasses.\n"],["full_name","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-full_name","()","<p>Full method/attribute name including namespace\n"],["full_name","RDoc::Mixin","RDoc/Mixin.html#method-i-full_name","()","<p>Full name based on #module\n"],["full_name","RDoc::TopLevel","RDoc/TopLevel.html#method-i-full_name","()","<p>Returns the relative name of this file\n"],["full_name=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-full_name-3D","(full_name)","<p>Sets the full_name overriding any computed full name.\n<p>Set to <code>nil</code> to clear RDoc’s cached value\n"],["full_old_name","RDoc::Alias","RDoc/Alias.html#method-i-full_old_name","()","<p>Full old name including namespace\n"],["fully_documented?","RDoc::Context","RDoc/Context.html#method-i-fully_documented-3F","()","<p>Does this context and its methods and constants all have documentation?\n<p>(Yes, fully documented doesn’t …\n"],["fully_documented?","RDoc::Stats","RDoc/Stats.html#method-i-fully_documented-3F","()","<p>The documentation status of this project.  <code>true</code> when 100%, <code>false</code> when less than 100% and <code>nil</code> when unknown. …\n"],["gather_files","RDoc::RDoc","RDoc/RDoc.html#method-i-gather_files","(files)","<p>Gathers a set of parseable files from the files and directories listed in <code>files</code>.\n"],["gem_dir","RDoc::RI::Paths","RDoc/RI/Paths.html#method-c-gem_dir","(name, version)","<p>The ri directory for the gem with <code>gem_name</code>.\n"],["gemdirs","RDoc::RI::Paths","RDoc/RI/Paths.html#method-c-gemdirs","(filter = :latest)","<p>The latest installed gems’ ri directories.  <code>filter</code> can be :all or :latest.\n<p>A <code>filter</code> :all includes …\n"],["gen_body_table","RDoc::Parser::C","RDoc/Parser/C.html#method-i-gen_body_table","(file_content)","<p>Generate a Ruby-method table\n"],["gen_const_table","RDoc::Parser::C","RDoc/Parser/C.html#method-i-gen_const_table","(file_content)","<p>Generate a const table\n"],["gen_relative_url","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-c-gen_relative_url","(path, target)","<p>Converts a target url to one that is relative to a given path\n"],["gen_sub_directories","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-gen_sub_directories","()","<p>Create the directories the generated docs will live in if they don’t already exist.\n"],["gen_url","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-gen_url","(url, text)","<p>Generate a link to <code>url</code> with content <code>text</code>.  Handles the special cases for img: and link: described under …\n"],["gen_url","RDoc::Markup::ToHtmlCrossref","RDoc/Markup/ToHtmlCrossref.html#method-i-gen_url","(url, text)","<p>Generates links for <code>rdoc-ref:</code> scheme URLs and allows RDoc::Markup::ToHtml to handle other schemes.\n"],["gen_url","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-gen_url","(url, text)","<p>Returns just the text of <code>link</code>, <code>url</code> is only used to determine the link type.\n"],["gen_url","RDoc::Markup::ToMarkdown","RDoc/Markup/ToMarkdown.html#method-i-gen_url","(url, text)","<p>Creates a Markdown-style URL from <code>url</code> with <code>text</code>.\n"],["generate","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-generate","()","<p>Build the initial indices and output objects based on an array of TopLevel objects containing the extracted …\n"],["generate","RDoc::Generator::JsonIndex","RDoc/Generator/JsonIndex.html#method-i-generate","()","<p>Writes the JSON index to disk\n"],["generate","RDoc::Generator::POT","RDoc/Generator/POT.html#method-i-generate","()","<p>Writes .pot to disk.\n"],["generate","RDoc::Generator::RI","RDoc/Generator/RI.html#method-i-generate","()","<p>Writes the parsed data store to disk for use by ri.\n"],["generate","RDoc::RDoc","RDoc/RDoc.html#method-i-generate","()","<p>Generates documentation for <code>file_info</code> (from #parse_files) into the output dir using the generator selected …\n"],["generate","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-generate","()","<p>Generates RDoc and ri data\n"],["generate_class","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-generate_class","(klass, template_file = nil)","<p>Generates a class file for <code>klass</code>\n"],["generate_class_files","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-generate_class_files","()","<p>Generate a documentation file for each class and module\n"],["generate_file_files","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-generate_file_files","()","<p>Generate a documentation file for each file\n"],["generate_gzipped","RDoc::Generator::JsonIndex","RDoc/Generator/JsonIndex.html#method-i-generate_gzipped","()","<p>Compress the search_index.js file using gzip\n"],["generate_index","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-generate_index","()","<p>Generate an index page which lists all the classes which are documented.\n"],["generate_page","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-generate_page","(file)","<p>Generate a page file for <code>file</code>\n"],["generate_servlet_not_found","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-generate_servlet_not_found","(message)","<p>Generates the 404 page for the RDoc servlet\n"],["generate_servlet_root","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-generate_servlet_root","(installed)","<p>Generates the servlet root page for the RDoc servlet\n"],["generate_table_of_contents","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-generate_table_of_contents","()","<p>Generate an index page which lists all the classes which are documented.\n"],["generation_hook","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-c-generation_hook","(installer, specs)","<p>Post installs hook that generates documentation for each specification in <code>specs</code>\n"],["generator_descriptions","RDoc::Options","RDoc/Options.html#method-i-generator_descriptions","()","<p>Returns a properly-space list of generators and their descriptions.\n"],["generator_for","RDoc::Servlet","RDoc/Servlet.html#method-i-generator_for","(store)","<p>Instantiates a Darkfish generator for <code>store</code>\n"],["get","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-i-get","()","<p>Pulls the next token from the stream.\n"],["get_bool","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-get_bool","()","<p>Looks for a true or false token.\n"],["get_class_or_module","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-get_class_or_module","(container, ignore_constants = false)","<p>Look for the name of a class of module (optionally with a leading  &mdash; or\n<p>with  &mdash; separated named) and return …\n\n"],["get_class_specification","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-get_class_specification","()","<p>Return a superclass, which can be either a constant of an expression\n"],["get_constant","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-get_constant","()","<p>Parse a constant, which might be qualified by one or more class or module names\n"],["get_included_module_with_optional_parens","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-get_included_module_with_optional_parens","()","<p>Get an included module that may be surrounded by parens\n"],["get_sorted_module_list","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-get_sorted_module_list","(classes)","<p>Return a list of the documented modules sorted by salience first, then by name.\n"],["get_squashed_tk","RDoc::Parser::RipperStateLex","RDoc/Parser/RipperStateLex.html#method-i-get_squashed_tk","()",""],["get_svninfo","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-get_svninfo","(klass)","<p>Try to extract Subversion information out of the first constant whose value looks like a subversion  …\n"],["get_symbol_or_name","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-get_symbol_or_name","()","<p>Extracts a name or symbol from the token stream.\n"],["get_tk","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-get_tk","()","<p>Fetches the next token from the scanner\n"],["get_tk_until","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-get_tk_until","(*tokens)","<p>Reads and returns all tokens up to one of <code>tokens</code>.  Leaves the matched token in the token list.\n"],["get_tkread","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-get_tkread","()","<p>Retrieves a String representation of the read tokens\n"],["github","RDoc::Markdown","RDoc/Markdown.html#method-i-github","","<p>Allow Github Flavored Markdown\n"],["great_job","RDoc::Stats","RDoc/Stats.html#method-i-great_job","()","<p>A report that says you did a great job!\n"],["group_entries","RDoc::Parser::ChangeLog","RDoc/Parser/ChangeLog.html#method-i-group_entries","(entries)","<p>Groups <code>entries</code> by date.\n"],["handle","RDoc::Markup::PreProcess","RDoc/Markup/PreProcess.html#method-i-handle","(text, code_object = nil, &block)","<p>Look for directives in the given <code>text</code>.\n<p>Options that we don’t handle are yielded.  If the block returns …\n"],["handle_attr","RDoc::Parser::C","RDoc/Parser/C.html#method-i-handle_attr","(var_name, attr_name, read, write)","<p>Creates a new RDoc::Attr <code>attr_name</code> on class <code>var_name</code> that is either <code>read</code>, <code>write</code> or both\n"],["handle_class_module","RDoc::Parser::C","RDoc/Parser/C.html#method-i-handle_class_module","(var_name, type, class_name, parent, in_module)","<p>Creates a new RDoc::NormalClass or RDoc::NormalModule based on <code>type</code> named <code>class_name</code> in <code>parent</code> which …\n"],["handle_constants","RDoc::Parser::C","RDoc/Parser/C.html#method-i-handle_constants","(type, var_name, const_name, definition)","<p>Adds constants.  By providing some_value: at the start of the comment you can override the C value of …\n"],["handle_directive","RDoc::Markup::PreProcess","RDoc/Markup/PreProcess.html#method-i-handle_directive","(prefix, directive, param, code_object = nil, encoding = nil)","<p>Performs the actions described by <code>directive</code> and its parameter <code>param</code>.\n<p><code>code_object</code> is used for directives …\n"],["handle_ifdefs_in","RDoc::Parser::C","RDoc/Parser/C.html#method-i-handle_ifdefs_in","(body)","<p>Removes #ifdefs that would otherwise confuse us\n"],["handle_method","RDoc::Parser::C","RDoc/Parser/C.html#method-i-handle_method","(type, var_name, meth_name, function, param_count, source_file = nil)","<p>Adds an RDoc::AnyMethod <code>meth_name</code> defined on a class or module assigned to <code>var_name</code>.  <code>type</code> is the type …\n"],["handle_pipe","RDoc::RDoc","RDoc/RDoc.html#method-i-handle_pipe","()","<p>Turns RDoc from stdin into HTML\n"],["handle_rdoc_link","RDoc::Markup::ToMarkdown","RDoc/Markup/ToMarkdown.html#method-i-handle_rdoc_link","(url)","<p>Handles <code>rdoc-</code> type links for footnotes.\n"],["handle_regexp_CROSSREF","RDoc::Markup::ToHtmlCrossref","RDoc/Markup/ToHtmlCrossref.html#method-i-handle_regexp_CROSSREF","(target)","<p>We’re invoked when any text matches the CROSSREF pattern.  If we find the corresponding reference, …\n"],["handle_regexp_CROSSREF","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-handle_regexp_CROSSREF","(target)","<p>Removes escaping from the cross-references in <code>target</code>\n"],["handle_regexp_CROSSREF","RDoc::Markup::ToLabel","RDoc/Markup/ToLabel.html#method-i-handle_regexp_CROSSREF","(target)","<p>Converts the CROSSREF <code>target</code> to plain text, removing the suppression marker, if any\n"],["handle_regexp_HARD_BREAK","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-handle_regexp_HARD_BREAK","(target)","<p><code>target</code> is a <code>&lt;br&gt;</code>\n"],["handle_regexp_HARD_BREAK","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-handle_regexp_HARD_BREAK","(target)","<p><code>target</code> is a <code>&lt;br&gt;</code>\n"],["handle_regexp_HARD_BREAK","RDoc::Markup::ToMarkdown","RDoc/Markup/ToMarkdown.html#method-i-handle_regexp_HARD_BREAK","(target)","<p>Adds a newline to the output\n"],["handle_regexp_HARD_BREAK","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-handle_regexp_HARD_BREAK","(target)","<p>Adds a newline to the output\n"],["handle_regexp_HYPERLINK","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-handle_regexp_HYPERLINK","(target)","<p><code>target</code> is a potential link.  The following schemes are handled:\n<p><code>mailto:</code> &mdash; Inserted as-is.\n<p><code>http:</code> &mdash; Links are …\n"],["handle_regexp_HYPERLINK","RDoc::Markup::ToHtmlCrossref","RDoc/Markup/ToHtmlCrossref.html#method-i-handle_regexp_HYPERLINK","(target)","<p>Handles <code>rdoc-ref:</code> scheme links and allows RDoc::Markup::ToHtml to handle other schemes.\n"],["handle_regexp_RDOCLINK","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-handle_regexp_RDOCLINK","(target)","<p><code>target</code> is an rdoc-schemed link that will be converted into a hyperlink.\n<p>For the <code>rdoc-ref</code> scheme the named …\n"],["handle_regexp_RDOCLINK","RDoc::Markup::ToHtmlCrossref","RDoc/Markup/ToHtmlCrossref.html#method-i-handle_regexp_RDOCLINK","(target)","<p><code>target</code> is an rdoc-schemed link that will be converted into a hyperlink. For the rdoc-ref scheme the cross-reference …\n"],["handle_regexp_RDOCLINK","RDoc::Markup::ToMarkdown","RDoc/Markup/ToMarkdown.html#method-i-handle_regexp_RDOCLINK","(target)","<p>Converts the rdoc-…: links into a Markdown.style links.\n"],["handle_regexp_SUPPRESSED_CROSSREF","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-handle_regexp_SUPPRESSED_CROSSREF","(target)","<p>Removes preceding \\ from the suppressed crossref <code>target</code>\n"],["handle_regexp_TIDYLINK","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-handle_regexp_TIDYLINK","(target)","<p>This <code>target</code> is a link where the label is different from the URL <code>label[url]</code> or <code>{long label}[url]</code>\n"],["handle_regexp_TIDYLINK","RDoc::Markup::ToLabel","RDoc/Markup/ToLabel.html#method-i-handle_regexp_TIDYLINK","(target)","<p>Converts the TIDYLINK <code>target</code> to just the text part\n"],["handle_regexp_TIDYLINK","RDoc::Markup::ToMarkdown","RDoc/Markup/ToMarkdown.html#method-i-handle_regexp_TIDYLINK","(target)","<p>Converts the RDoc markup tidylink into a Markdown.style link.\n"],["handle_singleton","RDoc::Parser::C","RDoc/Parser/C.html#method-i-handle_singleton","(sclass_var, class_var)","<p>Registers a singleton class <code>sclass_var</code> as a singleton of <code>class_var</code>\n"],["handle_tab_width","RDoc::Parser","RDoc/Parser.html#method-i-handle_tab_width","(body)","<p>Normalizes tabs in <code>body</code>\n"],["hash","RDoc::TopLevel","RDoc/TopLevel.html#method-i-hash","()","<p>An RDoc::TopLevel has the same hash as another with the same relative_name\n"],["home","RDoc","RDoc.html#method-c-home","()",""],["home_dir","RDoc::RI::Paths","RDoc/RI/Paths.html#method-c-home_dir","()","<p>The location of the rdoc data in the user’s home directory.\n<p>Like ::system, ri data in the user’s …\n"],["html","RDoc::Markdown","RDoc/Markdown.html#method-i-html","","<p>Allow HTML\n"],["html_list_name","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-html_list_name","(list_type, open_tag)","<p>Determines the HTML list element for <code>list_type</code> and <code>open_tag</code>\n"],["html_list_name","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-html_list_name","(list_type, open_tag)","<p>In snippets, there are no lists\n"],["html_name","RDoc::Alias","RDoc/Alias.html#method-i-html_name","()","<p>HTML id-friendly version of <code>#new_name</code>.\n"],["html_name","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-html_name","()","<p>HTML id-friendly method/attribute name\n"],["http_url","RDoc::Context","RDoc/Context.html#method-i-http_url","(prefix)","<p>URL for this with a <code>prefix</code>\n"],["http_url","RDoc::TopLevel","RDoc/TopLevel.html#method-i-http_url","(prefix)","<p>URL for this with a <code>prefix</code>\n"],["if_modified_since","RDoc::Servlet","RDoc/Servlet.html#method-i-if_modified_since","(req, res, path = nil)","<p>Handles the If-Modified-Since HTTP header on <code>req</code> for <code>path</code>.  If the file has not been modified a Not  …\n"],["ignore","RDoc::CodeObject","RDoc/CodeObject.html#method-i-ignore","()","<p>Use this to ignore a CodeObject and all its children until found again (#record_location is called). …\n"],["ignore","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-ignore","(*node)","<p>Use ignore in your subclass to ignore the content of a node.\n\n<pre class=\"ruby\"><span class=\"ruby-comment\">##</span>\n<span class=\"ruby-comment\"># We don&#39;t support raw nodes in ToNoRaw ...</span>\n</pre>\n"],["ignored?","RDoc::CodeObject","RDoc/CodeObject.html#method-i-ignored-3F","()","<p>Has this class been ignored?\n<p>See also #ignore\n"],["in_files","RDoc::Context::Section","RDoc/Context/Section.html#method-i-in_files","()","<p>The files comments in this section come from\n"],["in_tt?","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-in_tt-3F","()","<p>Are we currently inside tt tags?\n"],["include_file","RDoc::Markup::PreProcess","RDoc/Markup/PreProcess.html#method-i-include_file","(name, indent, encoding)","<p>Handles the <code>:include: <em>filename</em></code> directive.\n<p>If the first line of the included file starts with ‘#’, …\n"],["index_classes","RDoc::Generator::JsonIndex","RDoc/Generator/JsonIndex.html#method-i-index_classes","()","<p>Adds classes and modules to the index\n"],["index_methods","RDoc::Generator::JsonIndex","RDoc/Generator/JsonIndex.html#method-i-index_methods","()","<p>Adds methods to the index\n"],["index_pages","RDoc::Generator::JsonIndex","RDoc/Generator/JsonIndex.html#method-i-index_pages","()","<p>Adds pages to the index\n"],["init_link_notation_regexp_handlings","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-init_link_notation_regexp_handlings","()","<p>Adds regexp handlings about link notations.\n"],["init_link_notation_regexp_handlings","RDoc::Markup::ToHtmlCrossref","RDoc/Markup/ToHtmlCrossref.html#method-i-init_link_notation_regexp_handlings","()",""],["init_regexp_handlings","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-init_regexp_handlings","()","<p>Adds regexp handlings.\n"],["init_tags","RDoc::Markup::ToAnsi","RDoc/Markup/ToAnsi.html#method-i-init_tags","()","<p>Maps attributes to ANSI sequences\n"],["init_tags","RDoc::Markup::ToBs","RDoc/Markup/ToBs.html#method-i-init_tags","()","<p>Sets a flag that is picked up by #annotate to do the right thing in #convert_string\n"],["init_tags","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-init_tags","()","<p>Maps attributes to HTML tags\n"],["init_tags","RDoc::Markup::ToMarkdown","RDoc/Markup/ToMarkdown.html#method-i-init_tags","()","<p>Maps attributes to HTML sequences\n"],["init_tags","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-init_tags","()","<p>Maps attributes to HTML sequences\n"],["initialize","RDoc::Generator::POT","RDoc/Generator/POT.html#method-i-initialize","(store, options)","<p>Set up a new .pot generator\n"],["initialize","RDoc::Generator::RI","RDoc/Generator/RI.html#method-i-initialize","(store, options)","<p>Set up a new ri generator\n"],["initialize","RDoc::RD::Inline","RDoc/RD/Inline.html#method-i-initialize","(rdoc, reference)","<p>Initializes the Inline with <code>rdoc</code> and <code>inline</code>\n"],["initialize_methods_etc","RDoc::Context","RDoc/Context.html#method-i-initialize_methods_etc","()","<p>Sets the defaults for methods and so-forth\n"],["inline","RDoc::RD::InlineParser","RDoc/RD/InlineParser.html#method-i-inline","(rdoc, reference = rdoc)","<p>Creates a new RDoc::RD::Inline for the <code>rdoc</code> markup and the raw <code>reference</code>\n"],["install_siginfo_handler","RDoc::RDoc","RDoc/RDoc.html#method-i-install_siginfo_handler","()","<p>Installs a siginfo handler that prints the current filename.\n"],["installed_docs","RDoc::Servlet","RDoc/Servlet.html#method-i-installed_docs","()","<p>Returns an Array of installed documentation.\n<p>Each entry contains the documentation name (gem name, ‘Ruby …\n"],["instance_attributes","RDoc::Context","RDoc/Context.html#method-i-instance_attributes","()","<p>Instance attributes\n"],["instance_method_list","RDoc::Context","RDoc/Context.html#method-i-instance_method_list","()","<p>Instance methods\n"],["instance_methods","RDoc::Context","RDoc/Context.html#method-i-instance_methods","()","<p>Instance methods\n"],["instance_methods","RDoc::Store","RDoc/Store.html#method-i-instance_methods","()","<p>Instance methods cache accessor.  Maps a class to an Array of its instance methods (not full name).\n"],["interactive","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-interactive","()","<p>Runs ri interactively using Readline if it is available.\n"],["is_alias_for","RDoc::Constant","RDoc/Constant.html#method-i-is_alias_for","()","<p>The module or class this constant is an alias for\n"],["last","RDoc::Markup::List","RDoc/Markup/List.html#method-i-last","()","<p>Returns the last item in the list\n"],["last_modified","RDoc::TopLevel","RDoc/TopLevel.html#method-i-last_modified","()","<p>Time this file was last modified, if known\n"],["length","RDoc::Markup::ListItem","RDoc/Markup/ListItem.html#method-i-length","()","<p>Length of parts in the ListItem\n"],["line_index","RDoc::RD::BlockParser","RDoc/RD/BlockParser.html#method-i-line_index","()","<p>Current line number\n"],["link","RDoc::Markup::ToHtmlCrossref","RDoc/Markup/ToHtmlCrossref.html#method-i-link","(name, text, code = true)","<p>Creates an HTML link to <code>name</code> with the given <code>text</code>.\n"],["link_to","RDoc::Markdown","RDoc/Markdown.html#method-i-link_to","(content, label = content, text = nil)","<p>Finds a link reference for <code>label</code> and creates a new link to it with\n<code>content</code> as the link text. If <code>label</code> ...\n"],["list_end_for","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-list_end_for","(list_type)","<p>Returns the HTML end-tag for <code>list_type</code>\n"],["list_files_in_directory","RDoc::RDoc","RDoc/RDoc.html#method-i-list_files_in_directory","(dir)","<p>Return a list of the files to be processed in a directory. We know that this directory doesn’t have …\n"],["list_item_from","RDoc::Markdown","RDoc/Markdown.html#method-i-list_item_from","(unparsed)","<p>Creates an RDoc::Markup::ListItem by parsing the <code>unparsed</code> content from\nthe first parsing pass.\n"],["list_item_start","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-list_item_start","(list_item, list_type)","<p>Returns the HTML tag for <code>list_type</code>, possible using a label from <code>list_item</code>\n"],["list_item_start","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-list_item_start","(list_item, list_type)","<p>Lists are paragraphs, but notes and labels have a separator\n"],["list_known_classes","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-list_known_classes","(names = [])","<p>Lists classes known to ri starting with <code>names</code>.  If <code>names</code> is empty all known classes are shown.\n"],["list_methods_matching","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-list_methods_matching","(name)","<p>Returns an Array of methods matching <code>name</code>\n"],["load","RDoc::I18n::Locale","RDoc/I18n/Locale.html#method-i-load","(locale_directory)","<p>Loads translation messages from <code>locale_directory</code>/+@name+/rdoc.po or <code>locale_directory</code>/+@name+.po. The …\n"],["load_all","RDoc::Store","RDoc/Store.html#method-i-load_all","()","<p>Loads all items from this store into memory.  This recreates a documentation tree for use by a generator …\n"],["load_cache","RDoc::Store","RDoc/Store.html#method-i-load_cache","()","<p>Loads cache file for this store\n"],["load_class","RDoc::Store","RDoc/Store.html#method-i-load_class","(klass_name)","<p>Loads ri data for <code>klass_name</code> and hooks it up to this store.\n"],["load_class_data","RDoc::Store","RDoc/Store.html#method-i-load_class_data","(klass_name)","<p>Loads ri data for <code>klass_name</code>\n"],["load_method","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-load_method","(store, cache, klass, type, name)","<p>Loads RI data for method <code>name</code> on <code>klass</code> from <code>store</code>.  <code>type</code> and <code>cache</code> indicate if it is a class or instance …\n"],["load_method","RDoc::Store","RDoc/Store.html#method-i-load_method","(klass_name, method_name)","<p>Loads ri data for <code>method_name</code> in <code>klass_name</code>\n"],["load_methods_matching","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-load_methods_matching","(name)","<p>Returns an Array of RI data for methods matching <code>name</code>\n"],["load_options","RDoc::Options","RDoc/Options.html#method-c-load_options","()","<p>Loads options from .rdoc_options if the file exists, otherwise creates a new RDoc::Options instance. …\n"],["load_page","RDoc::Store","RDoc/Store.html#method-i-load_page","(page_name)","<p>Loads ri data for <code>page_name</code>\n"],["load_rdoc","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-c-load_rdoc","()","<p>Loads the RDoc generator\n"],["load_variable_map","RDoc::Parser::C","RDoc/Parser/C.html#method-i-load_variable_map","(map_name)","<p>Loads the variable map with the given <code>name</code> from the RDoc::Store, if present.\n"],["load_yaml","RDoc","RDoc.html#method-c-load_yaml","()","<p>Loads the best available YAML library.\n"],["look_for_directives_in","RDoc::Parser::C","RDoc/Parser/C.html#method-i-look_for_directives_in","(context, comment)","<p>Look for directives in a normal comment block:\n\n<pre>/*\n * :title: My Awesome Project\n */</pre>\n<p>This method modifies …\n"],["look_for_directives_in","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-look_for_directives_in","(container, comment)","<p>Look for directives in a normal comment block:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># :stopdoc:</span>\n<span class=\"ruby-comment\"># Don&#39;t display comment from this point forward</span>\n</pre>\n"],["lookup_method","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-lookup_method","(name)","<p>Returns a filtered list of methods matching <code>name</code>\n"],["main","RDoc::Store","RDoc/Store.html#method-i-main","()","<p>Gets the main page for this RDoc store.  This page is used as the root of the RDoc server.\n"],["main=","RDoc::Store","RDoc/Store.html#method-i-main-3D","(page)","<p>Sets the main page for this RDoc store.\n"],["make_message","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-make_message","(message)","<p>Adds useful info about the parser to <code>message</code>\n"],["make_variable_map","RDoc::Store","RDoc/Store.html#method-i-make_variable_map","(variables)","<p>Converts the variable =&gt; ClassModule map <code>variables</code> from a C parser into a variable =&gt; class name …\n"],["markup","RDoc::Text","RDoc/Text.html#method-i-markup","(text)","<p>Convert a string in markup format into HTML.\n<p>Requires the including class to implement #formatter\n"],["markup_code","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-markup_code","()","<p>Turns the method’s token stream into HTML.\n<p>Prepends line numbers if <code>options.line_numbers</code> is true. …\n"],["marshal_dump","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-marshal_dump","()","<p>Dumps this AnyMethod for use by ri.  See also #marshal_load\n"],["marshal_dump","RDoc::Attr","RDoc/Attr.html#method-i-marshal_dump","()","<p>Dumps this Attr for use by ri.  See also #marshal_load\n"],["marshal_dump","RDoc::Constant","RDoc/Constant.html#method-i-marshal_dump","()","<p>Dumps this Constant for use by ri.  See also #marshal_load\n"],["marshal_dump","RDoc::Context::Section","RDoc/Context/Section.html#method-i-marshal_dump","()","<p>Serializes this Section.  The title and parsed comment are saved, but not the section parent which must …\n"],["marshal_dump","RDoc::TopLevel","RDoc/TopLevel.html#method-i-marshal_dump","()","<p>Dumps this TopLevel for use by ri.  See also #marshal_load\n"],["marshal_load","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-marshal_load","(array)","<p>Loads this AnyMethod from <code>array</code>.  For a loaded AnyMethod the following methods will return cached values: …\n"],["marshal_load","RDoc::Attr","RDoc/Attr.html#method-i-marshal_load","(array)","<p>Loads this Attr from <code>array</code>.  For a loaded Attr the following methods will return cached values:\n<p>#full_name …\n"],["marshal_load","RDoc::Constant","RDoc/Constant.html#method-i-marshal_load","(array)","<p>Loads this Constant from <code>array</code>.  For a loaded Constant the following methods will return cached values: …\n"],["marshal_load","RDoc::Context::Section","RDoc/Context/Section.html#method-i-marshal_load","(array)","<p>De-serializes this Section.  The section parent must be restored manually.\n"],["mask_protected_sequences","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-mask_protected_sequences","()","<p>Escapes regexp handling sequences of text to prevent conversion to RDoc\n"],["match_length","Object","Object.html#method-i-match_length","(nth)",""],["matched","RDoc::Markup::Parser::MyStringScanner","RDoc/Markup/Parser/MyStringScanner.html#method-i-matched","()",""],["merge","RDoc::ClassModule","RDoc/ClassModule.html#method-i-merge","(class_module)","<p>Merges <code>class_module</code> into this ClassModule.\n<p>The data in <code>class_module</code> is preferred over the receiver.\n"],["merge","RDoc::Generator::POT::POEntry","RDoc/Generator/POT/POEntry.html#method-i-merge","(other_entry)","<p>Merges the PO entry with <code>other_entry</code>.\n"],["merge","RDoc::Markup::Document","RDoc/Markup/Document.html#method-i-merge","(other)","<p>When this is a collection of documents (#file is not set and this document contains only other documents …\n"],["merge","RDoc::Markup::Raw","RDoc/Markup/Raw.html#method-i-merge","(other)","<p>Appends <code>other</code>‘s parts\n"],["merged?","RDoc::Markup::Document","RDoc/Markup/Document.html#method-i-merged-3F","()","<p>Does this Document contain other Documents?\n"],["method","RDoc::MarkupReference","RDoc/MarkupReference.html#method-i-method","(foo, bar)","<p>This method is documented only by RDoc, except for these comments.\n<p>Click on the calling sequence to see …\n"],["method_document","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-method_document","(name, filtered)","<p>Builds a RDoc::Markup::Document from <code>found</code>, <code>klasses</code> and <code>includes</code>\n"],["method_file","RDoc::Store","RDoc/Store.html#method-i-method_file","(klass_name, method_name)","<p>Path to the ri data for <code>method_name</code> in <code>klass_name</code>\n"],["method_type","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-method_type","(selector)","<p>Returns the type of method (:both, :instance, :class) for <code>selector</code>\n"],["methods_by_type","RDoc::Context","RDoc/Context.html#method-i-methods_by_type","(section = nil)","<p>Breaks method_list into a nested hash by type (<code>&#39;class&#39;</code> or <code>&#39;instance&#39;</code>) and visibility …\n"],["methods_matching","RDoc::Context","RDoc/Context.html#method-i-methods_matching","(methods, singleton = false, &block)","<p>Yields AnyMethod and Attr entries matching the list of names in <code>methods</code>.\n"],["module","RDoc::Mixin","RDoc/Mixin.html#method-i-module","()","<p>Attempts to locate the included module object.  Returns the name if not known.\n<p>The scoping rules of Ruby …\n"],["module?","RDoc::ClassModule","RDoc/ClassModule.html#method-i-module-3F","()","<p>Does this object represent a module?\n"],["module?","RDoc::NormalModule","RDoc/NormalModule.html#method-i-module-3F","()","<p>This is a module, returns true\n"],["module_names","RDoc::Store","RDoc/Store.html#method-i-module_names","()","<p>Modules cache accessor.  An Array of all the module (and class) names in the store.\n"],["modules","RDoc::Context","RDoc/Context.html#method-i-modules","()","<p>Array of modules in this context\n"],["modules_hash","RDoc::Context","RDoc/Context.html#method-i-modules_hash","()","<p>Hash of modules keyed by module name\n"],["modules_hash","RDoc::Store","RDoc/Store.html#method-i-modules_hash","()","<p>Hash of all modules known to RDoc\n"],["name","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-name","()","<p>Method name\n<p>If the method has no assigned name, it extracts it from #call_seq.\n"],["name","RDoc::RI::Driver::NotFoundError","RDoc/RI/Driver/NotFoundError.html#method-i-name","()","<p>Name that wasn’t found\n"],["name=","RDoc::ClassModule","RDoc/ClassModule.html#method-i-name-3D","(new_name)","<p>Allows overriding the initial name.\n<p>Used for modules and classes that are constant aliases.\n"],["name_for_path","RDoc::ClassModule","RDoc/ClassModule.html#method-i-name_for_path","()","<p>Name to use to generate the url: modules and classes that are aliases for another module or class return …\n"],["name_for_path","RDoc::Context","RDoc/Context.html#method-i-name_for_path","()","<p>Name to use to generate the url. <code>#full_name</code> by default.\n"],["name_prefix","RDoc::Alias","RDoc/Alias.html#method-i-name_prefix","()","<p>‘::’ for the alias of a singleton method/attribute, ‘#’ for instance-level.\n"],["name_prefix","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-name_prefix","()","<p>‘::’ for a class method/attribute, ‘#’ for an instance method.\n"],["name_regexp","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-name_regexp","(name)","<p>Returns a regular expression for <code>name</code> that will match an RDoc::AnyMethod’s name.\n"],["new","RDoc::Alias","RDoc/Alias.html#method-c-new","(text, old_name, new_name, comment, singleton = false)","<p>Creates a new Alias with a token stream of <code>text</code> that aliases <code>old_name</code> to <code>new_name</code>, has <code>comment</code> and is …\n"],["new","RDoc::AnyMethod","RDoc/AnyMethod.html#method-c-new","(text, name)","<p>Creates a new AnyMethod with a token stream <code>text</code> and <code>name</code>\n"],["new","RDoc::Attr","RDoc/Attr.html#method-c-new","(text, name, rw, comment, singleton = false)","<p>Creates a new Attr with body <code>text</code>, <code>name</code>, read/write status <code>rw</code> and <code>comment</code>.  <code>singleton</code> marks this as a …\n"],["new","RDoc::ClassModule","RDoc/ClassModule.html#method-c-new","(name, superclass = nil)","<p>Creates a new ClassModule with <code>name</code> with optional <code>superclass</code>\n<p>This is a constructor for subclasses, and …\n"],["new","RDoc::CodeObject","RDoc/CodeObject.html#method-c-new","()","<p>Creates a new CodeObject that will document itself and its children\n"],["new","RDoc::Comment","RDoc/Comment.html#method-c-new","(text = nil, location = nil, language = nil)","<p>Creates a new comment with <code>text</code> that is found in the RDoc::TopLevel <code>location</code>.\n"],["new","RDoc::Constant","RDoc/Constant.html#method-c-new","(name, value, comment)","<p>Creates a new constant with <code>name</code>, <code>value</code> and <code>comment</code>\n"],["new","RDoc::Context","RDoc/Context.html#method-c-new","()","<p>Creates an unnamed empty context with public current visibility\n"],["new","RDoc::Context::Section","RDoc/Context/Section.html#method-c-new","(parent, title, comment)","<p>Creates a new section with <code>title</code> and <code>comment</code>\n"],["new","RDoc::CrossReference","RDoc/CrossReference.html#method-c-new","(context)","<p>Allows cross-references to be created based on the given <code>context</code> (RDoc::Context).\n"],["new","RDoc::ERBIO","RDoc/ERBIO.html#method-c-new","(str, safe_level = nil, legacy_trim_mode = nil, legacy_eoutvar = 'io', trim_mode: nil, eoutvar: 'io')","<p>Defaults <code>eoutvar</code> to ‘io’, otherwise is identical to ERB’s initialize\n"],["new","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-c-new","(store, options)","<p>Initialize a few instance variables before we start\n"],["new","RDoc::Generator::JsonIndex","RDoc/Generator/JsonIndex.html#method-c-new","(parent_generator, options)","<p>Creates a new generator.  <code>parent_generator</code> is used to determine the class_dir and file_dir of links in …\n"],["new","RDoc::Generator::POT::MessageExtractor","RDoc/Generator/POT/MessageExtractor.html#method-c-new","(store)","<p>Creates a message extractor for <code>store</code>.\n"],["new","RDoc::Generator::POT::PO","RDoc/Generator/POT/PO.html#method-c-new","()","<p>Creates an object that represents PO format.\n"],["new","RDoc::Generator::POT::POEntry","RDoc/Generator/POT/POEntry.html#method-c-new","(msgid, options = {})","<p>Creates a PO entry for <code>msgid</code>. Other valus can be specified by <code>options</code>.\n"],["new","RDoc::I18n::Locale","RDoc/I18n/Locale.html#method-c-new","(name)","<p>Creates a new locale object for <code>name</code> locale. <code>name</code> must follow IETF language tag format.\n"],["new","RDoc::I18n::Text","RDoc/I18n/Text.html#method-c-new","(raw)","<p>Creates a new i18n supported text for <code>raw</code> text.\n"],["new","RDoc::Markdown","RDoc/Markdown.html#method-c-new","(extensions = DEFAULT_EXTENSIONS, debug = false)","<p>Creates a new markdown parser that enables the given <code>extensions</code>.\n"],["new","RDoc::Markup","RDoc/Markup.html#method-c-new","(attribute_manager = nil)","<p>Take a block of text and use various heuristics to determine its structure (paragraphs, lists, and so …\n"],["new","RDoc::Markup::AttrSpan","RDoc/Markup/AttrSpan.html#method-c-new","(length, exclusive)","<p>Creates a new AttrSpan for <code>length</code> characters\n"],["new","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-c-new","()","<p>Creates a new attribute manager that understands bold, emphasized and teletype text.\n"],["new","RDoc::Markup::Attributes","RDoc/Markup/Attributes.html#method-c-new","()","<p>Creates a new attributes set.\n"],["new","RDoc::Markup::BlankLine","RDoc/Markup/BlankLine.html#method-c-new","()","<p>RDoc::Markup::BlankLine is a singleton\n"],["new","RDoc::Markup::Document","RDoc/Markup/Document.html#method-c-new","(*parts)","<p>Creates a new Document with <code>parts</code>\n"],["new","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-c-new","(options, markup = nil)","<p>Creates a new Formatter\n"],["new","RDoc::Markup::HardBreak","RDoc/Markup/HardBreak.html#method-c-new","()","<p>RDoc::Markup::HardBreak is a singleton\n"],["new","RDoc::Markup::Include","RDoc/Markup/Include.html#method-c-new","(file, include_path)","<p>Creates a new include that will import <code>file</code> from <code>include_path</code>\n"],["new","RDoc::Markup::IndentedParagraph","RDoc/Markup/IndentedParagraph.html#method-c-new","(indent, *parts)","<p>Creates a new IndentedParagraph containing <code>parts</code> indented with <code>indent</code> spaces\n"],["new","RDoc::Markup::List","RDoc/Markup/List.html#method-c-new","(type = nil, *items)","<p>Creates a new list of <code>type</code> with <code>items</code>.  Valid list types are: <code>:BULLET</code>, <code>:LABEL</code>, <code>:LALPHA</code>, <code>:NOTE</code>, <code>:NUMBER</code> …\n"],["new","RDoc::Markup::ListItem","RDoc/Markup/ListItem.html#method-c-new","(label = nil, *parts)","<p>Creates a new ListItem with an optional <code>label</code> containing <code>parts</code>\n"],["new","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-c-new","()","<p>Creates a new Parser.  See also ::parse\n"],["new","RDoc::Markup::Parser::MyStringScanner","RDoc/Markup/Parser/MyStringScanner.html#method-c-new","(input)",""],["new","RDoc::Markup::PreProcess","RDoc/Markup/PreProcess.html#method-c-new","(input_file_name, include_path)","<p>Creates a new pre-processor for <code>input_file_name</code> that will look for included files in <code>include_path</code>\n"],["new","RDoc::Markup::Raw","RDoc/Markup/Raw.html#method-c-new","(*parts)","<p>Creates a new Raw containing <code>parts</code>\n"],["new","RDoc::Markup::RegexpHandling","RDoc/Markup/RegexpHandling.html#method-c-new","(type, text)","<p>Creates a new regexp handling sequence of <code>type</code> with <code>text</code>\n"],["new","RDoc::Markup::Table","RDoc/Markup/Table.html#method-c-new","(header, align, body)",""],["new","RDoc::Markup::ToAnsi","RDoc/Markup/ToAnsi.html#method-c-new","(markup = nil)","<p>Creates a new ToAnsi visitor that is ready to output vibrant ANSI color!\n"],["new","RDoc::Markup::ToBs","RDoc/Markup/ToBs.html#method-c-new","(markup = nil)","<p>Returns a new ToBs that is ready for hot backspace action!\n"],["new","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-c-new","(options, markup = nil)","<p>Creates a new formatter that will output HTML\n"],["new","RDoc::Markup::ToHtmlCrossref","RDoc/Markup/ToHtmlCrossref.html#method-c-new","(options, from_path, context, markup = nil)","<p>Creates a new crossref resolver that generates links relative to <code>context</code> which lives at <code>from_path</code> in …\n"],["new","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-c-new","(options, characters = 100, paragraphs = 3, markup = nil)","<p>Creates a new ToHtmlSnippet formatter that will cut off the input on the next word boundary after the …\n"],["new","RDoc::Markup::ToLabel","RDoc/Markup/ToLabel.html#method-c-new","(markup = nil)","<p>Creates a new formatter that will output HTML-safe labels\n"],["new","RDoc::Markup::ToMarkdown","RDoc/Markup/ToMarkdown.html#method-c-new","(markup = nil)","<p>Creates a new formatter that will output Markdown format text\n"],["new","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-c-new","(markup = nil)","<p>Creates a new formatter that will output (mostly) RDoc markup\n"],["new","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-c-new","(markup = nil)","<p>Creates a new tt-only formatter.\n"],["new","RDoc::MethodAttr","RDoc/MethodAttr.html#method-c-new","(text, name)","<p>Creates a new MethodAttr from token stream <code>text</code> and method or attribute name <code>name</code>.\n<p>Usually this is called …\n"],["new","RDoc::Mixin","RDoc/Mixin.html#method-c-new","(name, comment)","<p>Creates a new Mixin for <code>name</code> with <code>comment</code>\n"],["new","RDoc::Parser","RDoc/Parser.html#method-c-new","(top_level, file_name, content, options, stats)","<p>Creates a new Parser storing <code>top_level</code>, <code>file_name</code>, <code>content</code>, <code>options</code> and <code>stats</code> in instance variables. …\n"],["new","RDoc::Parser::C","RDoc/Parser/C.html#method-c-new","(top_level, file_name, content, options, stats)","<p>Prepares for parsing a C file.  See RDoc::Parser#initialize for details on the arguments.\n"],["new","RDoc::Parser::RipperStateLex","RDoc/Parser/RipperStateLex.html#method-c-new","(code)",""],["new","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-c-new","(code)",""],["new","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-c-new","(top_level, file_name, content, options, stats)","<p>Creates a new Ruby parser.\n"],["new","RDoc::Parser::Simple","RDoc/Parser/Simple.html#method-c-new","(top_level, file_name, content, options, stats)","<p>Prepare to parse a plain file\n"],["new","RDoc::RD::BlockParser","RDoc/RD/BlockParser.html#method-c-new","()","<p>Creates a new RDoc::RD::BlockParser.  Use #parse to parse an rd-format document.\n"],["new","RDoc::RD::Inline","RDoc/RD/Inline.html#method-c-new","(rdoc, reference = rdoc)","<p>Creates a new Inline for <code>rdoc</code> and <code>reference</code>.\n<p><code>rdoc</code> may be another Inline or a String.  If <code>reference</code> is …\n"],["new","RDoc::RD::InlineParser","RDoc/RD/InlineParser.html#method-c-new","(block_parser)","<p>Creates a new parser for inline markup in the rd format.  The <code>block_parser</code> is used to for footnotes and …\n"],["new","RDoc::RDoc","RDoc/RDoc.html#method-c-new","()","<p>Creates a new RDoc::RDoc instance.  Call #document to parse files and generate documentation.\n"],["new","RDoc::RI::Driver","RDoc/RI/Driver.html#method-c-new","(initial_options = {})","<p>Creates a new driver using <code>initial_options</code> from ::process_args\n"],["new","RDoc::RI::Task","RDoc/RI/Task.html#method-c-new","(name = DEFAULT_NAMES)","<p>Create an ri task with the given name. See RDoc::Task for documentation on setting names.\n"],["new","RDoc::Require","RDoc/Require.html#method-c-new","(name, comment)","<p>Creates a new Require that loads <code>name</code> with <code>comment</code>\n"],["new","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-c-new","(spec, generate_rdoc = false, generate_ri = true)","<p>Creates a new documentation generator for <code>spec</code>.  RDoc and ri data generation can be enabled or disabled …\n"],["new","RDoc::Servlet","RDoc/Servlet.html#method-c-new","(server, stores, cache, mount_path = nil, extra_doc_dirs = [])","<p>Creates a new WEBrick servlet.\n<p>Use <code>mount_path</code> when mounting the servlet somewhere other than /.\n<p>Use <code>extra_doc_dirs</code> …\n"],["new","RDoc::Stats","RDoc/Stats.html#method-c-new","(store, num_files, verbosity = 1)","<p>Creates a new Stats that will have <code>num_files</code>.  <code>verbosity</code> defaults to 1 which will create an RDoc::Stats::Normal …\n"],["new","RDoc::Stats::Quiet","RDoc/Stats/Quiet.html#method-c-new","(num_files)","<p>Creates a new Quiet that will print nothing\n"],["new","RDoc::Store","RDoc/Store.html#method-c-new","(path = nil, type = nil)","<p>Creates a new Store of <code>type</code> that will load or save to <code>path</code>\n"],["new","RDoc::Store::MissingFileError","RDoc/Store/MissingFileError.html#method-c-new","(store, file, name)","<p>Creates a new MissingFileError for the missing <code>file</code> for the given <code>name</code> that should have been in the  …\n"],["new","RDoc::Task","RDoc/Task.html#method-c-new","(name = :rdoc)","<p>Create an RDoc task with the given name. See the RDoc::Task class overview for documentation.\n"],["new","RDoc::TomDoc","RDoc/TomDoc.html#method-c-new","()","<p>Creates a new TomDoc parser.  See also RDoc::Markup::parse\n"],["new","RDoc::TopLevel","RDoc/TopLevel.html#method-c-new","(absolute_name, relative_name = absolute_name)","<p>Creates a new TopLevel for the file at <code>absolute_name</code>.  If documentation is being generated outside the …\n"],["new_comment","RDoc::Parser::C","RDoc/Parser/C.html#method-i-new_comment","(text = nil, location = nil, language = nil)",""],["new_comment","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-new_comment","(comment, line_no = nil)","<p>Creates a comment with the correct format\n"],["newline!","RDoc::Markup::Parser::MyStringScanner","RDoc/Markup/Parser/MyStringScanner.html#method-i-newline-21","()",""],["next_token","RDoc::RD::InlineParser","RDoc/RD/InlineParser.html#method-i-next_token","()","<p>Returns the next token from the inline text\n"],["next_words_on_error","RDoc::RD::InlineParser","RDoc/RD/InlineParser.html#method-i-next_words_on_error","()","<p>Returns words following an error\n"],["nodoc","RDoc::Stats::Verbose","RDoc/Stats/Verbose.html#method-i-nodoc","(co)","<p>Returns a marker for RDoc::CodeObject <code>co</code> being undocumented\n"],["non_aliases","RDoc::ClassModule","RDoc/ClassModule.html#method-i-non_aliases","()","<p>Returns the classes and modules that are not constants aliasing another class or module. For use by formatters …\n"],["normalize","RDoc::Comment","RDoc/Comment.html#method-i-normalize","()","<p>Normalizes the text.  See RDoc::Text#normalize_comment for details\n"],["normalize","RDoc::Markup::Verbatim","RDoc/Markup/Verbatim.html#method-i-normalize","()","<p>Collapses 3+ newlines into two newlines\n"],["normalize_comment","RDoc::Text","RDoc/Text.html#method-i-normalize_comment","(text)","<p>Strips hashes, expands tabs then flushes <code>text</code> to the left\n"],["normalized_file_list","RDoc::RDoc","RDoc/RDoc.html#method-i-normalized_file_list","(relative_files, force_doc = false, exclude_pattern = nil)","<p>Given a list of files and directories, create a list of all the Ruby files they contain.\n<p>If <code>force_doc</code> …\n"],["not_found","RDoc::Servlet","RDoc/Servlet.html#method-i-not_found","(generator, req, res, message = nil)","<p>Returns a 404 page built by <code>generator</code> for <code>req</code> on <code>res</code>.\n"],["note","RDoc::Markdown","RDoc/Markdown.html#method-i-note","(label)","<p>Stores <code>label</code> as a note and fills in previously unknown note references.\n"],["note_for","RDoc::Markdown","RDoc/Markdown.html#method-i-note_for","(ref)","<p>Creates a new link for the footnote <code>reference</code> and adds the reference to\nthe note order list for proper ...\n"],["notes","RDoc::Markdown","RDoc/Markdown.html#method-i-notes","","<p>Enables the notes extension\n"],["object_class","RDoc::TopLevel","RDoc/TopLevel.html#method-i-object_class","()","<p>Returns the NormalClass “Object”, creating it if not found.\n<p>Records <code>self</code> as a location in “Object”. …\n"],["off_tags","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-off_tags","(res, item)","<p>Turns off tags for <code>item</code> on <code>res</code>\n"],["off_tags","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-off_tags","(res, item)","<p>Maintains a bitmask to allow HTML elements to be closed properly.  See RDoc::Markup::Formatter.\n"],["on_CHAR","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_CHAR","(tok, data)",""],["on_backref","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_backref","(tok, data)",""],["on_comma","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_comma","(tok, data)",""],["on_comment","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_comment","(tok, data)",""],["on_const","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_const","(tok, data)",""],["on_cvar","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_cvar","(tok, data)",""],["on_default","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_default","(event, tok, data)",""],["on_error","RDoc::RD::BlockParser","RDoc/RD/BlockParser.html#method-i-on_error","(et, ev, _values)","<p>Raises a ParseError when invalid formatting is found\n"],["on_error","RDoc::RD::InlineParser","RDoc/RD/InlineParser.html#method-i-on_error","(et, ev, values)","<p>Raises a ParseError when invalid formatting is found\n"],["on_float","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_float","(tok, data)",""],["on_gvar","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_gvar","(tok, data)",""],["on_heredoc_beg","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_heredoc_beg","(tok, data)",""],["on_heredoc_end","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_heredoc_end","(tok, data)",""],["on_ident","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_ident","(tok, data)",""],["on_ignored_nl","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_ignored_nl","(tok, data)",""],["on_ignored_sp","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_ignored_sp","(tok, data)",""],["on_imaginary","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_imaginary","(tok, data)",""],["on_int","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_int","(tok, data)",""],["on_ivar","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_ivar","(tok, data)",""],["on_kw","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_kw","(tok, data)",""],["on_lbrace","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_lbrace","(tok, data)",""],["on_lbracket","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_lbracket","(tok, data)",""],["on_lparen","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_lparen","(tok, data)",""],["on_nl","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_nl","(tok, data)",""],["on_op","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_op","(tok, data)",""],["on_period","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_period","(tok, data)",""],["on_rational","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_rational","(tok, data)",""],["on_rbrace","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_rbrace","(tok, data)",""],["on_rbracket","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_rbracket","(tok, data)",""],["on_rparen","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_rparen","(tok, data)",""],["on_sp","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_sp","(tok, data)",""],["on_symbeg","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_symbeg","(tok, data)",""],["on_tags","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-on_tags","(res, item)","<p>Turns on tags for <code>item</code> on <code>res</code>\n"],["on_tags","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-on_tags","(res, item)","<p>Maintains a bitmask to allow HTML elements to be closed properly.  See RDoc::Markup::Formatter.\n"],["on_tstring_beg","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_tstring_beg","(tok, data)",""],["on_tstring_end","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_tstring_end","(tok, data)",""],["ongoing_visibility=","RDoc::Context","RDoc/Context.html#method-i-ongoing_visibility-3D","(visibility)","<p>Changes the visibility for new methods to <code>visibility</code>\n"],["option_list","RDoc::Task","RDoc/Task.html#method-i-option_list","()","<p>List of options that will be supplied to RDoc\n"],["options","RDoc::CodeObject","RDoc/CodeObject.html#method-i-options","()","<p>The options instance from the store this CodeObject is attached to, or a default options instance if …\n"],["orig_initialize","RDoc::Markdown","RDoc/Markdown.html#method-i-orig_initialize","(extensions = DEFAULT_EXTENSIONS, debug = false)","<p>TODO remove when kpeg 0.10 is released\n"],["output_flag_file","RDoc::RDoc","RDoc/RDoc.html#method-i-output_flag_file","(op_dir)","<p>Return the path name of the flag file in an output directory.\n"],["output_name","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-output_name","(context)","<p>Name for output to HTML.  For class methods the full name with a “.” is used like <code>SomeClass.method_name</code> …\n"],["page","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-page","()","<p>Paginates output through a pager program.\n"],["page","RDoc::Store","RDoc/Store.html#method-i-page","(name)","<p>Returns the RDoc::TopLevel that is a text file and has the given <code>name</code>\n"],["page_file","RDoc::Store","RDoc/Store.html#method-i-page_file","(page_name)","<p>Path to the ri data for <code>page_name</code>\n"],["page_name","RDoc::TopLevel","RDoc/TopLevel.html#method-i-page_name","()","<p>Base name of this file without the extension\n"],["paging?","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-paging-3F","()","<p>Are we using a pager?\n"],["paragraph","RDoc::Markdown","RDoc/Markdown.html#method-i-paragraph","(parts)","<p>Creates an RDoc::Markup::Paragraph from <code>parts</code> and including\nextension-specific behavior\n"],["paragraph","RDoc::RD::BlockParser","RDoc/RD/BlockParser.html#method-i-paragraph","(value)","<p>Creates a paragraph for <code>value</code>\n"],["param_list","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-param_list","()","<p>A list of this method’s method and yield parameters.  <code>call-seq</code> params are preferred over parsed method …\n"],["param_seq","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-param_seq","()","<p>Pretty parameter list for this method.  If the method’s parameters were given by <code>call-seq</code> it is preferred …\n"],["parent","RDoc::CodeObject","RDoc/CodeObject.html#method-i-parent","()","<p>Our parent CodeObject.  The parent may be missing for classes loaded from legacy RI data stores.\n"],["parent_file_name","RDoc::CodeObject","RDoc/CodeObject.html#method-i-parent_file_name","()","<p>File name of our parent\n"],["parent_name","RDoc::CodeObject","RDoc/CodeObject.html#method-i-parent_name","()","<p>Name of our parent\n"],["parent_name","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-parent_name","()","<p>Name of our parent with special handling for un-marshaled methods\n"],["parse","RDoc::ClassModule","RDoc/ClassModule.html#method-i-parse","(comment_location)","<p>Parses <code>comment_location</code> into an RDoc::Markup::Document composed of multiple RDoc::Markup::Documents with …\n"],["parse","RDoc::Comment","RDoc/Comment.html#method-i-parse","()","<p>Parses the comment into an RDoc::Markup::Document.  The parsed document is cached until the text is changed. …\n"],["parse","RDoc::Context::Section","RDoc/Context/Section.html#method-i-parse","()","<p>Parses <code>comment_location</code> into an RDoc::Markup::Document composed of multiple RDoc::Markup::Documents with …\n"],["parse","RDoc::Markdown","RDoc/Markdown.html#method-i-parse","(markdown)","<p>Parses <code>markdown</code> into an RDoc::Document\n"],["parse","RDoc::Markdown","RDoc/Markdown.html#method-c-parse","(markdown)","<p>Parses the <code>markdown</code> document into an RDoc::Document using the default\nextensions.\n"],["parse","RDoc::Markup","RDoc/Markup.html#method-c-parse","(str)","<p>Parses <code>str</code> into an RDoc::Markup::Document.\n"],["parse","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-i-parse","(parent, indent = 0)","<p>Parses the tokens into an array of RDoc::Markup::XXX objects, and appends them to the passed <code>parent</code>  …\n"],["parse","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-c-parse","(str)","<p>Parses <code>str</code> into a Document.\n<p>Use RDoc::Markup#parse instead of this method.\n"],["parse","RDoc::Options","RDoc/Options.html#method-i-parse","(argv)","<p>Parses command line options.\n"],["parse","RDoc::Parser::RipperStateLex","RDoc/Parser/RipperStateLex.html#method-c-parse","(code)",""],["parse","RDoc::RD","RDoc/RD.html#method-c-parse","(rd)","<p>Parses <code>rd</code> source and returns an RDoc::Markup::Document.  If the <code>=begin</code> or <code>=end</code> lines are missing they …\n"],["parse","RDoc::RD::BlockParser","RDoc/RD/BlockParser.html#method-i-parse","(src)","<p>Parses <code>src</code> and returns an RDoc::Markup::Document.\n"],["parse","RDoc::RD::InlineParser","RDoc/RD/InlineParser.html#method-i-parse","(inline)","<p>Parses the <code>inline</code> text from RD format into RDoc format.\n"],["parse","RDoc::Text","RDoc/Text.html#method-i-parse","(text, format = 'rdoc')","<p>Normalizes <code>text</code> then builds a RDoc::Markup::Document from it\n"],["parse","RDoc::TomDoc","RDoc/TomDoc.html#method-c-parse","(text)","<p>Parses TomDoc from text\n<p>text &mdash; A String containing TomDoc-format text.\n\n<p>Examples\n"],["parse_alias","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_alias","(context, single, tk, comment)","<p>Parses an <code>alias</code> in <code>context</code> with <code>comment</code>\n"],["parse_attr","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_attr","(context, single, tk, comment)","<p>Creates an RDoc::Attr for the name following <code>tk</code>, setting the comment to <code>comment</code>.\n"],["parse_attr_accessor","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_attr_accessor","(context, single, tk, comment)","<p>Creates an RDoc::Attr for each attribute listed after <code>tk</code>, setting the comment for each to <code>comment</code>.\n"],["parse_call_parameters","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_call_parameters","(tk)","<p>Extracts call parameters from the token stream.\n"],["parse_class","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_class","(container, single, tk, comment)","<p>Parses a class in <code>context</code> with <code>comment</code>\n"],["parse_comment","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_comment","(container, tk, comment)","<p>Generates an RDoc::Method or RDoc::Attr from <code>comment</code> by looking for :method: or :attr: directives in …\n"],["parse_comment_tomdoc","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_comment_tomdoc","(container, tk, comment)","<p>Creates an RDoc::Method on <code>container</code> from <code>comment</code> if there is a Signature section in the comment\n"],["parse_constant","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_constant","(container, tk, comment, ignore_constants = false)","<p>Parses a constant in <code>context</code> with <code>comment</code>.  If <code>ignore_constants</code> is true, no found constants will be added …\n"],["parse_constant_visibility","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_constant_visibility","(container, single, tk)","<p>Parses a Module#private_constant or Module#public_constant call from <code>tk</code>.\n"],["parse_date","RDoc::Parser::ChangeLog","RDoc/Parser/ChangeLog.html#method-i-parse_date","(date)","<p>Parse date in ISO-8601, RFC-2822, or default of Git\n"],["parse_dot_doc_file","RDoc::RDoc","RDoc/RDoc.html#method-i-parse_dot_doc_file","(in_dir, filename)","<p>The .document file contains a list of file and directory name patterns, representing candidates for documentation. …\n"],["parse_entries","RDoc::Parser::ChangeLog","RDoc/Parser/ChangeLog.html#method-i-parse_entries","()","<p>Parses the entries in the ChangeLog.\n<p>Returns an Array of each ChangeLog entry in order of parsing.\n<p>A ChangeLog …\n"],["parse_entries","RDoc::Parser::ChangeLog::Git","RDoc/Parser/ChangeLog/Git.html#method-i-parse_entries","()",""],["parse_file","RDoc::RDoc","RDoc/RDoc.html#method-i-parse_file","(filename)","<p>Parses <code>filename</code> and returns an RDoc::TopLevel\n"],["parse_files","RDoc::RDoc","RDoc/RDoc.html#method-i-parse_files","(files)","<p>Parse each file on the command line, recursively entering directories.\n"],["parse_files_matching","RDoc::Parser","RDoc/Parser.html#method-c-parse_files_matching","(regexp)","<p>Record which file types this parser can understand.\n<p>It is ok to call this multiple times.\n"],["parse_info","RDoc::Parser::ChangeLog::Git","RDoc/Parser/ChangeLog/Git.html#method-i-parse_info","(info)",""],["parse_meta_attr","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_meta_attr","(context, single, tk, comment)","<p>Parses a meta-programmed attribute and creates an RDoc::Attr.\n<p>To create foo and bar attributes on class …\n"],["parse_meta_method","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_meta_method","(container, single, tk, comment)","<p>Parses a meta-programmed method\n"],["parse_method","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_method","(container, single, tk, comment)","<p>Parses a normal method defined by <code>def</code>\n"],["parse_method_dummy","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_method_dummy","(container)","<p>Parses a method that needs to be ignored.\n"],["parse_method_or_yield_parameters","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_method_or_yield_parameters","(method = nil, modifiers = RDoc::METHOD_MODIFIERS)","<p>Extracts <code>yield</code> parameters from <code>method</code>\n"],["parse_method_parameters","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_method_parameters","(method)","<p>Capture the method’s parameters. Along the way, look for a comment containing:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># yields: ....</span>\n</pre>\n<p>and add …\n"],["parse_method_params_and_body","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_method_params_and_body","(container, single, meth, added_container)","<p>Parses the parameters and body of <code>meth</code>\n"],["parse_module","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_module","(container, single, tk, comment)","<p>Parses an RDoc::NormalModule in <code>container</code> with <code>comment</code>\n"],["parse_name","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-parse_name","(name)","<p>Extracts the class, selector and method name parts from <code>name</code> like Foo::Bar#baz.\n<p>NOTE: Given Foo::Bar, …\n"],["parse_require","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_require","(context, comment)","<p>Parses an RDoc::Require in <code>context</code> containing <code>comment</code>\n"],["parse_rescue","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_rescue","()","<p>Parses a rescue\n"],["parse_statements","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_statements","(container, single = NORMAL, current_method = nil, comment = new_comment(''))","<p>The core of the Ruby parser.\n"],["parse_symbol_arg","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_symbol_arg","(no = nil)","<p>Parse up to <code>no</code> symbol arguments\n"],["parse_symbol_in_arg","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_symbol_in_arg","()","<p>Returns symbol text from the next token\n"],["parse_top_level_statements","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_top_level_statements","(container)","<p>Parses statements in the top-level <code>container</code>\n"],["parse_url","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-parse_url","(url)","<p>Extracts and a scheme, url and an anchor id from <code>url</code> and returns them.\n"],["parse_visibility","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_visibility","(container, single, tk)","<p>Determines the visibility in <code>container</code> from <code>tk</code>\n"],["parse_yield","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-parse_yield","(context, single, tk, method)","<p>Determines the block parameter for <code>context</code>\n"],["parseable?","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-parseable-3F","(text)","<p>Returns true if text is valid ruby syntax\n"],["parser=","RDoc::TopLevel","RDoc/TopLevel.html#method-i-parser-3D","(val)",""],["path","RDoc::ClassModule","RDoc/ClassModule.html#method-i-path","()","<p>Path to this class or module for use with HTML generator output.\n"],["path","RDoc::Constant","RDoc/Constant.html#method-i-path","()","<p>Path to this constant for use with HTML generator output.\n"],["path","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-path","()","<p>Path to this method for use with HTML generator output.\n"],["path","RDoc::RI::Paths","RDoc/RI/Paths.html#method-c-path","(system = true, site = true, home = true, gems = :latest, *extra_dirs)","<p>Returns existing directories from the selected documentation directories as an Array.\n<p>See also ::each …\n"],["path","RDoc::TopLevel","RDoc/TopLevel.html#method-i-path","()","<p>Path to this file for use with HTML generator output.\n"],["peek_read","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-peek_read","()","<p>Peek equivalent for get_tkread\n"],["peek_tk","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-peek_tk","()","<p>Peek at the next token, but don’t remove it from the stream\n"],["peek_token","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-i-peek_token","()","<p>Returns the next token on the stream without modifying the stream\n"],["peg_parse","RDoc::Markdown","RDoc/Markdown.html#method-i-peg_parse","(markdown)","<p>The internal kpeg parse method\n"],["percent_doc","RDoc::Stats","RDoc/Stats.html#method-i-percent_doc","()","<p>Calculates the percentage of items documented.\n"],["plain_html","RDoc::Context::Section","RDoc/Context/Section.html#method-i-plain_html","()","<p>The section’s title, or ‘Top Section’ if the title is nil.\n<p>This is used by the table of contents …\n"],["pop_token","RDoc::TokenStream","RDoc/TokenStream.html#method-i-pop_token","()","<p>Remove the last token from the collected tokens\n"],["pos","RDoc::Markup::Parser::MyStringScanner","RDoc/Markup/Parser/MyStringScanner.html#method-i-pos","()",""],["post_process","RDoc::Markup::PreProcess","RDoc/Markup/PreProcess.html#method-c-post_process","(&block)","<p>Adds a post-process handler for directives.  The handler will be called with the result RDoc::Comment …\n"],["post_processors","RDoc::Markup::PreProcess","RDoc/Markup/PreProcess.html#method-c-post_processors","()","<p>Registered post-processors\n"],["pretty_name","RDoc::Alias","RDoc/Alias.html#method-i-pretty_name","()",""],["pretty_name","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-pretty_name","()","<p>Method/attribute name with class/instance indicator\n"],["pretty_new_name","RDoc::Alias","RDoc/Alias.html#method-i-pretty_new_name","()","<p>New name with prefix ‘::’ or ‘#’.\n"],["pretty_old_name","RDoc::Alias","RDoc/Alias.html#method-i-pretty_old_name","()","<p>Old name with prefix ‘::’ or ‘#’.\n"],["prev_words_on_error","RDoc::RD::InlineParser","RDoc/RD/InlineParser.html#method-i-prev_words_on_error","(ev)","<p>Returns words before the error\n"],["print_alias","RDoc::Stats::Quiet","RDoc/Stats/Quiet.html#method-i-print_alias","(*)","<p>Prints when an alias is added\n"],["print_attribute","RDoc::Stats::Quiet","RDoc/Stats/Quiet.html#method-i-print_attribute","(*)","<p>Prints when an attribute is added\n"],["print_class","RDoc::Stats::Quiet","RDoc/Stats/Quiet.html#method-i-print_class","(*)","<p>Prints when a class is added\n"],["print_constant","RDoc::Stats::Quiet","RDoc/Stats/Quiet.html#method-i-print_constant","(*)","<p>Prints when a constant is added\n"],["print_file","RDoc::Stats::Normal","RDoc/Stats/Normal.html#method-i-print_file","(files_so_far, filename)","<p>Prints a file with a progress bar\n"],["print_file","RDoc::Stats::Quiet","RDoc/Stats/Quiet.html#method-i-print_file","(*)","<p>Prints when a file is added\n"],["print_method","RDoc::Stats::Quiet","RDoc/Stats/Quiet.html#method-i-print_method","(*)","<p>Prints when a method is added\n"],["print_module","RDoc::Stats::Quiet","RDoc/Stats/Quiet.html#method-i-print_module","(*)","<p>Prints when a module is added\n"],["process_args","RDoc::RI::Driver","RDoc/RI/Driver.html#method-c-process_args","(argv)","<p>Parses <code>argv</code> and returns a Hash of options\n"],["push","RDoc::Markup::Document","RDoc/Markup/Document.html#method-i-push","(*parts)","<p>Appends <code>parts</code> to the document\n"],["push","RDoc::Markup::List","RDoc/Markup/List.html#method-i-push","(*items)","<p>Appends <code>items</code> to the list\n"],["push","RDoc::Markup::ListItem","RDoc/Markup/ListItem.html#method-i-push","(*parts)","<p>Adds <code>parts</code> to the ListItem\n"],["push","RDoc::Markup::Raw","RDoc/Markup/Raw.html#method-i-push","(*texts)","<p>Appends <code>texts</code> onto this Paragraph\n"],["quiet","RDoc::Options","RDoc/Options.html#method-i-quiet","()","<p>Don’t display progress as we process the files\n"],["quiet=","RDoc::Options","RDoc/Options.html#method-i-quiet-3D","(bool)","<p>Set quietness to <code>bool</code>\n"],["raw_path","RDoc::RI::Paths","RDoc/RI/Paths.html#method-c-raw_path","(system, site, home, gems, *extra_dirs)","<p>Returns selected documentation directories including nonexistent directories.\n<p>See also ::each\n"],["rb_scan_args","RDoc::Parser::C","RDoc/Parser/C.html#method-i-rb_scan_args","(method_body)","<p>Extracts parameters from the <code>method_body</code> and returns a method parameter string.  Follows 1.9.3dev’s …\n"],["rdoc_installed?","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-rdoc_installed-3F","()","<p>Is rdoc documentation installed?\n"],["rdoc_task_description","RDoc::Task","RDoc/Task.html#method-i-rdoc_task_description","()","<p>Task description for the rdoc task or its renamed equivalent\n"],["read_directive","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-read_directive","(allowed)","<p>Directives are modifier comments that can appear after class, module, or method names. For example:\n\n<pre>def ...</pre>\n"],["read_documentation_modifiers","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-read_documentation_modifiers","(context, allowed)","<p>Handles directives following the definition for <code>context</code> (any RDoc::CodeObject) if the directives are …\n"],["read_file","RDoc::Encoding","RDoc/Encoding.html#method-c-read_file","(filename, encoding, force_transcode = false)","<p>Reads the contents of <code>filename</code> and handles any encoding directives in the file.\n<p>The content will be converted …\n"],["record_location","RDoc::CodeObject","RDoc/CodeObject.html#method-i-record_location","(top_level)","<p>Records the RDoc::TopLevel (file) where this code object was defined\n"],["record_location","RDoc::Context","RDoc/Context.html#method-i-record_location","(top_level)","<p>Record <code>top_level</code> as a file <code>self</code> is in.\n"],["reference","RDoc::Markdown","RDoc/Markdown.html#method-i-reference","(label, link)","<p>Stores <code>label</code> as a reference to <code>link</code> and fills in previously unknown\nlink references.\n"],["register","RDoc::Markup::PreProcess","RDoc/Markup/PreProcess.html#method-c-register","(directive, &block)","<p>Registers <code>directive</code> as one handled by RDoc.  If a block is given the directive will be replaced by the …\n"],["registered","RDoc::Markup::PreProcess","RDoc/Markup/PreProcess.html#method-c-registered","()","<p>Registered directives\n"],["remove","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-remove","()","<p>Removes generated RDoc and ri data\n"],["remove_coding_comment","RDoc::Parser::Simple","RDoc/Parser/Simple.html#method-i-remove_coding_comment","(text)","<p>Removes the encoding magic comment from <code>text</code>\n"],["remove_comment","RDoc::Context::Section","RDoc/Context/Section.html#method-i-remove_comment","(comment)","<p>Removes a comment from this section if it is from the same file as <code>comment</code>\n"],["remove_commented_out_lines","RDoc::Parser::C","RDoc/Parser/C.html#method-i-remove_commented_out_lines","()","<p>Removes lines that are commented out that might otherwise get picked up when scanning for classes and …\n"],["remove_from_documentation?","RDoc::Context","RDoc/Context.html#method-i-remove_from_documentation-3F","()","<p>Should we remove this context from the documentation?\n<p>The answer is yes if:\n<p>#received_nodoc is <code>true</code>\n"],["remove_frozen_string_literal","RDoc::Encoding","RDoc/Encoding.html#method-c-remove_frozen_string_literal","(string)",""],["remove_invisible","RDoc::Context","RDoc/Context.html#method-i-remove_invisible","(min_visibility)","<p>Removes methods and attributes with a visibility less than <code>min_visibility</code>.\n"],["remove_magic_comment","RDoc::Encoding","RDoc/Encoding.html#method-c-remove_magic_comment","(string)","<p>Removes magic comments and shebang\n"],["remove_modeline","RDoc::Parser","RDoc/Parser.html#method-c-remove_modeline","(content)","<p>Removes an emacs-style modeline from the first line of the document\n"],["remove_nodoc","RDoc::Store","RDoc/Store.html#method-i-remove_nodoc","(all_hash)","<p>Removes from <code>all_hash</code> the contexts that are nodoc or have no content.\n<p>See RDoc::Context#remove_from_documentation? …\n"],["remove_nodoc_children","RDoc::ClassModule","RDoc/ClassModule.html#method-i-remove_nodoc_children","()","<p>Updates the child modules or classes of class/module <code>parent</code> by deleting the ones that have been removed …\n"],["remove_private","RDoc::Comment","RDoc/Comment.html#method-i-remove_private","()","<p>Removes private sections from this comment.  Private sections are flush to the comment marker and start …\n"],["remove_private_comment","RDoc::Parser::Simple","RDoc/Parser/Simple.html#method-i-remove_private_comment","(comment)","<p>Removes private comments.\n<p>Unlike RDoc::Comment#remove_private this implementation only looks for two dashes …\n"],["remove_siginfo_handler","RDoc::RDoc","RDoc/RDoc.html#method-i-remove_siginfo_handler","()","<p>Removes a siginfo handler and replaces the previous\n"],["remove_token_listener","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-remove_token_listener","(obj)","<p>Removes the token listener <code>obj</code>\n"],["remove_unparseable","RDoc::RDoc","RDoc/RDoc.html#method-i-remove_unparseable","(files)","<p>Removes file extensions known to be unparseable from <code>files</code> and TAGS files for emacs and vim.\n"],["render","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-render","(file_name)","<p>Renders the ERb contained in <code>file_name</code> relative to the template directory and returns the result based …\n"],["render_template","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-render_template","(template_file, out_file = nil)","<p>Load and render the erb template in the given <code>template_file</code> and write it out to <code>out_file</code>.\n<p>Both <code>template_file</code> …\n"],["report","RDoc::Stats","RDoc/Stats.html#method-i-report","()","<p>Returns a report on which items are not documented\n"],["report_attributes","RDoc::Stats","RDoc/Stats.html#method-i-report_attributes","(cm)","<p>Returns a report on undocumented attributes in ClassModule <code>cm</code>\n"],["report_class_module","RDoc::Stats","RDoc/Stats.html#method-i-report_class_module","(cm)","<p>Returns a report on undocumented items in ClassModule <code>cm</code>\n"],["report_constants","RDoc::Stats","RDoc/Stats.html#method-i-report_constants","(cm)","<p>Returns a report on undocumented constants in ClassModule <code>cm</code>\n"],["report_methods","RDoc::Stats","RDoc/Stats.html#method-i-report_methods","(cm)","<p>Returns a report on undocumented methods in ClassModule <code>cm</code>\n"],["rerdoc_task_description","RDoc::Task","RDoc/Task.html#method-i-rerdoc_task_description","()","<p>Task description for the rerdoc task or its renamed description\n"],["reset","RDoc::Markup::PreProcess","RDoc/Markup/PreProcess.html#method-c-reset","()","<p>Clears all registered directives and post-processors\n"],["reset","RDoc::Parser::RipperStateLex::InnerStateLex","RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-reset","()",""],["reset","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-reset","()","<p>Resets the tools\n"],["resolve","RDoc::CrossReference","RDoc/CrossReference.html#method-i-resolve","(name, text)","<p>Returns a reference to <code>name</code>.\n<p>If the reference is found and <code>name</code> is not documented <code>text</code> will be returned. …\n"],["resolve_aliases","RDoc::Context","RDoc/Context.html#method-i-resolve_aliases","(added)","<p>Tries to resolve unmatched aliases when a method or attribute has just been added.\n"],["resolve_method","RDoc::CrossReference","RDoc/CrossReference.html#method-i-resolve_method","(name)",""],["retrieve_comment_body","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-retrieve_comment_body","(tk)","<p>Retrieve comment body without =begin/=end\n"],["ri_installed?","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-ri_installed-3F","()","<p>Is ri data installed?\n"],["ri_paths","RDoc::Servlet","RDoc/Servlet.html#method-i-ri_paths","(&block)","<p>Enumerates the ri paths.  See RDoc::RI::Paths#each\n"],["root","RDoc::Servlet","RDoc/Servlet.html#method-i-root","(req, res)","<p>Generates the root page on <code>res</code>.  <code>req</code> is ignored.\n"],["root_search","RDoc::Servlet","RDoc/Servlet.html#method-i-root_search","(req, res)","<p>Generates a search index for the root page on <code>res</code>.  <code>req</code> is ignored.\n"],["ruby?","RDoc::Markup::Verbatim","RDoc/Markup/Verbatim.html#method-i-ruby-3F","()","<p>Is this verbatim section Ruby code?\n"],["run","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-run","()","<p>Looks up and displays ri data according to the options given.\n"],["run","RDoc::RI::Driver","RDoc/RI/Driver.html#method-c-run","(argv = ARGV)","<p>Runs the ri command line executable using <code>argv</code>\n"],["sanitize_path","RDoc::Options","RDoc/Options.html#method-i-sanitize_path","(path)","<p>Removes directories from <code>path</code> that are outside the current directory\n"],["save","RDoc::Store","RDoc/Store.html#method-i-save","()","<p>Saves all entries in the store\n"],["save_cache","RDoc::Store","RDoc/Store.html#method-i-save_cache","()","<p>Writes the cache file for this store\n"],["save_class","RDoc::Store","RDoc/Store.html#method-i-save_class","(klass)","<p>Writes the ri data for <code>klass</code> (or module)\n"],["save_method","RDoc::Store","RDoc/Store.html#method-i-save_method","(klass, method)","<p>Writes the ri data for <code>method</code> on <code>klass</code>\n"],["save_page","RDoc::Store","RDoc/Store.html#method-i-save_page","(page)","<p>Writes the ri data for <code>page</code>\n"],["scan","RDoc::Markup::Parser::MyStringScanner","RDoc/Markup/Parser/MyStringScanner.html#method-i-scan","(re)",""],["scan","RDoc::Parser::C","RDoc/Parser/C.html#method-i-scan","()","<p>Extracts the classes, modules, methods, attributes, constants and aliases from a C file and returns an …\n"],["scan","RDoc::Parser::ChangeLog","RDoc/Parser/ChangeLog.html#method-i-scan","()","<p>Converts the ChangeLog into an RDoc::Markup::Document\n"],["scan","RDoc::Parser::Markdown","RDoc/Parser/Markdown.html#method-i-scan","()","<p>Creates an Markdown-format TopLevel for the given file.\n"],["scan","RDoc::Parser::RD","RDoc/Parser/RD.html#method-i-scan","()","<p>Creates an rd-format TopLevel for the given file.\n"],["scan","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-scan","()","<p>Scans this Ruby file for Ruby constructs\n"],["scan","RDoc::Parser::Simple","RDoc/Parser/Simple.html#method-i-scan","()","<p>Extract the file contents and attach them to the TopLevel as a comment\n"],["search_record","RDoc::ClassModule","RDoc/ClassModule.html#method-i-search_record","()","<p>Search record used by RDoc::Generator::JsonIndex\n"],["search_record","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-search_record","()","<p>Used by RDoc::Generator::JsonIndex to create a record for the search engine.\n"],["search_record","RDoc::TopLevel","RDoc/TopLevel.html#method-i-search_record","()","<p>Search record used by RDoc::Generator::JsonIndex\n"],["search_string","RDoc::Generator::JsonIndex","RDoc/Generator/JsonIndex.html#method-i-search_string","(string)","<p>Removes whitespace and downcases <code>string</code>\n"],["section","RDoc::CodeObject","RDoc/CodeObject.html#method-i-section","()","<p>The section this CodeObject is in.  Sections allow grouping of constants, attributes and methods inside …\n"],["section_contents","RDoc::Context","RDoc/Context.html#method-i-section_contents","()","<p>Returns RDoc::Context::Section objects referenced in this context for use in a table of contents.\n"],["sections","RDoc::Context","RDoc/Context.html#method-i-sections","()","<p>Sections in this context\n"],["see","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-see","()","<p>A method/attribute to look at, in particular if this method/attribute has no documentation.\n<p>It can be …\n"],["set_attrs","RDoc::Markup::AttrSpan","RDoc/Markup/AttrSpan.html#method-i-set_attrs","(start, length, bits)","<p>Toggles <code>bits</code> from <code>start</code> to <code>length</code>\n"],["set_constant_visibility_for","RDoc::Context","RDoc/Context.html#method-i-set_constant_visibility_for","(names, visibility)","<p>Given an array <code>names</code> of constants, set the visibility of each constant to <code>visibility</code>\n"],["set_current_section","RDoc::Context","RDoc/Context.html#method-i-set_current_section","(title, comment)","<p>Sets the current section to a section with <code>title</code>.  See also #add_section\n"],["set_eoutvar","RDoc::ERBIO","RDoc/ERBIO.html#method-i-set_eoutvar","(compiler, io_variable)","<p>Instructs <code>compiler</code> how to write to <code>io_variable</code>\n"],["set_eoutvar","RDoc::ERBPartial","RDoc/ERBPartial.html#method-i-set_eoutvar","(compiler, eoutvar = '_erbout')","<p>Overrides <code>compiler</code> startup to set the <code>eoutvar</code> to an empty string only if it isn’t already set.\n"],["set_visibility_for","RDoc::Context","RDoc/Context.html#method-i-set_visibility_for","(methods, visibility, singleton = false)","<p>Given an array <code>methods</code> of method names, set the visibility of each to <code>visibility</code>\n"],["setup","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-setup","()","<p>Prepares for generation of output from the current directory\n"],["setup","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-setup","()","<p>Prepares the spec for documentation generation\n"],["setup_generator","RDoc::Options","RDoc/Options.html#method-i-setup_generator","(generator_name = @generator_name)","<p>Set up an output generator for the named <code>generator_name</code>.\n<p>If the found generator responds to :setup_options …\n"],["setup_output_dir","RDoc::RDoc","RDoc/RDoc.html#method-i-setup_output_dir","(dir, force)","<p>Create an output dir if it doesn’t exist. If it does exist, but doesn’t contain the flag file …\n"],["setup_pager","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-setup_pager","()","<p>Sets up a pager program to pass output through.  Tries the RI_PAGER and PAGER environment variables followed …\n"],["setup_scanner","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-i-setup_scanner","(input)","<p>Creates the StringScanner\n"],["show_documentation","RDoc::Servlet","RDoc/Servlet.html#method-i-show_documentation","(req, res)","<p>Displays documentation for <code>req</code> on <code>res</code>, whether that be HTML or some asset.\n"],["signature","RDoc::TomDoc","RDoc/TomDoc.html#method-c-signature","(comment)","<p>Extracts the Signature section’s method signature\n<p>comment &mdash; An RDoc::Comment that will be parsed and …\n\n"],["site_dir","RDoc::RI::Paths","RDoc/RI/Paths.html#method-c-site_dir","()","<p>The location of ri data installed into the site dir.\n<p>Historically this was available for documentation …\n"],["skip","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-i-skip","(token_type, error = true)","<p>Skips the next token if its type is <code>token_type</code>.\n<p>Optionally raises an error if the next token is not of …\n"],["skip_for_variable","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-skip_for_variable","()","<p>skip the var [in] part of a ‘for’ statement\n"],["skip_method","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-skip_method","(container)","<p>Skips the next method in <code>container</code>\n"],["skip_optional_do_after_expression","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-skip_optional_do_after_expression","()","<p>while, until, and for have an optional do\n"],["skip_parentheses","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-skip_parentheses","(&block)","<p>Skip opening parentheses and yield the block. Skip closing parentheses too when exists.\n"],["skip_tkspace","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-skip_tkspace","()","<p>Skips whitespace tokens including newlines\n"],["skip_tkspace_comment","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-skip_tkspace_comment","(skip_nl = true)","<p>Skip spaces until a comment is found\n"],["skip_tkspace_without_nl","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-skip_tkspace_without_nl","()","<p>Skips whitespace tokens excluding newlines\n"],["snippet","RDoc::Text","RDoc/Text.html#method-i-snippet","(text, limit = 100)","<p>The first <code>limit</code> characters of <code>text</code> as HTML\n"],["sort_sections","RDoc::Context","RDoc/Context.html#method-i-sort_sections","()","<p>Sorts sections alphabetically (default) or in TomDoc fashion (none, Public, Internal, Deprecated)\n"],["source","RDoc::Store","RDoc/Store.html#method-i-source","()","<p>Source of the contents of this store.\n<p>For a store from a gem the source is the gem name.  For a store …\n"],["split_into_flow","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-split_into_flow","()","<p>Splits the string into chunks by attribute change\n"],["start_accepting","RDoc::Markup::ToAnsi","RDoc/Markup/ToAnsi.html#method-i-start_accepting","()","<p>Starts accepting with a reset screen\n"],["start_accepting","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-start_accepting","()","<p>Prepares the visitor for HTML generation\n"],["start_accepting","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-start_accepting","()","<p>Prepares the visitor for HTML snippet generation\n"],["start_accepting","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-start_accepting","()","<p>Prepares the visitor for text generation\n"],["start_accepting","RDoc::Markup::ToTableOfContents","RDoc/Markup/ToTableOfContents.html#method-i-start_accepting","()","<p>Prepares the visitor for text generation\n"],["start_accepting","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-start_accepting","()","<p>Prepares the visitor for gathering tt sections\n"],["start_collecting_tokens","RDoc::TokenStream","RDoc/TokenStream.html#method-i-start_collecting_tokens","()",""],["start_doc","RDoc::CodeObject","RDoc/CodeObject.html#method-i-start_doc","()","<p>Enable capture of documentation unless documentation has been turned off by :enddoc:\n"],["start_server","RDoc::RI::Driver","RDoc/RI/Driver.html#method-i-start_server","()","<p>Starts a WEBrick server for ri.\n"],["stop_doc","RDoc::CodeObject","RDoc/CodeObject.html#method-i-stop_doc","()","<p>Disable capture of documentation\n"],["store=","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-store-3D","(store)","<p>Sets the store for this method and its referenced code objects.\n"],["store=","RDoc::ClassModule","RDoc/ClassModule.html#method-i-store-3D","(store)","<p>Sets the store for this class or module and its contained code objects.\n"],["store=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-store-3D","(store)","<p>Sets the <code>store</code> that contains this CodeObject\n"],["store=","RDoc::Constant","RDoc/Constant.html#method-i-store-3D","(store)","<p>Sets the store for this class or module and its contained code objects.\n"],["store=","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-store-3D","(store)","<p>Sets the store for this class or module and its contained code objects.\n"],["store=","RDoc::Mixin","RDoc/Mixin.html#method-i-store-3D","(store)","<p>Sets the store for this class or module and its contained code objects.\n"],["store=","RDoc::RDoc","RDoc/RDoc.html#method-i-store-3D","(store)","<p>Sets the current documentation tree to <code>store</code> and sets the store’s rdoc driver to this instance.\n"],["store_for","RDoc::Servlet","RDoc/Servlet.html#method-i-store_for","(source_name)","<p>Returns an RDoc::Store for the given <code>source_name</code> (‘ruby’ or a gem name).\n"],["strike","RDoc::Markdown","RDoc/Markdown.html#method-i-strike","","<p>Enables the strike extension\n"],["strip_hashes","RDoc::Text","RDoc/Text.html#method-i-strip_hashes","(text)","<p>Strips leading # characters from <code>text</code>\n"],["strip_newlines","RDoc::Text","RDoc/Text.html#method-i-strip_newlines","(text)","<p>Strips leading and trailing n characters from <code>text</code>\n"],["strip_stars","RDoc::Text","RDoc/Text.html#method-i-strip_stars","(text)","<p>Strips /* */ style comments\n"],["strong","RDoc::Markdown","RDoc/Markdown.html#method-i-strong","(text)","<p>Wraps <code>text</code> in strong markup for rdoc inline formatting\n"],["summary","RDoc::Stats","RDoc/Stats.html#method-i-summary","()","<p>Returns a summary of the collected statistics.\n"],["superclass","RDoc::ClassModule","RDoc/ClassModule.html#method-i-superclass","()","<p>Get the superclass of this class.  Attempts to retrieve the superclass object, returns the name if it …\n"],["superclass","RDoc::NormalModule","RDoc/NormalModule.html#method-i-superclass","()","<p>Modules don’t have one, raises NoMethodError\n"],["superclass=","RDoc::ClassModule","RDoc/ClassModule.html#method-i-superclass-3D","(superclass)","<p>Set the superclass of this class to <code>superclass</code>\n"],["superclass_method","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-superclass_method","()","<p>For methods that <code>super</code>, find the superclass method that would be called.\n"],["suppress","RDoc::CodeObject","RDoc/CodeObject.html#method-i-suppress","()","<p>Use this to suppress a CodeObject and all its children until the next file it is seen in or documentation …\n"],["suppressed?","RDoc::CodeObject","RDoc/CodeObject.html#method-i-suppressed-3F","()","<p>Has this class been suppressed?\n<p>See also #suppress\n"],["suppressed?","RDoc::Markup::ToTableOfContents","RDoc/Markup/ToTableOfContents.html#method-i-suppressed-3F","(heading)","<p>Returns true if <code>heading</code> is below the display threshold\n"],["system_dir","RDoc::RI::Paths","RDoc/RI/Paths.html#method-c-system_dir","()","<p>The location of the built-in ri data.\n<p>This data is built automatically when ‘make` is run when Ruby is …\n"],["table_of_contents","RDoc::Markup::Document","RDoc/Markup/Document.html#method-i-table_of_contents","()","<p>Returns an Array of headings in the document.\n<p>Require ‘rdoc/markup/formatter’ before calling this …\n"],["template_dir_for","RDoc::Options","RDoc/Options.html#method-i-template_dir_for","(template)","<p>Finds the template dir for <code>template</code>\n"],["template_for","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-template_for","(file, page = true, klass = ERB)","<p>Retrieves a cache template for <code>file</code>, if present, or fills the cache.\n"],["template_result","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-template_result","(template, context, template_file)","<p>Creates the result for <code>template</code> with <code>context</code>.  If an error is raised a Pathname <code>template_file</code> will indicate …\n"],["text","RDoc::Markup::IndentedParagraph","RDoc/Markup/IndentedParagraph.html#method-i-text","(hard_break = nil)","<p>Joins the raw paragraph text and converts inline HardBreaks to the <code>hard_break</code> text followed by the indent. …\n"],["text","RDoc::Markup::Paragraph","RDoc/Markup/Paragraph.html#method-i-text","(hard_break = '')","<p>Joins the raw paragraph text and converts inline HardBreaks to the <code>hard_break</code> text.\n"],["text","RDoc::Markup::Raw","RDoc/Markup/Raw.html#method-i-text","()","<p>The raw text\n"],["text","RDoc::Markup::Verbatim","RDoc/Markup/Verbatim.html#method-i-text","()","<p>The text of the section\n"],["text=","RDoc::Comment","RDoc/Comment.html#method-i-text-3D","(text)","<p>Replaces this comment’s text with <code>text</code> and resets the parsed document.\n<p>An error is raised if the comment …\n"],["text?","RDoc::TopLevel","RDoc/TopLevel.html#method-i-text-3F","()","<p>Is this TopLevel from a text file instead of a source code file?\n"],["time_delta_string","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-time_delta_string","(seconds)","<p>Return a string describing the amount of time in the given number of seconds in terms a human can understand …\n"],["title","RDoc::Store","RDoc/Store.html#method-i-title","()","<p>Gets the title for this RDoc store.  This is used as the title in each page on the RDoc server\n"],["title=","RDoc::Store","RDoc/Store.html#method-i-title-3D","(title)","<p>Sets the title page for this RDoc store.\n"],["tk_nl?","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-tk_nl-3F","(tk)",""],["to_html","RDoc::Markup::ToHtml","RDoc/Markup/ToHtml.html#method-i-to_html","(item)","<p>Converts <code>item</code> to HTML using RDoc::Text#to_html\n"],["to_html","RDoc::Text","RDoc/Text.html#method-i-to_html","(text)","<p>Converts ampersand, dashes, ellipsis, quotes, copyright and registered trademark symbols in <code>text</code> to properly …\n"],["to_html","RDoc::TokenStream","RDoc/TokenStream.html#method-c-to_html","(token_stream)","<p>Converts <code>token_stream</code> to HTML wrapping various tokens with <code>&lt;span&gt;</code> elements. Some tokens types are …\n"],["to_s","RDoc::Generator::POT::PO","RDoc/Generator/POT/PO.html#method-i-to_s","()","<p>Returns PO format text for the PO.\n"],["to_s","RDoc::Generator::POT::POEntry","RDoc/Generator/POT/POEntry.html#method-i-to_s","()","<p>Returns the PO entry in PO format.\n"],["to_toc","RDoc::Markup::ToTableOfContents","RDoc/Markup/ToTableOfContents.html#method-c-to_toc","()","<p>Singleton for table-of-contents generation\n"],["token_listener","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-token_listener","(obj)","<p>Has <code>obj</code> listen to tokens\n"],["token_stream","RDoc::TokenStream","RDoc/TokenStream.html#method-i-token_stream","()","<p>Current token stream\n"],["tokenize","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-i-tokenize","(input)","<p>Turns text <code>input</code> into a stream of tokens\n"],["tokenize","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-c-tokenize","(str)","<p>Returns a token stream for <code>str</code>, for testing\n"],["tokenize","RDoc::TomDoc","RDoc/TomDoc.html#method-i-tokenize","(text)","<p>Turns text into an Array of tokens\n<p>text &mdash; A String containing TomDoc-format text.\n\n<p>Returns\n"],["tokens_to_s","RDoc::TokenStream","RDoc/TokenStream.html#method-i-tokens_to_s","()","<p>Returns a string representation of the token stream\n"],["tomdoc?","RDoc::Comment","RDoc/Comment.html#method-i-tomdoc-3F","()","<p>Returns true if this comment is in TomDoc format.\n"],["top_level","RDoc::Context","RDoc/Context.html#method-i-top_level","()","<p>Return the TopLevel that owns us\n"],["top_level","RDoc::Require","RDoc/Require.html#method-i-top_level","()","<p>The RDoc::TopLevel corresponding to this require, or <code>nil</code> if not found.\n"],["translate","RDoc::I18n::Locale","RDoc/I18n/Locale.html#method-i-translate","(message)","<p>Translates the <code>message</code> into locale. If there is no translation messages for <code>message</code> in locale, <code>message</code> …\n"],["translate","RDoc::I18n::Text","RDoc/I18n/Text.html#method-i-translate","(locale)","<p>Translates raw text into <code>locale</code>.\n"],["truncate","RDoc::Markup::ToHtmlSnippet","RDoc/Markup/ToHtmlSnippet.html#method-i-truncate","(text)","<p>Truncates <code>text</code> at the end of the first word after the character_limit.\n"],["tt?","RDoc::Markup::Formatter","RDoc/Markup/Formatter.html#method-i-tt-3F","(tag)","<p>Is <code>tag</code> a tt tag?\n"],["tt_sections","RDoc::Markup::ToTtOnly","RDoc/Markup/ToTtOnly.html#method-i-tt_sections","(text)","<p>Extracts tt sections from <code>text</code>\n"],["type","RDoc::ClassModule","RDoc/ClassModule.html#method-i-type","()","<p>‘module’ or ‘class’\n"],["type","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-type","()","<p>Type of method/attribute (class or instance)\n"],["undoc_params","RDoc::Stats","RDoc/Stats.html#method-i-undoc_params","(method)","<p>Determines which parameters in <code>method</code> were not documented.  Returns a total parameter count and an Array …\n"],["unget","RDoc::Markup::Parser","RDoc/Markup/Parser.html#method-i-unget","()","<p>Returns the current token to the token stream\n"],["unget_tk","RDoc::Parser::RubyTools","RDoc/Parser/RubyTools.html#method-i-unget_tk","(tk)","<p>Returns <code>tk</code> to the scanner\n"],["unique_classes","RDoc::Store","RDoc/Store.html#method-i-unique_classes","()","<p>Returns the unique classes discovered by RDoc.\n<p>::complete must have been called prior to using this method. …\n"],["unique_classes_and_modules","RDoc::Store","RDoc/Store.html#method-i-unique_classes_and_modules","()","<p>Returns the unique classes and modules discovered by RDoc. ::complete must have been called prior to …\n"],["unique_modules","RDoc::Store","RDoc/Store.html#method-i-unique_modules","()","<p>Returns the unique modules discovered by RDoc. ::complete must have been called prior to using this method. …\n"],["unmask_protected_sequences","RDoc::Markup::AttributeManager","RDoc/Markup/AttributeManager.html#method-i-unmask_protected_sequences","()","<p>Unescapes regexp handling sequences of text\n"],["unscan","RDoc::Markup::Parser::MyStringScanner","RDoc/Markup/Parser/MyStringScanner.html#method-i-unscan","(s)",""],["update_aliases","RDoc::ClassModule","RDoc/ClassModule.html#method-i-update_aliases","()","<p>Updates the child modules &amp; classes by replacing the ones that are aliases through a constant.\n<p>The …\n"],["update_extends","RDoc::ClassModule","RDoc/ClassModule.html#method-i-update_extends","()","<p>Deletes from #extends those whose module has been removed from the documentation.\n"],["update_includes","RDoc::ClassModule","RDoc/ClassModule.html#method-i-update_includes","()","<p>Deletes from #includes those whose module has been removed from the documentation.\n"],["update_output_dir","RDoc::RDoc","RDoc/RDoc.html#method-i-update_output_dir","(op_dir, time, last = {})","<p>Update the flag file in an output directory.\n"],["update_parser_of_file","RDoc::Store","RDoc/Store.html#method-i-update_parser_of_file","(absolute_name, parser)",""],["upgrade_to_class","RDoc::Context","RDoc/Context.html#method-i-upgrade_to_class","(mod, class_type, enclosing)","<p>Upgrades NormalModule <code>mod</code> in <code>enclosing</code> to a <code>class_type</code>\n"],["use_markup","RDoc::Parser","RDoc/Parser.html#method-c-use_markup","(content)","<p>If there is a <code>markup: parser_name</code> comment at the front of the file, use it to determine the parser.  …\n"],["use_prefix","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-use_prefix","()","<p>Adds the stored #prefix to the output and clears it.  Lists generate a prefix for later consumption. …\n"],["visibility=","RDoc::Options","RDoc/Options.html#method-i-visibility-3D","(visibility)","<p>Sets the minimum visibility of a documented method.\n<p>Accepts <code>:public</code>, <code>:protected</code>, <code>:private</code>, <code>:nodoc</code>, or …\n"],["warn","RDoc::Options","RDoc/Options.html#method-i-warn","(message)","<p>Displays a warning using Kernel#warn if we’re being verbose\n"],["warn","RDoc::Parser::Ruby","RDoc/Parser/Ruby.html#method-i-warn","(message)","<p>Prints <code>message</code> to +$stderr+ unless we’re being quiet\n"],["wrap","RDoc::Markup::ToRdoc","RDoc/Markup/ToRdoc.html#method-i-wrap","(text)","<p>Wraps <code>text</code> to #width\n"],["wrap","RDoc::Text","RDoc/Text.html#method-i-wrap","(txt, line_len = 76)","<p>Wraps <code>txt</code> to <code>line_len</code>\n"],["write_options","RDoc::Options","RDoc/Options.html#method-i-write_options","()","<p>Writes the YAML file .rdoc_options to the current directory containing the parsed options.\n"],["write_style_sheet","RDoc::Generator::Darkfish","RDoc/Generator/Darkfish.html#method-i-write_style_sheet","()","<p>Copy over the stylesheet into the appropriate place in the output directory.\n"],["yields_directive","RDoc::MarkupReference","RDoc/MarkupReference.html#method-i-yields_directive","(foo, bar)","<p>The <code>:yields:</code> directive overrides the actual yield found in the Ruby code.\n<p>Click on the calling sequence …\n"],["zip?","RDoc::Parser","RDoc/Parser.html#method-c-zip-3F","(file)","<p>Checks if <code>file</code> is a zip file in disguise.  Signatures from www.garykessler.net/library/file_sigs.html …\n"],["CONTRIBUTING","","CONTRIBUTING_rdoc.html","","<p>Developer Introduction\n<p>So you want to write a generator, fix a bug, or otherwise work with RDoc.  This …\n"],["CVE-2013-0256","","CVE-2013-0256_rdoc.html","","<p>RDoc 2.3.0 through 3.12 XSS Exploit\n<p>RDoc documentation generated by rdoc 2.3.0 through rdoc 3.12 and prereleases …\n"],["ExampleRDoc","","ExampleRDoc_rdoc.html","","<p>This document contains example output to show RDoc styling.  This file was created from a RDoc Markup …\n"],["History","","History_rdoc.html","","<p>5.1.0 / 2017-02-24\n<p>Bug fixes\n<p>Fix an issue that rdoc fails when running on Windows with RUBYOPT=-U. PR #430 …\n"],["LEGAL","","LEGAL_rdoc.html","","<p>Legal Notice Information\n<p>The files in this distribution are covered by the Ruby license (see LICENSE) …\n"],["LICENSE","","LICENSE_rdoc.html","","<p>RDoc is copyrighted free software.\n<p>You can redistribute it and/or modify it under either the terms of …\n"],["README","","README_rdoc.html","","<p>RDoc - Ruby Documentation System\n<p>home  &mdash; github.com/ruby/rdoc\n<p>rdoc  &mdash; ruby.github.io/rdoc\n"],["RI","","RI_rdoc.html","","<p>RI\n<p><code>ri</code> is a tool that allows Ruby documentation to be viewed on the command-line.\n<p>You can use <code>ri</code> to look …\n"],["TODO","","TODO_rdoc.html","","<p>This file contains some things that might happen in RDoc, or might not. Forward Looking Statements applies. …\n"]]}}