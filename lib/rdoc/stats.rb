##
# RDoc statistics collector which prints a summary and report of a project's
# documentation totals.

class RDoc::Stats

  ##
  # These are the statistics generated by a coverage run.

  RunStats = Struct.new(
      :undoc_attributes,
      :undoc_classes,
      :undoc_constants,
      :undoc_items,
      :undoc_methods,
      :undoc_modules,
      :undoc_params,
      :num_classes,
      :num_modules,
      :num_constants,
      :num_attributes,
      :num_methods,
      :num_params,
      :num_items
  )

  ##
  # Output level for the coverage report

  attr_reader :coverage_level

  ##
  # Count of files parsed during parsing

  attr_reader :files_so_far

  ##
  # Total number of files found

  attr_reader :num_files
  
  ##
  # Start time of the stats run

  attr_reader :start

  ##
  # A RunStats struct that contains information on the last run.

  attr_reader :run_stats

  ##
  # Creates a new Stats that will have +num_files+.  +verbosity+ defaults to 1
  # which will create an RDoc::Stats::Normal outputter.

  def initialize num_files, verbosity = 1, formatter = Formatter::Text
    @files_so_far = 0
    @num_files = num_files

    @run_stats = RunStats.new
    @run_stats.num_params = 0
    @run_stats.undoc_params = 0

    @coverage_level = 0
    @doc_items = nil
    @fully_documented = false
    @percent_doc = nil
    @start = Time.now

    @display = case verbosity
               when 0 then Quiet.new   num_files
               when 1 then Normal.new  num_files
               else        Verbose.new num_files
               end

    @formatter = formatter.new(self)
  end

  ##
  # Records the parsing of an alias +as+.

  def add_alias as
    @display.print_alias as
  end

  ##
  # Records the parsing of an attribute +attribute+

  def add_attribute attribute
    @display.print_attribute attribute
  end

  ##
  # Records the parsing of a class +klass+

  def add_class klass
    @display.print_class klass
  end

  ##
  # Records the parsing of +constant+

  def add_constant constant
    @display.print_constant constant
  end

  ##
  # Records the parsing of +file+

  def add_file(file)
    @files_so_far += 1
    @display.print_file @files_so_far, file
  end

  ##
  # Records the parsing of +method+

  def add_method(method)
    @display.print_method method
  end

  ##
  # Records the parsing of a module +mod+

  def add_module(mod)
    @display.print_module mod
  end

  ##
  # Call this to mark the beginning of parsing for display purposes

  def begin_adding
    @display.begin_adding
  end

  ##
  # Calculates documentation totals and percentages for classes, modules,
  # constants, attributes and methods.

  def calculate
    return if @doc_items

    ucm = RDoc::TopLevel.unique_classes_and_modules

    classes = RDoc::TopLevel.unique_classes.reject { |cm| cm.full_name == 'Object' }

    constants = []
    ucm.each { |cm| constants.concat cm.constants }

    methods = []
    ucm.each { |cm| methods.concat cm.method_list }

    attributes = []
    ucm.each { |cm| attributes.concat cm.attributes }

    @run_stats.num_attributes, @run_stats.undoc_attributes = doc_stats attributes
    @run_stats.num_classes,    @run_stats.undoc_classes    = doc_stats classes
    @run_stats.num_constants,  @run_stats.undoc_constants  = doc_stats constants
    @run_stats.num_methods,    @run_stats.undoc_methods    = doc_stats methods
    @run_stats.num_modules,    @run_stats.undoc_modules    = doc_stats RDoc::TopLevel.unique_modules

    @run_stats.num_items =
      @run_stats.num_attributes +
      @run_stats.num_classes +
      @run_stats.num_constants +
      @run_stats.num_methods +
      @run_stats.num_modules +
      @run_stats.num_params

    @run_stats.undoc_items =
      @run_stats.undoc_attributes +
      @run_stats.undoc_classes +
      @run_stats.undoc_constants +
      @run_stats.undoc_methods +
      @run_stats.undoc_modules +
      @run_stats.undoc_params

    @doc_items = @run_stats.num_items - @run_stats.undoc_items
  end

  ##
  # Sets coverage report level.  Accepted values are:
  #
  # false or nil:: No report
  # 0:: Classes, modules, constants, attributes, methods
  # 1:: Level 0 + method parameters

  def coverage_level= level
    level = -1 unless level

    @coverage_level = level
  end

  ##
  # Returns the length and number of undocumented items in +collection+.

  def doc_stats collection
    visible = collection.select { |item| item.display? }
    [visible.length, visible.count { |item| not item.documented? }]
  end

  ##
  # Call this to mark the end of parsing for display purposes

  def done_adding
    @display.done_adding
  end

  ##
  # The documentation status of this project.  +true+ when 100%, +false+ when
  # less than 100% and +nil+ when unknown.
  #
  # Set by calling #calculate

  def fully_documented?
    @fully_documented
  end

  ##
  # A report that says you did a great job!

  def great_job
    @formatter.great_job
  end

  ##
  # Calculates the percentage of items documented.

  def percent_doc
    return @percent_doc if @percent_doc

    @fully_documented = (@run_stats.num_items - @doc_items) == 0

    @percent_doc = @doc_items.to_f / @run_stats.num_items * 100 if @run_stats.num_items.nonzero?
    @percent_doc ||= 0

    @percent_doc
  end

  ##
  # Returns a report on which items are not documented

  def report
    if @coverage_level > 0 then
      extend RDoc::Text
    end

    report = []
    
    if @coverage_level.zero? then
      calculate
      return great_job if @run_stats.num_items == @doc_items
    end

    ucm = RDoc::TopLevel.unique_classes_and_modules

    ucm.sort.each do |cm|
      report << report_class_module(cm) {
        [
          report_constants(cm),
          report_attributes(cm),
          report_methods(cm),
        ].compact
      }
    end

    if @coverage_level > 0 then
      calculate
      return great_job if @run_stats.num_items == @doc_items
    end

    report.unshift nil
    report.unshift 'The following items are not documented:'

    report.join "\n"
  end

  ##
  # Returns a report on undocumented attributes in ClassModule +cm+

  def report_attributes cm
    return if cm.attributes.empty?

    report = []

    cm.each_attribute do |attr|
      next if attr.documented?
      report << "  #{attr.definition} :#{attr.name} " \
        "# in file #{attr.file.full_name}"
    end

    report
  end

  ##
  # Returns a report on undocumented items in ClassModule +cm+

  def report_class_module cm, &block
    return if cm.fully_documented? and @coverage_level.zero?
    return unless cm.display?

    @formatter.report_class_module(cm, &block)
  end

  ##
  # Returns a report on undocumented constants in ClassModule +cm+

  def report_constants cm
    return if cm.constants.empty?

    @formatter.report_constants(cm)
  end

  ##
  # Returns a report on undocumented methods in ClassModule +cm+

  def report_methods cm
    return if cm.method_list.empty?
    report = []

    @formatter.report_methods(cm)
  end


  def calculate_undoc_params(method)
    return nil if method.documented? and @coverage_level.zero?

    if @coverage_level > 0 then
      params, undoc = undoc_params method

      @run_stats.num_params += params

      unless undoc.empty? then
        @run_stats.undoc_params += undoc.length
        return undoc
      end
    end
  end

  ##
  # Returns a summary of the collected statistics.

  def summary
    calculate
    @formatter.summary
  end

  ##
  # Determines which parameters in +method+ were not documented.  Returns a
  # total parameter count and an Array of undocumented methods.

  def undoc_params method
    @markup_formatter ||= RDoc::Markup::ToTtOnly.new

    params = method.param_list

    return 0, [] if params.empty?

    document = parse method.comment

    tts = document.accept @markup_formatter

    undoc = params - tts

    [params.length, undoc]
  end

  autoload :Quiet,   'rdoc/stats/quiet'
  autoload :Normal,  'rdoc/stats/normal'
  autoload :Verbose, 'rdoc/stats/verbose'

  module Formatter
    autoload :Text, 'rdoc/stats/formatter/text'
  end

end

